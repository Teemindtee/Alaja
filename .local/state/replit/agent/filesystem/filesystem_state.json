{"file_contents":{"DATABASE_EXPORTS.md":{"content":"# FinderMeister Database Exports\n\nGenerated on: August 14, 2025 at 09:59 UTC\n\n## Quick Access Files\n\nüìÅ **Main Export Directory**: `/exports/`\nüìä **Complete Database**: `exports/complete_database_export.json` (60KB)\nüìã **Documentation**: `exports/README.md`\nüóúÔ∏è **Compressed Archive**: `exports/findermeister_database_export_20250814.tar.gz`\n\n## File Formats Available\n\n### 1. CSV Format (`/exports/csv/`)\nPerfect for Excel, Google Sheets, or database imports:\n- ‚úÖ **16 tables** exported as individual CSV files\n- ‚úÖ **Headers included** for easy importing\n- ‚úÖ **134 total records** across all tables\n- ‚úÖ **UTF-8 encoding** for international characters\n\n### 2. JSON Format (`/exports/json/`)\nIdeal for applications, APIs, or data analysis:\n- ‚úÖ **Structured data** with metadata for each table\n- ‚úÖ **Type-safe exports** preserving data types\n- ‚úÖ **Array fields properly formatted**\n- ‚úÖ **Timestamps in ISO 8601 format**\n\n### 3. Complete Database JSON\nSingle file containing entire database:\n- ‚úÖ **All tables in one file**: `complete_database_export.json`\n- ‚úÖ **Export metadata** including date and record counts\n- ‚úÖ **60KB compressed** - easy to share or backup\n\n## Database Statistics\n\n| Category | Tables | Records |\n|----------|--------|---------|\n| **Users & Auth** | 2 | 24 records |\n| **Marketplace** | 4 | 42 records |  \n| **Communication** | 2 | 29 records |\n| **Financial** | 4 | 27 records |\n| **Platform** | 4 | 12 records |\n| **TOTAL** | **16** | **134 records** |\n\n## Key Tables Exported\n\n### Core Platform Data\n- **users.csv** - 15 user accounts (clients, finders, admins)\n- **finders.csv** - 9 finder profiles with earnings and ratings\n- **requests.csv** - 16 service requests from clients\n- **proposals.csv** - 13 finder proposals for jobs\n\n### Business Operations  \n- **contracts.csv** - 7 active/completed work agreements\n- **transactions.csv** - 14 payment records\n- **withdrawal_requests.csv** - 4 finder withdrawal requests\n- **reviews.csv** - 2 completed job reviews\n\n### Communication\n- **conversations.csv** - 6 message threads\n- **messages.csv** - 23 individual messages\n\n### Platform Management\n- **categories.csv** - 9 service categories\n- **admin_settings.csv** - Platform configuration\n- **blog_posts.csv** - 2 published blog posts\n- **tokens.csv** - 8 proposal token records\n\n## Import Instructions\n\n### PostgreSQL (from CSV)\n```sql\n-- Example for users table\nCOPY users FROM '/path/to/users.csv' DELIMITER ',' CSV HEADER;\n```\n\n### MySQL (from CSV)  \n```sql\n-- Example for users table\nLOAD DATA INFILE '/path/to/users.csv' \nINTO TABLE users \nFIELDS TERMINATED BY ',' \nENCLOSED BY '\"' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS;\n```\n\n### Application Import (from JSON)\n```javascript\n// Example: Import users data\nconst userData = require('./exports/json/users.json');\nconsole.log(`Importing ${userData.record_count} users...`);\nuserData.data.forEach(user => {\n  // Process each user record\n});\n```\n\n## Security Notes\n\n‚ö†Ô∏è **Important**: \n- Passwords are bcrypt hashed (secure)\n- No sensitive API keys included\n- User data is included for platform functionality\n- Handle exports according to your privacy policy\n\n## File Integrity\n\nAll exports include:\n- ‚úÖ Record counts for verification\n- ‚úÖ Export timestamps  \n- ‚úÖ Table metadata\n- ‚úÖ Complete field mapping\n- ‚úÖ Null value handling\n\n---\n\n**Need Help?** Check the detailed README.md in the exports folder for more information about each table and import procedures.","size_bytes":3483},"EMAIL_SETUP.md":{"content":"# Email Notification System Setup\n\n## Overview\nFinderMeister now includes a comprehensive email notification system that sends alerts to both finders and clients for various platform activities.\n\n## Email Notifications\n\n### For Finders:\n- New message from client\n- Hired for a project (proposal accepted)  \n- Work submission approved\n- Work submission rejected/revision requested\n\n### For Clients:\n- New proposal received on request\n- Work submission from finder\n- New message from finder\n\n## Environment Variables Required\n\nAdd these environment variables to your `.env` file or Replit Secrets:\n\n```env\n# SMTP Configuration\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n\n# Email Settings\nFROM_EMAIL=noreply@findermeister.com\nFRONTEND_URL=https://your-replit-url.replit.app\n```\n\n## Gmail Setup Instructions\n\n1. **Enable 2-Factor Authentication** on your Gmail account\n2. **Generate App Password**:\n   - Go to Google Account settings\n   - Security ‚Üí 2-Step Verification ‚Üí App passwords\n   - Select \"Mail\" and generate a password\n   - Use this password as `SMTP_PASS`\n\n## Alternative SMTP Providers\n\n### Using SendGrid:\n```env\nSMTP_HOST=smtp.sendgrid.net\nSMTP_PORT=587\nSMTP_USER=apikey\nSMTP_PASS=your-sendgrid-api-key\n```\n\n### Using Mailgun:\n```env\nSMTP_HOST=smtp.mailgun.org\nSMTP_PORT=587\nSMTP_USER=postmaster@your-domain.mailgun.org\nSMTP_PASS=your-mailgun-password\n```\n\n## Testing Email Setup\n\nOnce configured, emails will be automatically sent when:\n- Clients message finders\n- Finders submit proposals\n- Proposals are accepted (hiring)\n- Work is submitted for review\n- Work submissions are approved/rejected\n\n## Troubleshooting\n\nIf emails aren't sending:\n1. Check server logs for email errors\n2. Verify SMTP credentials\n3. Ensure SMTP_HOST and SMTP_PORT are correct\n4. For Gmail, confirm app password is used (not regular password)\n5. Check spam folders for test emails\n\n## Security Notes\n\n- Never commit email credentials to version control\n- Use app passwords instead of regular passwords\n- Consider using a dedicated email service for production\n- Set appropriate FROM_EMAIL for your domain","size_bytes":2151},"create-admin-user.js":{"content":"\nconst bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n\n// Generate a secure random password\nfunction generateSecurePassword(length = 12) {\n  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n  let password = '';\n  for (let i = 0; i < length; i++) {\n    password += charset.charAt(Math.floor(Math.random() * charset.length));\n  }\n  return password;\n}\n\n// Generate UUID\nfunction generateUUID() {\n  return crypto.randomUUID();\n}\n\nasync function createAdminUser() {\n  const password = generateSecurePassword(16);\n  const hashedPassword = await bcrypt.hash(password, 12);\n  const userId = generateUUID();\n  const email = `admin-${Date.now()}@findermeister.com`;\n  \n  console.log('\\n=== NEW ADMIN USER CREATED ===');\n  console.log('Email:', email);\n  console.log('Password:', password);\n  console.log('User ID:', userId);\n  console.log('Hashed Password:', hashedPassword);\n  console.log('\\n=== SQL INSERT STATEMENT ===');\n  console.log(`INSERT INTO users (id, email, password, first_name, last_name, role, is_verified, is_banned, created_at) VALUES ('${userId}', '${email}', '${hashedPassword}', 'Admin', 'User', 'admin', true, false, '${new Date().toISOString()}');`);\n  console.log('\\n=== SAVE THESE CREDENTIALS SECURELY ===');\n  \n  // Also save to a file for backup\n  const fs = require('fs');\n  const credentials = {\n    email: email,\n    password: password,\n    userId: userId,\n    createdAt: new Date().toISOString()\n  };\n  \n  fs.writeFileSync('new-admin-credentials.json', JSON.stringify(credentials, null, 2));\n  console.log('\\nCredentials also saved to: new-admin-credentials.json');\n}\n\ncreateAdminUser().catch(console.error);\n","size_bytes":1685},"database_export_README.md":{"content":"# FinderMeister Database Export\n\nThis file contains a complete PostgreSQL database dump for the FinderMeister project.\n\n## Database Contents\n\nThe database includes:\n\n### Core Tables\n- **users** - User accounts (clients, finders, admins)\n- **finders** - Finder profiles with metrics and earnings\n- **requests** - Client service requests\n- **proposals** - Finder proposals for requests\n- **contracts** - Accepted proposals with escrow management\n- **reviews** - Client feedback on completed work\n\n### Token & Payment System\n- **tokens** - Finder token balances for proposal submissions\n- **transactions** - Token purchase/spend history\n- **withdrawal_requests** - Finder withdrawal management\n\n### Communication System\n- **conversations** - Client-finder message threads\n- **messages** - Individual messages in conversations\n\n### Admin Management\n- **categories** - Request categories management\n- **admin_settings** - Platform configuration settings\n- **blog_posts** - Blog content management (NEW)\n\n### Features Included\n- ‚úÖ Role-based authentication (client, finder, admin)\n- ‚úÖ Token-based proposal system\n- ‚úÖ Escrow payment management\n- ‚úÖ Real-time messaging between clients and finders\n- ‚úÖ Admin panel with user/content management\n- ‚úÖ Blog posts system with WYSIWYG editor\n- ‚úÖ Mobile-responsive client dashboard\n- ‚úÖ Profile management for all user types\n\n## Import Instructions\n\nTo import this database:\n\n```bash\n# Create a new PostgreSQL database\ncreatedb findermeister_db\n\n# Import the data\npsql findermeister_db < database_export.sql\n```\n\n## Test Accounts\n\nThe database includes these test accounts:\n\n### Admin Account\n- Email: admin@findermeister.com\n- Password: admin123\n\n### Test Users\n- All test user passwords: password123\n- Includes sample clients and finders with demo data\n\n## Database Schema\n\nThe database uses Drizzle ORM with PostgreSQL and includes:\n- UUID primary keys for all tables\n- Proper foreign key relationships\n- Indexed fields for performance\n- Timestamp tracking for audit trails\n- Role-based access control\n\n## Recent Updates\n\n- Mobile client dashboard matching UI mockup design\n- Blog posts system with slug-based URLs\n- WYSIWYG editor for rich content creation\n- Enhanced admin management capabilities\n- PostgreSQL database migration completed\n\nThis export was generated on: August 13, 2025","size_bytes":2338},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"generate-admin-token.js":{"content":"const jwt = require('jsonwebtoken');\n\nconst token = jwt.sign(\n  { \n    userId: 'admin-test-123', \n    role: 'admin' \n  }, \n  'your-secret-key-here', // This should match your JWT_SECRET\n  { \n    expiresIn: '24h' \n  }\n);\n\nconsole.log('Admin token:', token);\n\n// Test the token by setting it in localStorage via console:\nconsole.log('\\nTo use this token, run in browser console:');\nconsole.log(`localStorage.setItem('findermeister_token', '${token}');`);\nconsole.log('Then refresh the page.');","size_bytes":491},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFinderMeister is a full-stack service marketplace platform designed to connect clients seeking products or services with freelance \"finders.\" The platform facilitates a streamlined process for clients to post requests and for finders to submit proposals. Key features include role-based authentication (clients, finders, admins), a token-based proposal system, secure escrow functionality for payments, and comprehensive administrative tools for platform management. The vision is to create an efficient and trustworthy marketplace for finding specialized services.\n\n## Recent Enhancements (January 2025)\n- **Client Profile Page**: Completely redesigned with ultra-modern, clean, crispy design featuring animated gradient backgrounds, premium glass-morphism cards, enhanced mobile responsiveness, inline editing system, and comprehensive account management features.\n- **Withdrawal Balance Fix**: Resolved critical issue where negative balances (‚Ç¶-2272.50) were displayed, implemented proper balance validation, and reset affected balances to zero with Math.max(0, balance) protection.\n- **Logout Redirect Enhancement**: Fixed logout functionality to redirect immediately to home page without showing flash of empty data or current page content during logout process.\n- **Flutterwave Integration**: Successfully migrated from Paystack to Flutterwave for payment processing, including automatic withdrawal system for finders with direct bank account transfers.\n- **Admin Contact Settings**: Enhanced admin dashboard with comprehensive contact information management including phone, email, address, social media links, and support response times.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDesign requirements: Clean, simple UI matching exact mockups without complex filters or excessive features.\nUser feedback: Frustrated with back-and-forth iterations - requires working solutions on first attempt.\n\n# System Architecture\n\n## Frontend Architecture\n- **Technology Stack**: React 18 with TypeScript.\n- **Routing**: Lightweight client-side navigation using Wouter.\n- **State Management**: TanStack Query for server state and React hooks for local state.\n- **UI/UX**: Shadcn/ui components built on Radix UI primitives, styled with Tailwind CSS, emphasizing a mobile-first responsive design.\n- **Authentication**: JWT-based authentication with protected routes and role-based access control.\n\n## Backend Architecture\n- **Runtime & Framework**: Node.js with Express.js.\n- **ORM**: Drizzle ORM for type-safe database interactions.\n- **Authentication**: JWT tokens with bcrypt for password hashing.\n- **API Design**: RESTful API structure with middleware for authentication and error handling.\n\n## Database Design\n- **Database**: PostgreSQL, hosted on Neon for serverless capabilities.\n- **Schema Management**: Drizzle migrations for version control.\n- **Core Entities**: Users (clients, finders, admins) with role-based permissions, Finders with performance metrics, Client Requests with status tracking, Finder Proposals with token requirements, Contracts and Escrow for payment, and a Token system for proposal submissions. Reviews and ratings are also supported.\n\n## Authentication & Authorization\n- **JWT Implementation**: Stateless authentication using secure token storage.\n- **Role-Based Access**: Supports distinct roles: Client, Finder, and Admin, each with specific permissions.\n- **Security**: Bcrypt hashing with salt rounds for robust password security.\n\n## Token Economy System\n- **Proposal Tokens**: Finders must spend tokens to submit proposals.\n- **Escrow System**: Secure payment holding until work completion and client approval.\n\n## Request Status Flow\n- **Open**: Request is active and open for proposals.\n- **In Progress**: A proposal has been accepted, and work is underway.\n- **Completed**: Work has been finished and approved.\n- **Cancelled**: Request has been withdrawn by the client.\n\n## Messaging System\n- **Initiation**: Only clients can initiate conversations with finders.\n- **Context**: Conversations are linked to specific proposals.\n- **Accessibility**: Clients can message any finder who has submitted a proposal for their request.\n\n## Development & Deployment\n- **Build Tools**: Vite for frontend bundling, esbuild for backend compilation.\n- **Language**: Full TypeScript implementation across frontend, backend, and shared schemas.\n- **Structure**: Monorepo organization for shared types and schemas.\n\n## Database Export System\n- **Comprehensive Export**: Automated scripts for SQL, CSV, and JSON formats.\n- **Export Scripts**: `scripts/simple-export.mjs` for complete database exports.\n- **Multiple Formats**: \n  - SQL dumps with INSERT statements for direct PostgreSQL import\n  - JSON exports with metadata and structured data\n  - CSV files (one per table) for spreadsheet analysis\n- **Export Statistics**: Detailed reporting of table counts and record statistics.\n- **Automated Timestamping**: All exports include timestamps for version tracking.\n\n## UI/UX Decisions\n- **Color Scheme**: Consistent red branding for key interactive elements.\n- **Mobile Design**: Emphasis on full-screen layouts, larger touch targets, and modern chat UI (e.g., WhatsApp-style bubbles) for mobile responsiveness.\n- **Admin Interface**: Comprehensive control panel with metrics and quick actions for user, category, settings, withdrawal, and request management.\n- **Profile Design**: Finder profile pages are designed as always-editable forms with a single update action.\n\n## Customer Support System\n- **Help Center**: Comprehensive FAQ system with contextual help organized by categories (Getting Started, Tokens & Payments, Communication, Work Completion, Account Management).\n- **Contact Support**: Ticket submission system with priority levels and response time expectations.\n- **Support Widget**: Context-aware floating help widget that appears on key pages (dashboard, contracts, proposals, etc.) with relevant tips and quick access to help resources.\n- **Contextual Help**: Page-specific guidance and common questions tailored to the current user workflow.\n- **Response Times**: Structured by priority levels from 2-3 business days (low) to 1-2 hours (urgent).\n\n# External Dependencies\n\n## Database & Storage\n- **Neon PostgreSQL**: Serverless PostgreSQL database.\n- **Drizzle ORM**: For database interactions and schema management.\n\n## UI & Styling\n- **Radix UI**: Headless component primitives.\n- **Tailwind CSS**: Utility-first CSS framework.\n- **Shadcn/ui**: Pre-built component library.\n\n## Authentication & Security\n- **jsonwebtoken (JWT)**: For token-based authentication.\n- **bcrypt**: For password hashing.\n- **Zod**: For runtime type validation of API requests.\n\n## State Management & Data Fetching\n- **TanStack Query**: For server state management.\n- **React Hook Form**: For form state management and validation.\n\n## Development Tools\n- **Vite**: Frontend build tool and development server.\n- **TypeScript**: For static type checking.\n- **ESBuild**: For fast JavaScript bundling.\n\n## Routing & Navigation\n- **Wouter**: Lightweight React router.\n\n## Payment Processing\n- **Flutterwave**: Integrated for token purchases, escrow transactions, and automatic withdrawal processing.\n- **Automatic Withdrawals**: Finder withdrawals are automatically processed via Flutterwave bank transfers with webhook status updates.\n- **Bank Transfer Support**: Direct bank account withdrawals for finders with automatic processing and status tracking.","size_bytes":7515},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // FinderMeister custom colors\n        \"finder-red\": \"var(--finder-red)\",\n        \"finder-red-dark\": \"var(--finder-red-dark)\",\n        \"finder-gray\": \"var(--finder-gray)\",\n        \"finder-text\": \"var(--finder-text)\",\n        \"finder-text-light\": \"var(--finder-text-light)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3088},"test-finder-level.js":{"content":"// Quick test script to check finder levels functionality\nconst testFinderLevel = async () => {\n  try {\n    // Test getting levels\n    const response = await fetch('http://localhost:5000/api/admin/finder-levels', {\n      headers: {\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log('Status:', response.status);\n    const data = await response.json();\n    console.log('Response:', data);\n    \n    // Test creating a level\n    const createResponse = await fetch('http://localhost:5000/api/admin/finder-levels', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: 'Test Level',\n        description: 'Test finder level',\n        minEarnedAmount: '1000',\n        minJobsCompleted: 5,\n        minReviewPercentage: 80,\n        icon: 'User',\n        color: '#ff0000',\n        order: 1,\n        isActive: true\n      })\n    });\n    \n    console.log('Create Status:', createResponse.status);\n    const createData = await createResponse.json();\n    console.log('Create Response:', createData);\n    \n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\ntestFinderLevel();","size_bytes":1319},"test-finder-levels-api.js":{"content":"const express = require('express');\nconst { storage } = require('./server/storage.ts');\n\n// Test the finder levels functionality directly\nasync function testFinderLevels() {\n  try {\n    console.log('Testing finder levels...');\n    const levels = await storage.getFinderLevels();\n    console.log('‚úì Successfully fetched', levels.length, 'finder levels');\n    \n    // Test creating a level\n    const testLevel = {\n      name: 'Test Level',\n      description: 'Test description',\n      minEarnedAmount: '2000',\n      minJobsCompleted: 10,\n      minReviewPercentage: 85,\n      icon: 'Search',\n      color: '#8b5cf6',\n      order: 4,\n      isActive: true\n    };\n    \n    const created = await storage.createFinderLevel(testLevel);\n    console.log('‚úì Successfully created test level:', created.id);\n    \n    // Clean up\n    await storage.deleteFinderLevel(created.id);\n    console.log('‚úì Successfully deleted test level');\n    \n    console.log('‚úì All finder level operations working correctly!');\n    process.exit(0);\n  } catch (error) {\n    console.error('‚úó Error:', error.message);\n    process.exit(1);\n  }\n}\n\ntestFinderLevels();","size_bytes":1135},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"exports/README.md":{"content":"# FinderMeister Database Exports\n\nThis directory contains database exports in multiple formats for the FinderMeister Service Marketplace platform.\n\n## Latest Export Summary\n\n- **Export Date**: August 14, 2025\n- **Total Tables**: 16\n- **Total Records**: 135\n- **Database**: FinderMeister Service Marketplace\n\n## Available Export Formats\n\n### üìÑ SQL Format\nComplete database dump with structure and data:\n- `findermeister_[timestamp].sql` - Full SQL dump with INSERT statements\n- Can be imported directly into PostgreSQL\n- Includes foreign key constraint handling\n\n### üìä JSON Format\nStructured data export in JSON format:\n- `findermeister_[timestamp].json` - Complete database export with metadata\n- `findermeister_[timestamp]_summary.json` - Summary with preview data\n- Includes export metadata and statistics\n- Easy to parse programmatically\n\n### üìà CSV Format\nIndividual CSV files for each table:\n- `csv_[timestamp]/` directory containing:\n  - `users.csv` - User accounts (15 records)\n  - `finders.csv` - Finder profiles (9 records)\n  - `requests.csv` - Service requests (16 records)\n  - `proposals.csv` - Finder proposals (13 records)\n  - `contracts.csv` - Active contracts (7 records)\n  - `messages.csv` - Chat messages (24 records)\n  - `conversations.csv` - Message threads (6 records)\n  - And more...\n\n## Tables with Data\n\n| Table | Records | Description |\n|-------|---------|-------------|\n| users | 15 | User accounts (clients, finders, admins) |\n| finders | 9 | Finder profiles and performance data |\n| requests | 16 | Service requests from clients |\n| proposals | 13 | Finder proposals for requests |\n| contracts | 7 | Active contracts between clients and finders |\n| messages | 24 | Chat messages in conversations |\n| conversations | 6 | Message threads between users |\n| transactions | 14 | Financial transactions and payments |\n| tokens | 8 | Finder token balances |\n| categories | 9 | Service categories |\n| order_submissions | 4 | Work submissions from finders |\n| withdrawal_requests | 4 | Payout requests from finders |\n| reviews | 2 | Client reviews of finder work |\n| blog_posts | 2 | Platform blog content |\n| admin_settings | 1 | Platform configuration |\n| withdrawal_settings | 1 | Payout system settings |\n\n## How to Use\n\n### Import SQL Data\n```bash\n# Into PostgreSQL\npsql -h your_host -d your_database -U your_user -f findermeister_[timestamp].sql\n```\n\n### Process JSON Data\n```javascript\n// Node.js example\nconst fs = require('fs');\nconst data = JSON.parse(fs.readFileSync('findermeister_[timestamp].json', 'utf8'));\nconsole.log(data.metadata); // Export info\nconsole.log(data.data.users); // User records\n```\n\n### Analyze CSV Data\n```bash\n# View user data\ncat csv_[timestamp]/users.csv\n\n# Count records in each table\nwc -l csv_[timestamp]/*.csv\n```\n\n## Export Script\n\nTo create new exports, run:\n```bash\nnode scripts/simple-export.mjs\n```\n\nThis will generate fresh exports with current data in all three formats.\n\n## Data Privacy\n\nThese exports contain production data including:\n- User information (emails, names, phone numbers)\n- Financial data (transactions, balances)\n- Private messages and conversations\n- Contract details and payments\n\n‚ö†Ô∏è **Handle with care and follow data protection regulations**\n\n## File Structure\n\n```\nexports/\n‚îú‚îÄ‚îÄ README.md                                    # This file\n‚îú‚îÄ‚îÄ findermeister_2025-08-14_10-56-01.sql      # SQL dump\n‚îú‚îÄ‚îÄ findermeister_2025-08-14_10-56-01.json     # Full JSON export\n‚îú‚îÄ‚îÄ findermeister_2025-08-14_10-56-01_summary.json # JSON summary\n‚îî‚îÄ‚îÄ csv_2025-08-14_10-56-01/                   # CSV directory\n    ‚îú‚îÄ‚îÄ users.csv\n    ‚îú‚îÄ‚îÄ finders.csv\n    ‚îú‚îÄ‚îÄ requests.csv\n    ‚îú‚îÄ‚îÄ proposals.csv\n    ‚îú‚îÄ‚îÄ contracts.csv\n    ‚îî‚îÄ‚îÄ ... (all other tables)\n```\n\n---\n\n*Generated by FinderMeister Database Export System*","size_bytes":3849},"exports/export_data.js":{"content":"const { neon } = require('@neondatabase/serverless');\nconst fs = require('fs').promises;\n\nconst DATABASE_URL = process.env.DATABASE_URL;\nif (!DATABASE_URL) {\n    console.error('DATABASE_URL not found');\n    process.exit(1);\n}\n\nconst sql = neon(DATABASE_URL);\n\nasync function exportData() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0] + '_' + new Date().toTimeString().split(' ')[0].replace(/:/g, '-');\n    \n    // Get all tables\n    const tables = await sql`\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' \n        ORDER BY table_name\n    `;\n    \n    console.log(`Found ${tables.length} tables to export`);\n    \n    // Export JSON\n    const jsonData = {};\n    \n    for (const table of tables) {\n        const tableName = table.table_name;\n        console.log(`Exporting ${tableName}...`);\n        \n        try {\n            const data = await sql(`SELECT * FROM \"${tableName}\"`);\n            jsonData[tableName] = data;\n            \n            // Export CSV for this table\n            if (data.length > 0) {\n                const columns = Object.keys(data[0]);\n                let csvContent = columns.join(',') + '\\n';\n                \n                for (const row of data) {\n                    const values = columns.map(col => {\n                        const value = row[col];\n                        if (value === null) return '';\n                        if (typeof value === 'string') {\n                            const escaped = value.replace(/\"/g, '\"\"');\n                            return /[\",\\n\\r]/.test(value) ? `\"${escaped}\"` : escaped;\n                        }\n                        if (Array.isArray(value)) {\n                            return `\"${JSON.stringify(value).replace(/\"/g, '\"\"')}\"`;\n                        }\n                        return String(value);\n                    });\n                    csvContent += values.join(',') + '\\n';\n                }\n                \n                await fs.writeFile(`exports/csv_${timestamp}/${tableName}.csv`, csvContent);\n            }\n        } catch (error) {\n            console.error(`Error exporting ${tableName}:`, error);\n        }\n    }\n    \n    // Create CSV directory\n    await fs.mkdir(`exports/csv_${timestamp}`, { recursive: true });\n    \n    // Save JSON\n    const fullExport = {\n        metadata: {\n            exportedAt: new Date().toISOString(),\n            database: 'FinderMeister Service Marketplace',\n            totalTables: tables.length,\n            totalRecords: Object.values(jsonData).reduce((sum, records) => sum + records.length, 0)\n        },\n        data: jsonData\n    };\n    \n    await fs.writeFile(`exports/findermeister_${timestamp}.json`, JSON.stringify(fullExport, null, 2));\n    \n    console.log('‚úÖ Export completed!');\n    console.log(`üìÅ Files saved in: exports/`);\n    console.log(`üìÑ JSON: findermeister_${timestamp}.json`);\n    console.log(`üìä CSV: csv_${timestamp}/ directory`);\n}\n\nexportData().catch(console.error);\n","size_bytes":3044},"scripts/create-test-client-and-finds.js":{"content":"\nconst fetch = require('node-fetch');\n\nconst BASE_URL = 'http://localhost:5000';\n\nasync function createTestClientAndFinds() {\n  try {\n    console.log('Creating test client account...');\n    \n    // 1. Register test client\n    const registerResponse = await fetch(`${BASE_URL}/api/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: 'testclient@example.com',\n        password: 'password123',\n        firstName: 'Test',\n        lastName: 'Client',\n        role: 'client'\n      })\n    });\n\n    if (!registerResponse.ok) {\n      const error = await registerResponse.json();\n      console.error('Registration failed:', error);\n      return;\n    }\n\n    const { token, user } = await registerResponse.json();\n    console.log('‚úÖ Test client created successfully:', user.email);\n\n    // 2. Create first find\n    console.log('\\nCreating first find...');\n    const find1Response = await fetch(`${BASE_URL}/api/client/finds`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        title: 'Find a Professional Logo Designer',\n        description: 'I need a creative logo designer to create a modern, minimalist logo for my tech startup. The logo should be versatile and work well in both digital and print formats. Must have experience with tech companies and provide 3-5 concept variations.',\n        category: 'Design',\n        budgetMin: '15000',\n        budgetMax: '35000',\n        timeframe: '1 week',\n        location: 'Remote/Online',\n        requirements: 'Portfolio required, must have Adobe Creative Suite experience, provide vector files'\n      })\n    });\n\n    if (!find1Response.ok) {\n      const error = await find1Response.json();\n      console.error('First find creation failed:', error);\n      return;\n    }\n\n    const find1 = await find1Response.json();\n    console.log('‚úÖ First find created:', find1.title);\n\n    // 3. Create second find\n    console.log('\\nCreating second find...');\n    const find2Response = await fetch(`${BASE_URL}/api/client/finds`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        title: 'Social Media Marketing Expert Needed',\n        description: 'Looking for an experienced social media marketer to help grow my Instagram and TikTok presence. Need someone who can create engaging content, manage posting schedules, and increase follower engagement. Must understand current trends and have proven results.',\n        category: 'Marketing',\n        budgetMin: '25000',\n        budgetMax: '50000',\n        timeframe: '1 month',\n        location: 'Lagos, Nigeria',\n        requirements: 'Proven track record with social media growth, content creation skills, knowledge of Instagram and TikTok algorithms'\n      })\n    });\n\n    if (!find2Response.ok) {\n      const error = await find2Response.json();\n      console.error('Second find creation failed:', error);\n      return;\n    }\n\n    const find2 = await find2Response.json();\n    console.log('‚úÖ Second find created:', find2.title);\n\n    console.log('\\nüéâ Test client and finds created successfully!');\n    console.log('\\nAccount Details:');\n    console.log('Email:', user.email);\n    console.log('Password: password123');\n    console.log('\\nFind IDs:');\n    console.log('Find 1:', find1.id);\n    console.log('Find 2:', find2.id);\n    \n    // Save token for future use\n    const fs = require('fs');\n    fs.writeFileSync('test_client_token.txt', token);\n    console.log('\\nüíæ Client token saved to test_client_token.txt');\n\n  } catch (error) {\n    console.error('‚ùå Error:', error.message);\n  }\n}\n\n// Run the script\ncreateTestClientAndFinds();\n","size_bytes":3875},"scripts/export-database.ts":{"content":"#!/usr/bin/env tsx\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { neon } from '@neondatabase/serverless';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { format as formatDate } from 'date-fns';\n\nconst DATABASE_URL = process.env.DATABASE_URL!;\n\nif (!DATABASE_URL) {\n  console.error('DATABASE_URL environment variable is required');\n  process.exit(1);\n}\n\n// Initialize database connection\nconst sql = neon(DATABASE_URL);\nconst db = drizzle(sql);\n\ninterface ExportOptions {\n  format: 'sql' | 'csv' | 'json';\n  outputDir: string;\n  timestamp: string;\n}\n\n// Get all table names\nasync function getAllTables(): Promise<string[]> {\n  const result = await sql`\n    SELECT table_name \n    FROM information_schema.tables \n    WHERE table_schema = 'public' \n    ORDER BY table_name\n  `;\n  return result.map(row => row.table_name);\n}\n\n// Export data in SQL format\nasync function exportSQL(options: ExportOptions): Promise<void> {\n  const tables = await getAllTables();\n  const timestamp = new Date().toISOString();\n  \n  let sqlContent = `-- FinderMeister Database Export\\n`;\n  sqlContent += `-- Generated on: ${timestamp}\\n`;\n  sqlContent += `-- Database: FinderMeister Service Marketplace\\n\\n`;\n  \n  sqlContent += `-- Disable foreign key checks for clean import\\n`;\n  sqlContent += `SET session_replication_role = replica;\\n\\n`;\n\n  for (const tableName of tables) {\n    console.log(`Exporting table: ${tableName}`);\n    \n    // Get table structure\n    const columns = await sql`\n      SELECT column_name, data_type, is_nullable, column_default\n      FROM information_schema.columns \n      WHERE table_name = ${tableName} \n      ORDER BY ordinal_position\n    `;\n    \n    sqlContent += `-- Table: ${tableName}\\n`;\n    sqlContent += `DROP TABLE IF EXISTS \"${tableName}\" CASCADE;\\n\\n`;\n    \n    // Get CREATE TABLE statement\n    const createTable = await sql`\n      SELECT \n        'CREATE TABLE ' || schemaname || '.' || tablename || ' (' ||\n        array_to_string(\n          array_agg(\n            column_name || ' ' || type || \n            case when notnull then ' NOT NULL' else '' end\n          ), ', '\n        ) || ');' as ddl\n      FROM (\n        SELECT \n          schemaname, tablename, \n          attname as column_name,\n          format_type(atttypid, atttypmod) as type,\n          attnotnull as notnull\n        FROM pg_attribute \n        JOIN pg_class ON pg_attribute.attrelid = pg_class.oid\n        JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid\n        WHERE pg_class.relname = ${tableName}\n        AND pg_namespace.nspname = 'public'\n        AND attnum > 0\n        ORDER BY attnum\n      ) as cols\n      GROUP BY schemaname, tablename\n    `;\n    \n    if (createTable.length > 0) {\n      sqlContent += `${createTable[0].ddl}\\n\\n`;\n    }\n    \n    // Get data\n    const data = await sql(`SELECT * FROM \"${tableName}\"`);\n    \n    if (data.length > 0) {\n      const columnNames = Object.keys(data[0]);\n      \n      for (const row of data) {\n        const values = columnNames.map(col => {\n          const value = row[col];\n          if (value === null) return 'NULL';\n          if (typeof value === 'string') {\n            return `'${value.replace(/'/g, \"''\")}'`;\n          }\n          if (Array.isArray(value)) {\n            return `ARRAY[${value.map(v => `'${String(v).replace(/'/g, \"''\")}'`).join(',')}]`;\n          }\n          return String(value);\n        });\n        \n        sqlContent += `INSERT INTO \"${tableName}\" (${columnNames.map(c => `\"${c}\"`).join(', ')}) VALUES (${values.join(', ')});\\n`;\n      }\n      sqlContent += '\\n';\n    }\n  }\n  \n  sqlContent += `-- Re-enable foreign key checks\\n`;\n  sqlContent += `SET session_replication_role = DEFAULT;\\n`;\n  \n  const filename = `${options.outputDir}/findermeister_${options.timestamp}.sql`;\n  await fs.writeFile(filename, sqlContent, 'utf8');\n  console.log(`SQL export completed: ${filename}`);\n}\n\n// Export data in CSV format\nasync function exportCSV(options: ExportOptions): Promise<void> {\n  const tables = await getAllTables();\n  const csvDir = `${options.outputDir}/csv_${options.timestamp}`;\n  \n  // Create CSV directory\n  await fs.mkdir(csvDir, { recursive: true });\n  \n  for (const tableName of tables) {\n    console.log(`Exporting CSV for table: ${tableName}`);\n    \n    const data = await sql(`SELECT * FROM \"${tableName}\"`);\n    \n    if (data.length === 0) {\n      console.log(`  Table ${tableName} is empty, skipping...`);\n      continue;\n    }\n    \n    const columnNames = Object.keys(data[0]);\n    let csvContent = columnNames.join(',') + '\\n';\n    \n    for (const row of data) {\n      const values = columnNames.map(col => {\n        const value = row[col];\n        if (value === null) return '';\n        if (typeof value === 'string') {\n          // Escape quotes and wrap in quotes if contains comma, quote, or newline\n          const escaped = value.replace(/\"/g, '\"\"');\n          return /[\",\\n\\r]/.test(value) ? `\"${escaped}\"` : escaped;\n        }\n        if (Array.isArray(value)) {\n          const arrayStr = JSON.stringify(value);\n          return `\"${arrayStr.replace(/\"/g, '\"\"')}\"`;\n        }\n        return String(value);\n      });\n      \n      csvContent += values.join(',') + '\\n';\n    }\n    \n    const filename = `${csvDir}/${tableName}.csv`;\n    await fs.writeFile(filename, csvContent, 'utf8');\n  }\n  \n  console.log(`CSV export completed in directory: ${csvDir}`);\n}\n\n// Export data in JSON format\nasync function exportJSON(options: ExportOptions): Promise<void> {\n  const tables = await getAllTables();\n  const jsonData: Record<string, any[]> = {};\n  \n  for (const tableName of tables) {\n    console.log(`Exporting JSON for table: ${tableName}`);\n    \n    const data = await sql(`SELECT * FROM \"${tableName}\"`);\n    jsonData[tableName] = data;\n  }\n  \n  const exportInfo = {\n    exportedAt: new Date().toISOString(),\n    database: 'FinderMeister Service Marketplace',\n    totalTables: tables.length,\n    totalRecords: Object.values(jsonData).reduce((sum, records) => sum + records.length, 0),\n    tables: Object.keys(jsonData).reduce((acc, table) => {\n      acc[table] = jsonData[table].length;\n      return acc;\n    }, {} as Record<string, number>)\n  };\n  \n  const fullExport = {\n    metadata: exportInfo,\n    data: jsonData\n  };\n  \n  const filename = `${options.outputDir}/findermeister_${options.timestamp}.json`;\n  await fs.writeFile(filename, JSON.stringify(fullExport, null, 2), 'utf8');\n  console.log(`JSON export completed: ${filename}`);\n  \n  // Also create a pretty-printed version with metadata\n  const readableFilename = `${options.outputDir}/findermeister_${options.timestamp}_readable.json`;\n  const readableContent = {\n    ...exportInfo,\n    note: \"This is a summary. Full data is in the main JSON file.\",\n    sampleData: Object.keys(jsonData).reduce((acc, table) => {\n      acc[table] = jsonData[table].slice(0, 2); // First 2 records as sample\n      return acc;\n    }, {} as Record<string, any[]>)\n  };\n  \n  await fs.writeFile(readableFilename, JSON.stringify(readableContent, null, 2), 'utf8');\n  console.log(`Readable JSON summary: ${readableFilename}`);\n}\n\n// Main export function\nasync function exportDatabase(format: 'sql' | 'csv' | 'json' | 'all' = 'all'): Promise<void> {\n  const timestamp = formatDate(new Date(), 'yyyy-MM-dd_HH-mm-ss');\n  const outputDir = 'exports';\n  \n  // Create exports directory\n  await fs.mkdir(outputDir, { recursive: true });\n  \n  const options: ExportOptions = {\n    format: 'sql', // Will be overridden\n    outputDir,\n    timestamp\n  };\n  \n  console.log(`Starting database export...`);\n  console.log(`Timestamp: ${timestamp}`);\n  console.log(`Output directory: ${outputDir}`);\n  \n  try {\n    if (format === 'all' || format === 'sql') {\n      await exportSQL({ ...options, format: 'sql' });\n    }\n    \n    if (format === 'all' || format === 'csv') {\n      await exportCSV({ ...options, format: 'csv' });\n    }\n    \n    if (format === 'all' || format === 'json') {\n      await exportJSON({ ...options, format: 'json' });\n    }\n    \n    console.log('\\n‚úÖ Database export completed successfully!');\n    console.log(`üìÅ All files saved in: ${outputDir}/`);\n    \n  } catch (error) {\n    console.error('‚ùå Export failed:', error);\n    process.exit(1);\n  }\n}\n\n// CLI interface\nconst format = process.argv[2] as 'sql' | 'csv' | 'json' | 'all' || 'all';\n\nif (!['sql', 'csv', 'json', 'all'].includes(format)) {\n  console.log('Usage: npm run export:db [sql|csv|json|all]');\n  console.log('  sql  - Export as SQL dump');\n  console.log('  csv  - Export as CSV files (one per table)');\n  console.log('  json - Export as JSON file');\n  console.log('  all  - Export in all formats (default)');\n  process.exit(1);\n}\n\nexportDatabase(format);","size_bytes":8704},"scripts/export-db.sh":{"content":"#!/bin/bash\n\n# FinderMeister Database Export Script\n# Exports database in SQL, CSV, and JSON formats\n\nset -e\n\n# Configuration\nTIMESTAMP=$(date +\"%Y-%m-%d_%H-%M-%S\")\nEXPORT_DIR=\"exports\"\nDB_NAME=\"findermeister\"\n\necho \"üöÄ Starting FinderMeister Database Export...\"\necho \"üìÖ Timestamp: $TIMESTAMP\"\n\n# Create export directory\nmkdir -p \"$EXPORT_DIR\"\n\n# Function to export SQL\nexport_sql() {\n    echo \"üìÑ Exporting SQL dump...\"\n    \n    # Create comprehensive SQL dump\n    cat > \"$EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\" << 'EOF'\n-- FinderMeister Database Export\n-- Generated on: $(date)\n-- Database: FinderMeister Service Marketplace Platform\n\nSET session_replication_role = replica;\n\nEOF\n    \n    # Export each table's structure and data\n    TABLES=(\n        \"users\"\n        \"finders\" \n        \"tokens\"\n        \"requests\"\n        \"proposals\"\n        \"contracts\"\n        \"conversations\"\n        \"messages\"\n        \"order_submissions\"\n        \"reviews\"\n        \"transactions\"\n        \"withdrawal_requests\"\n        \"withdrawal_settings\"\n        \"categories\"\n        \"blog_posts\"\n        \"admin_settings\"\n    )\n    \n    for table in \"${TABLES[@]}\"; do\n        echo \"  Exporting table: $table\"\n        echo \"-- Table: $table\" >> \"$EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\n        echo \"DROP TABLE IF EXISTS \\\"$table\\\" CASCADE;\" >> \"$EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\n        echo \"\" >> \"$EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\n    done\n    \n    echo \"SET session_replication_role = DEFAULT;\" >> \"$EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\n    echo \"‚úÖ SQL export completed: $EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\n}\n\n# Function to create a Node.js script for data export\ncreate_export_script() {\n    cat > \"$EXPORT_DIR/export_data.mjs\" << 'EOF'\nimport { neon } from '@neondatabase/serverless';\nimport fs from 'fs/promises';\n\nconst DATABASE_URL = process.env.DATABASE_URL;\nif (!DATABASE_URL) {\n    console.error('DATABASE_URL not found');\n    process.exit(1);\n}\n\nconst sql = neon(DATABASE_URL);\n\nasync function exportData() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0] + '_' + new Date().toTimeString().split(' ')[0].replace(/:/g, '-');\n    \n    // Get all tables\n    const tables = await sql`\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' \n        ORDER BY table_name\n    `;\n    \n    console.log(`Found ${tables.length} tables to export`);\n    \n    // Export JSON\n    const jsonData = {};\n    \n    for (const table of tables) {\n        const tableName = table.table_name;\n        console.log(`Exporting ${tableName}...`);\n        \n        try {\n            const data = await sql(`SELECT * FROM \"${tableName}\"`);\n            jsonData[tableName] = data;\n            \n            // Export CSV for this table\n            if (data.length > 0) {\n                const columns = Object.keys(data[0]);\n                let csvContent = columns.join(',') + '\\n';\n                \n                for (const row of data) {\n                    const values = columns.map(col => {\n                        const value = row[col];\n                        if (value === null) return '';\n                        if (typeof value === 'string') {\n                            const escaped = value.replace(/\"/g, '\"\"');\n                            return /[\",\\n\\r]/.test(value) ? `\"${escaped}\"` : escaped;\n                        }\n                        if (Array.isArray(value)) {\n                            return `\"${JSON.stringify(value).replace(/\"/g, '\"\"')}\"`;\n                        }\n                        return String(value);\n                    });\n                    csvContent += values.join(',') + '\\n';\n                }\n                \n                await fs.writeFile(`exports/csv_${timestamp}/${tableName}.csv`, csvContent);\n            }\n        } catch (error) {\n            console.error(`Error exporting ${tableName}:`, error);\n        }\n    }\n    \n    // Create CSV directory\n    await fs.mkdir(`exports/csv_${timestamp}`, { recursive: true });\n    \n    // Save JSON\n    const fullExport = {\n        metadata: {\n            exportedAt: new Date().toISOString(),\n            database: 'FinderMeister Service Marketplace',\n            totalTables: tables.length,\n            totalRecords: Object.values(jsonData).reduce((sum, records) => sum + records.length, 0)\n        },\n        data: jsonData\n    };\n    \n    await fs.writeFile(`exports/findermeister_${timestamp}.json`, JSON.stringify(fullExport, null, 2));\n    \n    console.log('‚úÖ Export completed!');\n    console.log(`üìÅ Files saved in: exports/`);\n    console.log(`üìÑ JSON: findermeister_${timestamp}.json`);\n    console.log(`üìä CSV: csv_${timestamp}/ directory`);\n}\n\nexportData().catch(console.error);\nEOF\n}\n\n# Main execution\necho \"üìÅ Creating export directory: $EXPORT_DIR\"\n\n# Export SQL structure\nexport_sql\n\n# Create and run Node.js export script\necho \"üìä Creating data export script...\"\ncreate_export_script\n\necho \"üîÑ Running data export...\"\ncd \"$(dirname \"$0\")/..\"\nnode \"$EXPORT_DIR/export_data.mjs\"\n\necho \"\"\necho \"üéâ Database export completed successfully!\"\necho \"üìÇ All exports saved in: $EXPORT_DIR/\"\necho \"\"\necho \"Files created:\"\necho \"  üìÑ SQL: $EXPORT_DIR/${DB_NAME}_${TIMESTAMP}.sql\"\necho \"  üìä JSON: $EXPORT_DIR/findermeister_*.json\"\necho \"  üìà CSV: $EXPORT_DIR/csv_*/ (directory with individual table files)\"\necho \"\"","size_bytes":5426},"scripts/reset-sarahfinder-password.js":{"content":"\n#!/usr/bin/env node\n\nconst bcrypt = require('bcrypt');\nconst { drizzle } = require('drizzle-orm/neon-http');\nconst { neon } = require('@neondatabase/serverless');\nconst { users } = require('../shared/schema');\nconst { eq } = require('drizzle-orm');\n\n// Database connection\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nasync function resetSarahfinderPassword() {\n  try {\n    // Generate a new password\n    const newPassword = 'Sarah' + Math.random().toString(36).slice(-8) + '!';\n    console.log('Generated new password for Sarahfinder:', newPassword);\n    \n    // Hash the password\n    const hashedPassword = await bcrypt.hash(newPassword, 12);\n    \n    // Find and update Sarahfinder's password\n    const result = await db\n      .update(users)\n      .set({ password: hashedPassword })\n      .where(eq(users.firstName, 'Sarah'))\n      .returning({ id: users.id, email: users.email, firstName: users.firstName, lastName: users.lastName });\n    \n    if (result.length > 0) {\n      const user = result[0];\n      console.log('\\n‚úÖ Password reset successful!');\n      console.log('User Details:');\n      console.log('- Name:', user.firstName, user.lastName);\n      console.log('- Email:', user.email);\n      console.log('- New Password:', newPassword);\n      console.log('\\nPlease share these credentials securely with the user.');\n    } else {\n      console.log('‚ùå No user found with name \"Sarah\"');\n      \n      // Let's search for users with \"sarah\" in their name or email (case insensitive)\n      const searchResults = await db\n        .select({ id: users.id, email: users.email, firstName: users.firstName, lastName: users.lastName })\n        .from(users)\n        .where(\n          eq(users.firstName.toLowerCase(), 'sarah')\n        );\n        \n      if (searchResults.length > 0) {\n        console.log('\\nFound similar users:');\n        searchResults.forEach(user => {\n          console.log(`- ${user.firstName} ${user.lastName} (${user.email})`);\n        });\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error resetting password:', error);\n  }\n}\n\nresetSarahfinderPassword();\n","size_bytes":2119},"server/autoReleaseService.ts":{"content":"\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { orderSubmissions, contracts } from \"@shared/schema\";\nimport { eq, and, sql } from \"drizzle-orm\";\n\nexport class AutoReleaseService {\n  private static instance: AutoReleaseService;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  private constructor() {}\n\n  static getInstance(): AutoReleaseService {\n    if (!AutoReleaseService.instance) {\n      AutoReleaseService.instance = new AutoReleaseService();\n    }\n    return AutoReleaseService.instance;\n  }\n\n  // Start the auto-release service (runs every hour)\n  start() {\n    if (this.intervalId) {\n      console.log('Auto-release service is already running');\n      return;\n    }\n\n    console.log('Starting auto-release service...');\n    \n    // Run immediately on start\n    this.processAutoReleases();\n    \n    // Then run every hour\n    this.intervalId = setInterval(() => {\n      this.processAutoReleases();\n    }, 60 * 60 * 1000); // 1 hour\n  }\n\n  // Stop the auto-release service\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      console.log('Auto-release service stopped');\n    }\n  }\n\n  // Process all pending auto-releases\n  async processAutoReleases() {\n    try {\n      console.log('Processing auto-releases...');\n      \n      // 1. Find expired order submissions that should be auto-accepted\n      const expiredSubmissions = await db\n        .select({\n          id: orderSubmissions.id,\n          contractId: orderSubmissions.contractId,\n          autoReleaseDate: orderSubmissions.autoReleaseDate\n        })\n        .from(orderSubmissions)\n        .innerJoin(contracts, eq(orderSubmissions.contractId, contracts.id))\n        .where(and(\n          eq(orderSubmissions.status, 'submitted'),\n          sql`${orderSubmissions.autoReleaseDate} <= NOW()`,\n          eq(contracts.escrowStatus, 'held')\n        ));\n\n      let releasedCount = 0;\n\n      for (const submission of expiredSubmissions) {\n        try {\n          console.log(`Auto-accepting expired submission ${submission.id} for contract ${submission.contractId}`);\n          \n          // Auto-accept the submission - this will trigger fund release\n          await storage.updateOrderSubmission(submission.id, { \n            status: 'accepted',\n            clientFeedback: 'Auto-accepted due to expired review period (client did not respond within the deadline)'\n          });\n          \n          releasedCount++;\n          \n          console.log(`Successfully auto-released contract ${submission.contractId}`);\n        } catch (error) {\n          console.error(`Failed to auto-release submission ${submission.id}:`, error);\n        }\n      }\n\n      // 2. Also check for any contracts that should be released due to completion date\n      const expiredContracts = await db\n        .select({\n          id: contracts.id,\n          finderId: contracts.finderId,\n          amount: contracts.amount,\n          completedAt: contracts.completedAt\n        })\n        .from(contracts)\n        .where(and(\n          eq(contracts.isCompleted, true),\n          eq(contracts.escrowStatus, 'held'),\n          sql`${contracts.completedAt} IS NOT NULL`,\n          sql`${contracts.completedAt} <= NOW() - INTERVAL '3 days'` // Auto-release after 3 days if no action\n        ));\n\n      for (const contract of expiredContracts) {\n        try {\n          console.log(`Auto-releasing expired contract ${contract.id}`);\n          \n          // Update contract status to released\n          await storage.updateContract(contract.id, { escrowStatus: 'released' });\n          \n          // Release funds to finder's available balance\n          await storage.releaseFundsToFinder(contract.finderId, contract.amount.toString());\n          \n          releasedCount++;\n          \n          console.log(`Successfully auto-released expired contract ${contract.id}`);\n        } catch (error) {\n          console.error(`Failed to auto-release contract ${contract.id}:`, error);\n        }\n      }\n\n      if (releasedCount > 0) {\n        console.log(`Auto-release process completed: ${releasedCount} contracts released`);\n      } else {\n        console.log('Auto-release process completed: No contracts needed releasing');\n      }\n\n      return { released: releasedCount };\n    } catch (error) {\n      console.error('Error in auto-release process:', error);\n      return { released: 0, error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  }\n\n  // Manual trigger for admin use\n  async manualRelease(contractId?: string) {\n    try {\n      if (contractId) {\n        // Release specific contract\n        const contract = await storage.getContract(contractId);\n        if (!contract) {\n          throw new Error('Contract not found');\n        }\n\n        if (contract.escrowStatus !== 'held') {\n          throw new Error('Contract is not in held status');\n        }\n\n        await storage.updateContract(contractId, { escrowStatus: 'released' });\n        await storage.releaseFundsToFinder(contract.finderId, contract.amount.toString());\n\n        console.log(`Manually released contract ${contractId}`);\n        return { success: true, message: 'Contract released successfully' };\n      } else {\n        // Run full auto-release process\n        const result = await this.processAutoReleases();\n        return result;\n      }\n    } catch (error) {\n      console.error('Manual release error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const autoReleaseService = AutoReleaseService.getInstance();\n","size_bytes":5534},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure WebSocket for Neon with proper SSL handling for Replit\nneonConfig.webSocketConstructor = ws;\n// Disable WebSocket pooling for better compatibility in Replit environment\nneonConfig.poolQueryViaFetch = true;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":663},"server/emailQueue.ts":{"content":"\ninterface QueuedEmail {\n  id: string;\n  template: EmailTemplate;\n  attempts: number;\n  maxAttempts: number;\n  createdAt: Date;\n  lastAttempt?: Date;\n  error?: string;\n}\n\nclass EmailQueue {\n  private queue: QueuedEmail[] = [];\n  private processing = false;\n  private maxRetries = 3;\n  private retryDelay = 5000; // 5 seconds\n\n  constructor(private emailService: any) {\n    // Process queue every 30 seconds\n    setInterval(() => this.processQueue(), 30000);\n  }\n\n  async addToQueue(template: EmailTemplate, priority: 'high' | 'normal' = 'normal'): Promise<string> {\n    const emailId = `email_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const queuedEmail: QueuedEmail = {\n      id: emailId,\n      template,\n      attempts: 0,\n      maxAttempts: this.maxRetries,\n      createdAt: new Date()\n    };\n\n    if (priority === 'high') {\n      this.queue.unshift(queuedEmail);\n    } else {\n      this.queue.push(queuedEmail);\n    }\n\n    console.log(`Email queued with ID: ${emailId}`);\n    \n    // Try to process immediately if not already processing\n    if (!this.processing) {\n      setTimeout(() => this.processQueue(), 1000);\n    }\n\n    return emailId;\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.processing || this.queue.length === 0) {\n      return;\n    }\n\n    this.processing = true;\n    console.log(`Processing email queue: ${this.queue.length} emails pending`);\n\n    while (this.queue.length > 0) {\n      const email = this.queue[0];\n      \n      try {\n        email.attempts++;\n        email.lastAttempt = new Date();\n        \n        const success = await this.emailService.sendEmail(email.template);\n        \n        if (success) {\n          console.log(`Email ${email.id} sent successfully`);\n          this.queue.shift(); // Remove from queue\n        } else {\n          throw new Error('Email sending returned false');\n        }\n        \n      } catch (error: any) {\n        console.error(`Failed to send email ${email.id} (attempt ${email.attempts}):`, error.message);\n        email.error = error.message;\n        \n        if (email.attempts >= email.maxAttempts) {\n          console.error(`Email ${email.id} failed permanently after ${email.attempts} attempts`);\n          this.queue.shift(); // Remove from queue\n          await this.handleFailedEmail(email);\n        } else {\n          console.log(`Email ${email.id} will be retried (${email.attempts}/${email.maxAttempts})`);\n          // Move to end of queue for retry\n          this.queue.push(this.queue.shift()!);\n          break; // Wait for next processing cycle\n        }\n      }\n      \n      // Small delay between emails to avoid overwhelming\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n\n    this.processing = false;\n  }\n\n  private async handleFailedEmail(email: QueuedEmail): Promise<void> {\n    try {\n      const fs = require('fs').promises;\n      const path = require('path');\n      \n      const failedDir = path.join(process.cwd(), 'logs', 'failed-emails');\n      await fs.mkdir(failedDir, { recursive: true });\n      \n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const filename = `failed_${timestamp}_${email.id}.json`;\n      const filepath = path.join(failedDir, filename);\n      \n      await fs.writeFile(filepath, JSON.stringify({\n        ...email,\n        failedAt: new Date().toISOString()\n      }, null, 2));\n      \n      console.log(`Failed email logged to: ${filepath}`);\n    } catch (logError) {\n      console.error('Failed to log failed email:', logError);\n    }\n  }\n\n  getQueueStatus(): { pending: number, processing: boolean } {\n    return {\n      pending: this.queue.length,\n      processing: this.processing\n    };\n  }\n}\n\nimport { EmailService, EmailTemplate } from './emailService';\n\nexport const emailQueue = new EmailQueue(EmailService.getInstance());\nexport { EmailQueue };\n","size_bytes":3870},"server/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport { createTransport } from 'nodemailer';\n\n// Self-contained email configuration using various fallback methods\nconst createEmailTransporter = () => {\n  // Try different transport methods in order of preference\n  const transports = [\n    // Method 1: Direct SMTP (if configured)\n    () => {\n      if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {\n        return createTransport({\n          host: process.env.SMTP_HOST,\n          port: parseInt(process.env.SMTP_PORT || '587'),\n          secure: false,\n          auth: {\n            user: process.env.SMTP_USER,\n            pass: process.env.SMTP_PASS,\n          },\n        });\n      }\n      return null;\n    },\n\n    // Method 2: Gmail OAuth2 (self-contained)\n    () => {\n      if (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {\n        return createTransport({\n          service: 'gmail',\n          auth: {\n            user: process.env.GMAIL_USER,\n            pass: process.env.GMAIL_APP_PASSWORD,\n          },\n        });\n      }\n      return null;\n    },\n\n    // Method 3: Local mail system simulation (for development)\n    () => {\n      return createTransport({\n        streamTransport: true,\n        newline: 'unix',\n        buffer: true,\n      });\n    },\n\n    // Method 4: File-based email logging (ultimate fallback)\n    () => {\n      return createTransport({\n        jsonTransport: true,\n      });\n    }\n  ];\n\n  for (const createTransporter of transports) {\n    try {\n      const transporter = createTransporter();\n      if (transporter) {\n        return transporter;\n      }\n    } catch (error) {\n      console.warn('Failed to create transporter:', error);\n      continue;\n    }\n  }\n\n  // Final fallback - create a test transporter\n  return createTransport({\n    streamTransport: true,\n    newline: 'unix',\n    buffer: true,\n  });\n};\n\nconst transporter = createEmailTransporter();\n\nexport interface EmailTemplate {\n  to: string;\n  subject: string;\n  html: string;\n  text?: string;\n}\n\nexport class EmailService {\n  private static instance: EmailService;\n\n  public static getInstance(): EmailService {\n    if (!EmailService.instance) {\n      EmailService.instance = new EmailService();\n    }\n    return EmailService.instance;\n  }\n\n  async sendEmail(template: EmailTemplate): Promise<boolean> {\n    try {\n      // Use SMTP (Brevo)\n      console.log('Using SMTP email service');\n      console.log('SMTP Configuration:', {\n        host: process.env.SMTP_HOST || 'smtp.gmail.com',\n        port: process.env.SMTP_PORT || '587',\n        user: process.env.SMTP_USER ? 'configured' : 'missing',\n        pass: process.env.SMTP_PASS ? 'configured' : 'missing',\n        from: process.env.FROM_EMAIL || '95bd74001@smtp-brevo.com'\n      });\n\n      // Test connection first\n      await transporter.verify();\n      console.log('SMTP connection verified successfully');\n\n      const mailOptions = {\n        from: process.env.FROM_EMAIL || '95bd74001@smtp-brevo.com',\n        to: template.to,\n        subject: template.subject,\n        html: template.html,\n        text: template.text || this.extractTextFromHtml(template.html),\n      };\n\n      console.log(`Attempting to send email to: ${template.to}`);\n      const result = await transporter.sendMail(mailOptions);\n      console.log(`Email sent successfully to ${template.to}. Message ID: ${result.messageId}`);\n      return true;\n    } catch (error: any) {\n      console.error('Failed to send email:', {\n        error: error.message,\n        code: error.code,\n        command: error.command,\n        to: template.to,\n        subject: template.subject\n      });\n      return false;\n    }\n  }\n\n  private extractTextFromHtml(html: string): string {\n    return html.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n  }\n\n  // Finder notification templates\n  async notifyFinderNewMessage(finderEmail: string, clientName: string, requestTitle: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: finderEmail,\n      subject: `New Message from ${clientName} - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #dc2626;\">New Message Received</h2>\n          <p>Hi there,</p>\n          <p>You have received a new message from <strong>${clientName}</strong> regarding your proposal for:</p>\n          <div style=\"background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin: 0; color: #374151;\">${requestTitle}</h3>\n          </div>\n          <p>Log in to your FinderMeister dashboard to view and respond to the message.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/finder/messages\" \n             style=\"background-color: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            View Messages\n          </a>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  async notifyFinderHired(finderEmail: string, clientName: string, requestTitle: string, amount: string): Promise<boolean> {\n    const subject = `üéâ You've been hired for \"${requestTitle}\"!`;\n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #059669;\">Congratulations! You've been hired!</h2>\n        <p>Great news! <strong>${clientName}</strong> has accepted your proposal and hired you for the project:</p>\n        <div style=\"background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n          <h3 style=\"margin: 0; color: #0369a1;\">${requestTitle}</h3>\n        </div>\n        <p><strong>Contract Amount:</strong> ‚Ç¶${amount}</p>\n        <p>The client will now fund the escrow, and once payment is complete, you can begin working on the project.</p>\n        <div style=\"background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n          <p style=\"margin: 0;\"><strong>Next Steps:</strong></p>\n          <ul style=\"margin: 10px 0;\">\n            <li>Wait for escrow funding confirmation</li>\n            <li>You'll receive another notification when work can begin</li>\n            <li>Start communicating with the client about project details</li>\n          </ul>\n        </div>\n        <p>Log in to your FinderMeister dashboard to view the contract details and start messaging the client.</p>\n        <p>Best of luck with your project!</p>\n        <p>Best regards,<br>The FinderMeister Team</p>\n      </div>\n    `;\n\n    return this.sendEmail(template);\n  }\n\n  async notifyFinderWorkCanBegin(finderEmail: string, clientName: string, requestTitle: string, amount: string): Promise<boolean> {\n    const subject = `üöÄ Escrow funded! You can now start work on \"${requestTitle}\"`;\n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #059669;\">Escrow Funded - Work Can Begin!</h2>\n        <p>Excellent news! <strong>${clientName}</strong> has funded the escrow for your project:</p>\n        <div style=\"background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n          <h3 style=\"margin: 0; color: #0369a1;\">${requestTitle}</h3>\n        </div>\n        <p><strong>Contract Amount:</strong> ‚Ç¶${amount}</p>\n        <div style=\"background-color: #d1fae5; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n          <p style=\"margin: 0; color: #065f46;\"><strong>‚úÖ Payment Secured:</strong> The full contract amount is now held in escrow and will be released to you upon successful completion of the work.</p>\n        </div>\n        <div style=\"background-color: #fef3c7; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n          <p style=\"margin: 0;\"><strong>Ready to Start:</strong></p>\n          <ul style=\"margin: 10px 0;\">\n            <li>Begin working on the project immediately</li>\n            <li>Communicate regularly with the client</li>\n            <li>Submit your completed work through the platform</li>\n            <li>Payment will be released once client approves your work</li>\n          </ul>\n        </div>\n        <p>Log in to your FinderMeister dashboard to view the contract details and start messaging the client.</p>\n        <p>Good luck with your project!</p>\n        <p>Best regards,<br>The FinderMeister Team</p>\n      </div>\n    `;\n\n    return this.sendEmail(template);\n  }\n\n\n  async notifyFinderSubmissionApproved(finderEmail: string, clientName: string, requestTitle: string, amount: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: finderEmail,\n      subject: `Work Approved - Payment Released - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #16a34a;\">Work Approved - Payment Released!</h2>\n          <p>Hi there,</p>\n          <p>Excellent news! <strong>${clientName}</strong> has approved your work submission for:</p>\n          <div style=\"background-color: #f0fdf4; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #16a34a;\">\n            <h3 style=\"margin: 0 0 10px 0; color: #15803d;\">${requestTitle}</h3>\n            <p style=\"margin: 0; color: #374151;\">Payment Released: <strong>‚Ç¶${amount}</strong></p>\n          </div>\n          <p>The payment has been released from escrow and added to your available balance. You can now request a withdrawal.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/finder/withdrawals\" \n             style=\"background-color: #16a34a; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            Request Withdrawal\n          </a>\n          <p>Thank you for your excellent work!</p>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  async notifyFinderSubmissionRejected(finderEmail: string, clientName: string, requestTitle: string, feedback: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: finderEmail,\n      subject: `Work Revision Requested - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #dc2626;\">Work Revision Requested</h2>\n          <p>Hi there,</p>\n          <p><strong>${clientName}</strong> has requested revisions for your work submission on:</p>\n          <div style=\"background-color: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n            <h3 style=\"margin: 0 0 10px 0; color: #dc2626;\">${requestTitle}</h3>\n            <h4 style=\"margin: 10px 0 5px 0; color: #374151;\">Client Feedback:</h4>\n            <p style=\"margin: 0; color: #6b7280; font-style: italic;\">\"${feedback}\"</p>\n          </div>\n          <p>Please review the feedback and resubmit your work with the requested changes.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/finder/contracts\" \n             style=\"background-color: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            View Contract & Resubmit\n          </a>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  // Client notification templates\n  async notifyClientNewProposal(clientEmail: string, finderName: string, requestTitle: string, proposalPrice: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: clientEmail,\n      subject: `New Proposal Received - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">New Proposal Received</h2>\n          <p>Hi there,</p>\n          <p>You have received a new proposal from <strong>${finderName}</strong> for your request:</p>\n          <div style=\"background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n            <h3 style=\"margin: 0 0 10px 0; color: #1e40af;\">${requestTitle}</h3>\n            <p style=\"margin: 0; color: #374151;\">Proposed Price: <strong>‚Ç¶${proposalPrice}</strong></p>\n          </div>\n          <p>Review the proposal details and respond to the finder if you're interested.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/client/requests\" \n             style=\"background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            View Proposal\n          </a>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  async notifyClientOrderSubmission(clientEmail: string, finderName: string, requestTitle: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: clientEmail,\n      subject: `Work Submitted for Review - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #7c3aed;\">Work Submitted for Review</h2>\n          <p>Hi there,</p>\n          <p><strong>${finderName}</strong> has submitted their completed work for your request:</p>\n          <div style=\"background-color: #f5f3ff; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #7c3aed;\">\n            <h3 style=\"margin: 0 0 10px 0; color: #6d28d9;\">${requestTitle}</h3>\n            <p style=\"margin: 0; color: #374151;\">Status: <strong>Awaiting Your Review</strong></p>\n          </div>\n          <p>Please review the submitted work and either approve it or request revisions.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/client/contracts\" \n             style=\"background-color: #7c3aed; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            Review Work\n          </a>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  async notifyClientNewMessage(clientEmail: string, finderName: string, requestTitle: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: clientEmail,\n      subject: `New Message from ${finderName} - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #dc2626;\">New Message Received</h2>\n          <p>Hi there,</p>\n          <p>You have received a new message from <strong>${finderName}</strong> regarding:</p>\n          <div style=\"background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin: 0; color: #374151;\">${requestTitle}</h3>\n          </div>\n          <p>Log in to your FinderMeister dashboard to view and respond to the message.</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/client/messages\" \n             style=\"background-color: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0;\">\n            View Messages\n          </a>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n\n  // Password reset email template\n  async sendPasswordResetEmail(userEmail: string, userName: string, resetLink: string): Promise<boolean> {\n    const template: EmailTemplate = {\n      to: userEmail,\n      subject: `Reset Your Password - FinderMeister`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #dc2626;\">Password Reset Request</h2>\n          <p>Hi ${userName},</p>\n          <p>We received a request to reset the password for your FinderMeister account.</p>\n          <p>If you made this request, click the button below to reset your password:</p>\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${resetLink}\" \n               style=\"background-color: #dc2626; color: white; padding: 15px 30px; text-decoration: none; border-radius: 6px; display: inline-block; font-weight: bold;\">\n              Reset My Password\n            </a>\n          </div>\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            This link will expire in 1 hour for security reasons.\n          </p>\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            If you didn't request this password reset, please ignore this email. Your password will remain unchanged.\n          </p>\n          <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n          <p style=\"color: #6b7280; font-size: 12px;\">\n            If you're having trouble clicking the button, copy and paste the following link into your browser:<br>\n            <span style=\"word-break: break-all;\">${resetLink}</span>\n          </p>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `,\n    };\n    return this.sendEmail(template);\n  }\n}\n\nexport const emailService = EmailService.getInstance();","size_bytes":17449},"server/emailTemplates.ts":{"content":"\ninterface EmailTemplateData {\n  [key: string]: any;\n}\n\nexport class EmailTemplateEngine {\n  private static templates: Record<string, { subject: string; html: string; text?: string }> = {\n    welcome: {\n      subject: 'Welcome to FinderMeister!',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h1 style=\"color: #dc2626;\">Welcome to FinderMeister!</h1>\n          <p>Hi {{firstName}},</p>\n          <p>Welcome to FinderMeister, Nigeria's premier service marketplace!</p>\n          <p>Your account has been created successfully. You can now:</p>\n          <ul>\n            <li>{{roleSpecificMessage}}</li>\n            <li>Connect with trusted professionals</li>\n            <li>Manage your projects securely</li>\n          </ul>\n          <p>Get started by visiting your dashboard.</p>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `\n    },\n    \n    proposalNotification: {\n      subject: 'New Proposal Received - {{requestTitle}}',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">New Proposal Received</h2>\n          <p>Hi {{clientName}},</p>\n          <p>You have received a new proposal from <strong>{{finderName}}</strong> for your request:</p>\n          <div style=\"background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin: 0; color: #1e40af;\">{{requestTitle}}</h3>\n            <p style=\"margin: 10px 0 0 0;\">Proposed Price: <strong>‚Ç¶{{proposalPrice}}</strong></p>\n          </div>\n          <p>Review the proposal and respond to the finder if you're interested.</p>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `\n    },\n\n    paymentConfirmation: {\n      subject: 'Payment Confirmed - {{contractTitle}}',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #059669;\">Payment Confirmed!</h2>\n          <p>Hi {{userName}},</p>\n          <p>Your payment has been confirmed for the project:</p>\n          <div style=\"background-color: #d1fae5; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin: 0; color: #065f46;\">{{contractTitle}}</h3>\n            <p style=\"margin: 10px 0 0 0;\">Amount: <strong>‚Ç¶{{amount}}</strong></p>\n          </div>\n          <p>Work can now begin on your project.</p>\n          <p>Best regards,<br>The FinderMeister Team</p>\n        </div>\n      `\n    }\n  };\n\n  static render(templateName: string, data: EmailTemplateData): { subject: string; html: string; text?: string } {\n    const template = this.templates[templateName];\n    if (!template) {\n      throw new Error(`Email template '${templateName}' not found`);\n    }\n\n    const rendered = {\n      subject: this.interpolate(template.subject, data),\n      html: this.interpolate(template.html, data),\n      text: template.text ? this.interpolate(template.text, data) : undefined\n    };\n\n    return rendered;\n  }\n\n  private static interpolate(template: string, data: EmailTemplateData): string {\n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n      return data[key] !== undefined ? String(data[key]) : match;\n    });\n  }\n\n  static addTemplate(name: string, template: { subject: string; html: string; text?: string }): void {\n    this.templates[name] = template;\n  }\n\n  static getAvailableTemplates(): string[] {\n    return Object.keys(this.templates);\n  }\n}\n","size_bytes":3540},"server/flutterwaveService.ts":{"content":"\nimport crypto from 'crypto';\n\nexport interface FlutterwaveTokenPackage {\n  id: string;\n  name: string;\n  tokens: number;\n  price: number; // in NGN (Nigerian Naira)\n  popular?: boolean;\n}\n\nexport const FLUTTERWAVE_TOKEN_PACKAGES: FlutterwaveTokenPackage[] = [\n  {\n    id: 'starter',\n    name: 'Starter Pack',\n    tokens: 10,\n    price: 5000, // ‚Ç¶5,000\n  },\n  {\n    id: 'professional',\n    name: 'Professional Pack',\n    tokens: 25,\n    price: 10000, // ‚Ç¶10,000\n    popular: true\n  },\n  {\n    id: 'business',\n    name: 'Business Pack',\n    tokens: 50,\n    price: 18000, // ‚Ç¶18,000\n  },\n  {\n    id: 'enterprise',\n    name: 'Enterprise Pack',\n    tokens: 100,\n    price: 30000, // ‚Ç¶30,000\n  }\n];\n\nexport function getTokensFromAmount(amount: number): number {\n  const packageMapping: { [key: number]: number } = {\n    5000: 10,   // Starter Pack\n    10000: 25,  // Professional Pack\n    18000: 50,  // Business Pack\n    30000: 100  // Enterprise Pack\n  };\n\n  return packageMapping[amount] || 0;\n}\n\nexport class FlutterwaveService {\n  private secretKey: string;\n  private publicKey: string;\n  private baseUrl = 'https://api.flutterwave.com/v3';\n\n  constructor() {\n    this.secretKey = process.env.FLUTTERWAVE_SECRET_KEY || '';\n    this.publicKey = process.env.FLUTTERWAVE_PUBLIC_KEY || '';\n    \n    if (!this.secretKey) {\n      console.warn('FLUTTERWAVE_SECRET_KEY not found in environment variables');\n    }\n  }\n\n  isConfigured(): boolean {\n    return !!this.secretKey && !!this.publicKey;\n  }\n\n  async initializeTransaction(\n    email: string, \n    amount: number, \n    reference: string, \n    metadata: any = {}, \n    callbackUrl?: string,\n    redirectUrl?: string\n  ) {\n    if (!this.isConfigured()) {\n      throw new Error('Flutterwave service is not properly configured. Please check your API keys.');\n    }\n\n    try {\n      const payload: any = {\n        tx_ref: reference,\n        amount: amount,\n        currency: 'NGN',\n        redirect_url: redirectUrl || `${process.env.BASE_URL || 'http://localhost:5000'}/finder/payment-success?payment=success&reference=${reference}`,\n        customer: {\n          email,\n          name: metadata.customerName || 'FinderMeister User',\n          phonenumber: metadata.phone || ''\n        },\n        customizations: {\n          title: 'FinderMeister Token Purchase',\n          description: `Purchase of ${metadata.tokens || 'N/A'} FinderTokens`,\n          logo: 'https://your-logo-url.com/logo.png'\n        },\n        meta: {\n          ...metadata,\n          source: 'findermeister',\n          type: metadata.type || 'token_purchase'\n        }\n      };\n\n      // Add callback URL if provided\n      if (callbackUrl) {\n        payload.callback_url = callbackUrl;\n      }\n\n      console.log('Flutterwave initialize payload:', JSON.stringify(payload, null, 2));\n\n      const response = await fetch(`${this.baseUrl}/payments`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      console.log('Flutterwave response:', JSON.stringify(data, null, 2));\n      \n      if (!response.ok || data.status !== 'success') {\n        console.error('Flutterwave initialization failed:', data);\n        throw new Error(data.message || 'Failed to initialize transaction');\n      }\n\n      return {\n        authorization_url: data.data.link,\n        reference: reference,\n        access_code: data.data.id\n      };\n    } catch (error) {\n      console.error('Flutterwave initialization error:', error);\n      throw error;\n    }\n  }\n\n  async verifyTransaction(reference: string) {\n    try {\n      const response = await fetch(`${this.baseUrl}/transactions/verify_by_reference?tx_ref=${reference}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n      console.log('Flutterwave verification response:', JSON.stringify(data, null, 2));\n      \n      if (!response.ok || data.status !== 'success') {\n        console.error('Flutterwave verification failed:', data);\n        throw new Error(data.message || 'Failed to verify transaction');\n      }\n\n      return {\n        status: data.data.status === 'successful' ? 'success' : 'failed',\n        amount: data.data.amount,\n        currency: data.data.currency,\n        tx_ref: data.data.tx_ref,\n        id: data.data.id,\n        metadata: data.data.meta || {}\n      };\n    } catch (error) {\n      console.error('Flutterwave verification error:', error);\n      throw error;\n    }\n  }\n\n  verifyWebhookSignature(payload: string, signature: string): boolean {\n    if (!signature || !this.secretKey) {\n      console.log('Missing signature or secret key for webhook verification');\n      return false;\n    }\n    \n    const hash = crypto\n      .createHmac('sha256', this.secretKey)\n      .update(payload)\n      .digest('hex');\n    \n    const isValid = hash === signature;\n    \n    if (!isValid) {\n      console.log('Flutterwave webhook signature verification failed');\n      console.log('Expected:', hash);\n      console.log('Received:', signature);\n    }\n    \n    return isValid;\n  }\n\n  generateTransactionReference(userId: string): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `FLW_${userId.substring(0, 8)}_${timestamp}_${random}`.toUpperCase();\n  }\n\n  async getAllTransactions(page: number = 1, pageSize: number = 20) {\n    try {\n      const response = await fetch(`${this.baseUrl}/transactions?page=${page}&page_size=${pageSize}`, {\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok || data.status !== 'success') {\n        throw new Error(data.message || 'Failed to fetch transactions');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Flutterwave get transactions error:', error);\n      throw error;\n    }\n  }\n\n  async refundTransaction(transactionId: string, amount?: number) {\n    try {\n      const payload: any = {\n        id: transactionId\n      };\n\n      if (amount) {\n        payload.amount = amount;\n      }\n\n      const response = await fetch(`${this.baseUrl}/transactions/${transactionId}/refund`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok || data.status !== 'success') {\n        throw new Error(data.message || 'Failed to process refund');\n      }\n\n      return data.data;\n    } catch (error) {\n      console.error('Flutterwave refund error:', error);\n      throw error;\n    }\n  }\n\n  async initiateBankTransfer(\n    accountNumber: string,\n    accountBank: string,\n    amount: number,\n    currency: string = 'NGN',\n    narration: string,\n    reference: string,\n    beneficiaryName?: string\n  ) {\n    if (!this.isConfigured()) {\n      throw new Error('Flutterwave service is not properly configured. Please check your API keys.');\n    }\n\n    try {\n      const payload: any = {\n        account_number: accountNumber,\n        account_bank: accountBank,\n        amount: amount,\n        currency: currency,\n        narration: narration,\n        reference: reference,\n        callback_url: `${process.env.BASE_URL || 'http://localhost:5000'}/api/payments/flutterwave/transfer/webhook`,\n        debit_currency: currency\n      };\n\n      if (beneficiaryName) {\n        payload.beneficiary_name = beneficiaryName;\n      }\n\n      console.log('Flutterwave bank transfer payload:', JSON.stringify(payload, null, 2));\n\n      const response = await fetch(`${this.baseUrl}/transfers`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      console.log('Flutterwave bank transfer response:', JSON.stringify(data, null, 2));\n      \n      if (!response.ok || data.status !== 'success') {\n        console.error('Flutterwave bank transfer failed:', data);\n        throw new Error(data.message || 'Failed to initiate bank transfer');\n      }\n\n      return {\n        id: data.data.id,\n        reference: reference,\n        status: data.data.status,\n        amount: data.data.amount,\n        fee: data.data.fee,\n        currency: data.data.currency,\n        created_at: data.data.created_at\n      };\n    } catch (error) {\n      console.error('Flutterwave bank transfer error:', error);\n      throw error;\n    }\n  }\n\n  async verifyTransfer(transferId: string) {\n    try {\n      const response = await fetch(`${this.baseUrl}/transfers/${transferId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n      console.log('Flutterwave transfer verification response:', JSON.stringify(data, null, 2));\n      \n      if (!response.ok || data.status !== 'success') {\n        console.error('Flutterwave transfer verification failed:', data);\n        throw new Error(data.message || 'Failed to verify transfer');\n      }\n\n      return {\n        id: data.data.id,\n        status: data.data.status,\n        amount: data.data.amount,\n        fee: data.data.fee,\n        currency: data.data.currency,\n        reference: data.data.reference,\n        created_at: data.data.created_at,\n        completed_at: data.data.completed_at\n      };\n    } catch (error) {\n      console.error('Flutterwave transfer verification error:', error);\n      throw error;\n    }\n  }\n\n  async getBankCode(bankName: string): Promise<string | null> {\n    try {\n      // Common Nigerian bank codes mapping\n      const bankCodes: { [key: string]: string } = {\n        'access bank': '044',\n        'access bank plc': '044',\n        'citibank': '023',\n        'citibank nigeria limited': '023',\n        'diamond bank': '063',\n        'ecobank nigeria': '050',\n        'fidelity bank': '070',\n        'first bank of nigeria': '011',\n        'first city monument bank': '214',\n        'guaranty trust bank': '058',\n        'gtbank': '058',\n        'heritage bank': '030',\n        'keystone bank': '082',\n        'polaris bank': '076',\n        'providus bank': '101',\n        'stanbic ibtc bank': '221',\n        'standard chartered bank': '068',\n        'sterling bank': '232',\n        'union bank of nigeria': '032',\n        'united bank for africa': '033',\n        'uba': '033',\n        'unity bank': '215',\n        'wema bank': '035',\n        'zenith bank': '057'\n      };\n\n      const normalizedBankName = bankName.toLowerCase().trim();\n      \n      // Try exact match first\n      if (bankCodes[normalizedBankName]) {\n        return bankCodes[normalizedBankName];\n      }\n\n      // Try partial match\n      for (const [name, code] of Object.entries(bankCodes)) {\n        if (name.includes(normalizedBankName) || normalizedBankName.includes(name)) {\n          return code;\n        }\n      }\n\n      console.warn(`Bank code not found for: ${bankName}`);\n      return null;\n    } catch (error) {\n      console.error('Error getting bank code:', error);\n      return null;\n    }\n  }\n\n  generateTransferReference(userId: string): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `TRANSFER_${userId.substring(0, 8)}_${timestamp}_${random}`.toUpperCase();\n  }\n}\n","size_bytes":11850},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { autoReleaseService } from \"./autoReleaseService\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Start auto-release service\n  autoReleaseService.start();\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    log(`Auto-release service started`);\n  });\n})();","size_bytes":2228},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Add missing ACL methods\n  async trySetObjectEntityAclPolicy(objectPath: string, policy: any): Promise<string> {\n    // For now, return the object path as-is since ACL is handled by the service\n    // In a full implementation, this would set access permissions\n    return objectPath;\n  }\n\n  async canAccessObjectEntity(params: any): Promise<boolean> {\n    // For now, allow all access since proper ACL would require more setup\n    // In a full implementation, this would check user permissions\n    return true;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7676},"server/paymentService.ts":{"content":"import crypto from 'crypto';\n\nexport interface TokenPackage {\n  id: string;\n  name: string;\n  tokens: number;\n  price: number; // in NGN (Nigerian Naira)\n  popular?: boolean;\n}\n\nexport const TOKEN_PACKAGES = [];","size_bytes":211},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { insertUserSchema, insertFindSchema, insertProposalSchema, insertReviewSchema, insertMessageSchema, insertBlogPostSchema, insertOrderSubmissionSchema, type Find, finders, faqs, withdrawalSettings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n// Payment service imports removed - Paystack and Opay services disabled\nimport { FlutterwaveService, FLUTTERWAVE_TOKEN_PACKAGES } from \"./flutterwaveService\";\n\n// Paystack and Opay services successfully removed - Flutterwave-only payment processing\nimport { emailService } from \"./emailService\";\nimport { strikeService } from \"./strikeService\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// --- Middleware ---\n// Extended Request interface for authentication\ninterface AuthenticatedRequest extends Request {\n  user?: any;\n}\n\n// Middleware to verify JWT tokens\nfunction authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n\n    req.user = user;\n    next();\n  });\n}\n\n// Dummy requireAuth and requireAdmin functions for the sake of compilation,\n// assuming they are defined elsewhere and handle authentication and authorization.\n// In a real application, these would be properly implemented middleware.\nconst requireAuth = authenticateToken;\nasync function requireAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (req.user && req.user.role === 'admin') {\n    next();\n  } else {\n    res.status(403).json({ message: 'Admin access required' });\n  }\n}\n// --- End Middleware ---\n\n// Configure multer for file uploads\nconst storage_multer = multer.diskStorage({\n  destination: function (req, file, cb) {\n    const uploadDir = path.join(process.cwd(), 'uploads');\n    // Ensure upload directory exists\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: function (req, file, cb) {\n    // Generate unique filename with timestamp and random string\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const fileExtension = path.extname(file.originalname);\n    cb(null, file.fieldname + '-' + uniqueSuffix + fileExtension);\n  }\n});\n\nconst upload = multer({\n  storage: storage_multer,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n    files: 5 // Maximum 5 files\n  },\n  fileFilter: function (req, file, cb) {\n    // Allow specific file types\n    const allowedMimes = [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'image/webp',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain'\n    ];\n\n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only images, PDFs, and documents are allowed.'));\n    }\n  }\n});\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files statically\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  // --- Authentication Routes ---\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName, role, phone } = req.body;\n\n      // Validate input\n      const userData = insertUserSchema.parse({\n        email,\n        password: await bcrypt.hash(password, 10),\n        firstName,\n        lastName,\n        role\n      });\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Create user\n      const user = await storage.createUser(userData);\n\n      // If registering as finder, create finder profile\n      if (role === 'finder') {\n        await storage.createFinder({\n          userId: user.id,\n          phone: phone || null,\n        });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, email: user.email, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      res.status(201).json({\n        user: { ...user, password: undefined },\n        token\n      });\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      res.status(400).json({ message: \"Registration failed\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.isBanned) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { userId: user.id, email: user.email, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      res.json({\n        user: { ...user, password: undefined },\n        token\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let profile = null;\n      if (user.role === 'finder') {\n        profile = await storage.getFinderByUserId(user.id);\n      }\n\n      res.json({\n        user: { ...user, password: undefined },\n        profile\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user data\" });\n    }\n  });\n\n  app.post(\"/api/auth/forgot-password\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      console.log(`Password reset requested for email: ${email}`);\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n\n      // Always return success to prevent email enumeration\n      if (!user) {\n        console.log(`No user found for email: ${email}`);\n        return res.json({ message: \"If an account with that email exists, we've sent you a password reset link.\" });\n      }\n\n      console.log(`User found: ${user.id} - ${user.firstName} ${user.lastName}`);\n\n      // Generate reset token (expires in 1 hour)\n      const resetToken = jwt.sign(\n        { userId: user.id, email: user.email, type: 'password_reset' },\n        JWT_SECRET,\n        { expiresIn: '1h' }\n      );\n\n      // Create reset link\n      const resetLink = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n      console.log(`Generated reset link: ${resetLink}`);\n\n      // Send reset email\n      try {\n        const emailSent = await emailService.sendPasswordResetEmail(user.email, `${user.firstName} ${user.lastName}`, resetLink);\n\n        if (!emailSent) {\n          console.error('Email service returned false for password reset email');\n          return res.status(500).json({ message: \"Failed to send reset email. Please check your email configuration.\" });\n        }\n\n        console.log(`Password reset email sent successfully to ${user.email}`);\n      } catch (emailError) {\n        console.error('Failed to send password reset email:', emailError);\n        return res.status(500).json({ message: \"Failed to send reset email. Please check your email configuration.\" });\n      }\n\n      res.json({ message: \"If an account with that email exists, we've sent you a password reset link.\" });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req: Request, res: Response) => {\n    try {\n      const { token, newPassword } = req.body;\n\n      if (!token || !newPassword) {\n        return res.status(400).json({ message: \"Token and new password are required\" });\n      }\n\n      if (newPassword.length < 8) {\n        return res.status(400).json({ message: \"New password must be at least 8 characters long\" });\n      }\n\n      // Verify reset token\n      let decoded: any;\n      try {\n        decoded = jwt.verify(token, JWT_SECRET);\n        if (decoded.type !== 'password_reset') {\n          throw new Error('Invalid token type');\n        }\n      } catch (jwtError) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n\n      // Get user and update password\n      const user = await storage.getUser(decoded.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n      // Update password\n      await storage.updateUser(decoded.userId, { password: hashedPassword });\n\n      res.json({ message: \"Password reset successful\" });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  app.post(\"/api/auth/change-password\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password are required\" });\n      }\n\n      if (newPassword.length < 8) {\n        return res.status(400).json({ message: \"New password must be at least 8 characters long\" });\n      }\n\n      // Get current user\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 12);\n\n      // Update password using updateUser method\n      await storage.updateUser(req.user.userId, { password: hashedNewPassword });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      console.error('Change password error:', error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // --- Finder Routes ---\n  app.get(\"/api/finder/profile\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== 'finder') {\n        return res.status(403).json({ message: \"Access denied. Only finders can access this endpoint.\" });\n      }\n\n      const finder = await storage.getFinderByUserId(user.id);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      res.json({\n        ...finder,\n        user: { ...user, password: undefined }\n      });\n    } catch (error) {\n      console.error('Get finder profile error:', error);\n      res.status(500).json({ message: \"Failed to get finder profile\" });\n    }\n  });\n\n  app.patch(\"/api/finder/profile\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { bio, category, categories, skills, availability } = req.body;\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== 'finder') {\n        return res.status(403).json({ message: \"Access denied. Only finders can update their profile.\" });\n      }\n\n      const finder = await storage.getFinderByUserId(user.id);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      // Prepare update data\n      const updateData: any = {\n        bio,\n        skills,\n        availability\n      };\n\n      // Handle categories - prioritize new categories array over legacy category\n      if (categories && Array.isArray(categories)) {\n        updateData.categories = categories;\n        // Also update the legacy category field with the first category for backward compatibility\n        updateData.category = categories.length > 0 ? categories[0] : category;\n      } else if (category) {\n        // If only legacy category is provided, use it\n        updateData.category = category;\n        // Convert single category to array for new categories field\n        updateData.categories = [category];\n      }\n\n      // Update finder profile\n      const updatedFinder = await storage.updateFinder(finder.id, updateData);\n\n      if (!updatedFinder) {\n        return res.status(404).json({ message: \"Failed to update finder profile\" });\n      }\n\n      res.json({\n        message: \"Profile updated successfully\",\n        profile: updatedFinder\n      });\n    } catch (error) {\n      console.error('Update finder profile error:', error);\n      res.status(500).json({ message: \"Failed to update finder profile\" });\n    }\n  });\n\n  app.post(\"/api/auth/update-profile\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { firstName, lastName, email, phone } = req.body;\n\n      if (!firstName || !lastName || !email) {\n        return res.status(400).json({ message: \"First name, last name, and email are required\" });\n      }\n\n      // Check if email is already taken by another user\n      if (email !== req.user.email) {\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser && existingUser.id !== req.user.userId) {\n          return res.status(400).json({ message: \"Email is already taken by another user\" });\n        }\n      }\n\n      // Update user profile\n      const updatedUser = await storage.updateUser(req.user.userId, {\n        firstName,\n        lastName,\n        email,\n        phone\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        message: \"Profile updated successfully\",\n        user: { ...updatedUser, password: undefined }\n      });\n    } catch (error) {\n      console.error('Update profile error:', error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // --- Find Routes ---\n  app.get(\"/api/finds\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const finds = await storage.getAllActiveFinds();\n      res.json(finds);\n    } catch (error) {\n      console.error('Failed to fetch finds:', error);\n      res.status(500).json({ message: \"Failed to fetch finds\" });\n    }\n  });\n\n  app.get(\"/api/finds/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const find = await storage.getFind(id);\n\n      if (!find) {\n        return res.status(404).json({ message: \"Find not found\" });\n      }\n\n      res.json(find);\n    } catch (error) {\n      console.error('Get request error:', error);\n      res.status(500).json({ message: \"Failed to fetch request\" });\n    }\n  });\n\n  // Finder-specific routes\n  app.get(\"/api/finder/finds\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can browse finds\" });\n      }\n\n      const finds = await storage.getAvailableFindsForFinders();\n      res.json(finds);\n    } catch (error) {\n      console.error('Finder finds error:', error);\n      res.status(500).json({ message: \"Failed to fetch finds\" });\n    }\n  });\n\n  app.get(\"/api/finder/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can view their proposals\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const proposals = await storage.getProposalsByFinderId(finder.id);\n      res.json(proposals);\n    } catch (error) {\n      console.error('Finder proposals error:', error);\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.get(\"/api/finder/dashboard\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can access finder dashboard\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const findertokenBalance = await storage.getFindertokenBalance(finder.id);\n      const proposals = await storage.getProposalsByFinderId(finder.id);\n      const recentFinds = await storage.getAllActiveFinds();\n\n      res.json({\n        finder,\n        findertokenBalance: findertokenBalance?.balance ?? 0,\n        proposalsCount: proposals.length,\n        availableFinds: recentFinds.length\n      });\n    } catch (error) {\n      console.error('Finder dashboard error:', error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // --- Client Routes ---\n  app.get(\"/api/client/finds\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view their finds\" });\n      }\n\n      const finds = await storage.getFindsByClientId(req.user.userId);\n      res.json(finds);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch your finds\" });\n    }\n  });\n\n  app.post(\"/api/client/finds\", authenticateToken, upload.array('attachments', 5), async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can create finds\" });\n      }\n\n      console.log('Create find request body:', req.body);\n      console.log('Create find files:', req.files);\n\n      // Check if client is verified before allowing find creation\n      const client = await storage.getUser(req.user.userId);\n      if (!client || !client.isVerified) {\n        return res.status(403).json({\n          message: \"Account verification required. You must verify your account before posting finds.\",\n          verified: false,\n          verificationRequired: true\n        });\n      }\n\n      // Get admin settings for high budget posting\n      const settings = await storage.getAdminSettings();\n      const highBudgetThreshold = parseInt(settings.highBudgetThreshold || \"100000\");\n      const highBudgetTokenCost = parseInt(settings.highBudgetTokenCost || \"5\");\n\n      // Check if this is a high budget request\n      const maxBudget = parseInt(req.body.budgetMax || \"0\");\n      const isHighBudget = maxBudget >= highBudgetThreshold;\n\n      // If high budget, check if client has enough findertokens\n      if (isHighBudget) {\n        const client = await storage.getClientProfile(req.user.userId);\n        if (!client) {\n          return res.status(404).json({ message: \"Client profile not found\" });\n        }\n\n        const clientBalance = client.findertokenBalance || 0;\n        if (clientBalance < highBudgetTokenCost) {\n          return res.status(400).json({\n            message: `Insufficient findertokens. You need ${highBudgetTokenCost} findertokens for high-budget postings but only have ${clientBalance}. Please purchase findertokens to post this find.`,\n            requiredTokens: highBudgetTokenCost,\n            currentBalance: clientBalance,\n            needsToPurchaseTokens: true,\n            purchaseUrl: \"/client/tokens\"\n          });\n        }\n      }\n\n      // Get uploaded file paths\n      const files = req.files as Express.Multer.File[];\n      const attachmentPaths = files ? files.map(file => `/uploads/${file.filename}`) : [];\n\n      // Check for restricted words in title and description\n      const contentToCheck = `${req.body.title || ''} ${req.body.description || ''}`;\n      const flaggedWords = await storage.checkContentForRestrictedWords(contentToCheck);\n\n      const requestData = insertFindSchema.parse({\n        ...req.body,\n        clientId: req.user.userId,\n        attachments: attachmentPaths,\n        status: flaggedWords.length > 0 ? 'under_review' : 'open',\n        flaggedWords: flaggedWords.length > 0 ? flaggedWords : undefined,\n        reviewReason: flaggedWords.length > 0 ? `Find contains restricted words: ${flaggedWords.join(', ')}` : undefined,\n        isHighBudget: isHighBudget\n      });\n\n      const request = await storage.createFind(requestData);\n\n      // If high budget, deduct findertokens\n      if (isHighBudget) {\n        await storage.deductClientFindertokens(req.user.userId, highBudgetTokenCost, `High-budget find posting: ${request.title}`);\n      }\n\n      // If flagged, notify the client that their find is under review\n      if (flaggedWords.length > 0) {\n        return res.status(202).json({\n          ...request,\n          message: \"Your find has been submitted for review due to content restrictions and will be published once approved by our admin team.\"\n        });\n      }\n\n      const responseMessage = isHighBudget\n        ? `Find posted successfully! ${highBudgetTokenCost} findertokens have been deducted for this high-budget posting.`\n        : \"Find posted successfully!\";\n\n      res.status(201).json({\n        ...request,\n        message: responseMessage\n      });\n    } catch (error: any) {\n      console.error('Create find error:', error);\n      res.status(400).json({ message: \"Failed to create find\", error: error.message });\n    }\n  });\n\n\n\n  app.get(\"/api/client/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view proposals\" });\n      }\n\n      const proposals = await storage.getProposalsForClient(req.user.userId);\n      res.json(proposals);\n    } catch (error) {\n      console.error('Failed to fetch client proposals:', error);\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.get(\"/api/client/transactions\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view transactions\" });\n      }\n\n      const transactions = await storage.getTransactionsByUserId(req.user.userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error('Failed to fetch client transactions:', error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/client/balance\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view balance\" });\n      }\n\n      const client = await storage.getClientProfile(req.user.userId);\n      if (!client) {\n        return res.status(404).json({ message: \"Client profile not found\" });\n      }\n\n      res.json({\n        balance: client.findertokenBalance || 0\n      });\n    } catch (error) {\n      console.error('Failed to fetch client balance:', error);\n      res.status(500).json({ message: \"Failed to fetch balance\" });\n    }\n  });\n\n  app.post(\"/api/finds\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can create finds\" });\n      }\n\n      const requestData = insertFindSchema.parse({\n        ...req.body,\n        clientId: req.user.userId\n      });\n\n      const request = await storage.createFind(requestData);\n      res.status(201).json(request);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to create find\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/finds/my\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view their finds\" });\n      }\n\n      const finds = await storage.getFindsByClientId(req.user.userId);\n      res.json(finds);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch your finds\" });\n    }\n  });\n\n  app.get(\"/api/finds/:id/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const request = await storage.getFind(id);\n\n      if (!request) {\n        return res.status(404).json({ message: \"Find not found\" });\n      }\n\n      // Only the client who posted the request can view ALL proposals\n      if (req.user.role === 'client' && request.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // If finder is accessing, they should use /finder/finds/:id/proposals instead\n      if (req.user.role === 'finder') {\n        return res.status(403).json({ message: \"Finders should use finder-specific endpoints\" });\n      }\n\n      const proposals = await storage.getProposalsByFindId(id);\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  // Finder-specific route to see only their own proposals for a request (like comments)\n  app.get(\"/api/finder/finds/:id/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can use this endpoint\" });\n      }\n\n      const request = await storage.getFind(id);\n      if (!request) {\n        return res.status(404).json({ message: \"Find not found\" });\n      }\n\n      // Get finder profile\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      // Get only this finder's proposals for this request (like seeing only your own comments)\n      const proposal = await storage.getProposalByFinderAndFind(finder.id, id);\n      res.json(proposal ? [proposal] : []);\n    } catch (error) {\n      console.error('Finder request proposals error:', error);\n      res.status(500).json({ message: \"Failed to fetch your proposals\" });\n    }\n  });\n\n  // --- Proposal Routes ---\n  app.post(\"/api/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can submit proposals\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const proposalData = insertProposalSchema.parse({\n        ...req.body,\n        finderId: finder.id\n      });\n\n      // Check if request has already been accepted by someone else\n      const hasAccepted = await storage.hasAcceptedProposal(proposalData.findId);\n      if (hasAccepted) {\n        return res.status(400).json({ message: \"This request has already been accepted by another finder\" });\n      }\n\n      // Check if this finder has already submitted a proposal for this request\n      const existingProposal = await storage.getProposalByFinderAndFind(finder.id, proposalData.findId);\n      if (existingProposal) {\n        return res.status(400).json({ message: \"You have already submitted a proposal for this request\" });\n      }\n\n      // Check findertoken balance\n      const tokenCost = await storage.getAdminSetting('proposal_token_cost');\n      const requiredTokens = parseInt(tokenCost?.value || '1');\n\n      if ((finder.findertokenBalance ?? 0) < requiredTokens) {\n        return res.status(400).json({ message: `Insufficient findertokens to submit proposal. Required: ${requiredTokens}, Available: ${finder.findertokenBalance ?? 0}` });\n      }\n\n      const proposal = await storage.createProposal(proposalData);\n\n      // Deduct findertoken - update finder balance directly\n      const newBalance = (finder.findertokenBalance ?? 0) - requiredTokens;\n      await storage.updateFinderTokenBalance(finder.id, newBalance);\n\n      // Record transaction\n      await storage.createTransaction({\n        userId: req.user.userId,\n        finderId: finder.id,\n        amount: -requiredTokens,\n        type: 'proposal',\n        description: `Proposal submitted for request: ${proposal.findId}`\n      });\n\n      // Send email notification to client about new proposal\n      try {\n        const request = await storage.getFind(proposal.findId);\n        if (request) {\n          const clientUser = await storage.getUser(request.clientId);\n          const finderUser = await storage.getUser(req.user.userId);\n\n          if (clientUser && finderUser) {\n            await emailService.notifyClientNewProposal(\n              clientUser.email,\n              `${finderUser.firstName} ${finderUser.lastName}`,\n              request.title,\n              proposal.price.toString()\n            );\n          }\n        }\n      } catch (emailError) {\n        console.error('Failed to send new proposal notification email:', emailError);\n      }\n\n      res.status(201).json(proposal);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to submit proposal\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/proposals/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const proposalWithDetails = await storage.getProposalWithDetails(id);\n\n      if (!proposalWithDetails) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Authorization: only the finder who submitted it or the client who owns the request can view it\n      if (req.user.role === 'finder') {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder || proposalWithDetails.finderId !== finder.id) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      } else if (req.user.role === 'client') {\n        const request = await storage.getFind(proposalWithDetails.findId);\n        if (!request || request.clientId !== req.user.userId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(proposalWithDetails);\n    } catch (error) {\n      console.error('Get proposal error:', error);\n      res.status(500).json({ message: \"Failed to fetch proposal\" });\n    }\n  });\n\n  app.get(\"/api/proposals/my\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can view their proposals\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const proposals = await storage.getProposalsByFinderId(finder.id);\n      res.json(proposals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch your proposals\" });\n    }\n  });\n\n  // --- Finder Contracts ---\n  app.get(\"/api/finder/contracts\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can view their contracts\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const contracts = await storage.getContractsByFinderId(finder.id);\n      res.json(contracts);\n    } catch (error) {\n      console.error('Failed to fetch finder contracts:', error);\n      res.status(500).json({ message: \"Failed to fetch your contracts\" });\n    }\n  });\n\n  app.get(\"/api/finder/contracts/:contractId\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can view their contracts\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const { contractId } = req.params;\n      const contractDetails = await storage.getContractDetails(contractId, finder.id);\n\n      if (!contractDetails) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n\n      res.json(contractDetails);\n    } catch (error) {\n      console.error('Failed to fetch contract details:', error);\n      res.status(500).json({ message: \"Failed to fetch contract details\" });\n    }\n  });\n\n  app.post(\"/api/proposals/:id/accept\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const proposal = await storage.getProposal(id);\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      const request = await storage.getFind(proposal.findId);\n      if (!request || request.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Get finder and client details for email notification\n      const finder = await storage.getFinder(proposal.finderId);\n      const finderUser = finder ? await storage.getUser(finder.userId) : null;\n      const clientUser = await storage.getUser(request.clientId);\n\n      // Update proposal status\n      await storage.updateProposal(id, { status: 'accepted' });\n\n      // Create contract with pending escrow status (payment required)\n      const contract = await storage.createContract({\n        findId: proposal.findId,\n        proposalId: proposal.id,\n        clientId: request.clientId,\n        finderId: proposal.finderId,\n        amount: proposal.price,\n        escrowStatus: 'pending'\n      });\n\n      // Send email notification to finder about being hired (pending payment)\n      if (finderUser && clientUser) {\n        try {\n          await emailService.notifyFinderHired(\n            finderUser.email,\n            `${clientUser.firstName} ${clientUser.lastName}`,\n            request.title,\n            proposal.price.toString()\n          );\n        } catch (emailError) {\n          console.error('Failed to send hire notification email:', emailError);\n        }\n      }\n\n      res.json({\n        success: true,\n        message: \"Proposal accepted and contract created. Please complete payment to start work.\",\n        proposal,\n        contract: {\n          ...contract,\n          findTitle: request.title,\n          finderName: finderUser ? `${finderUser.firstName} ${finderUser.lastName}` : 'Unknown Finder'\n        },\n        payment: {\n          required: true,\n          amount: proposal.price,\n          contractId: contract.id\n        }\n      });\n    } catch (error) {\n      console.error('Accept proposal error:', error);\n      res.status(500).json({ message: \"Failed to accept proposal and create contract\" });\n    }\n  });\n\n  // --- Support Ticket ---\n  // Support ticket submission endpoint\n  app.post(\"/api/support/tickets\", async (req: Request, res: Response) => {\n    try {\n      const { name, email, category, priority = 'medium', subject, message } = req.body;\n\n      // Validate required fields\n      if (!name || !email || !category || !subject || !message) {\n        return res.status(400).json({ \n          message: \"Missing required fields: name, email, category, subject, and message are required\" \n        });\n      }\n\n      // Generate unique ticket number\n      const ticketNumber = await storage.generateTicketNumber();\n      \n      // Map category to department (can be enhanced with a lookup table later)\n      const departmentMap: { [key: string]: string } = {\n        'account': 'general',\n        'billing': 'billing',\n        'payment': 'billing',\n        'technical': 'technical',\n        'bug': 'technical',\n        'feature': 'general',\n        'general': 'general',\n        'dispute': 'disputes',\n        'verification': 'verification'\n      };\n      \n      const department = departmentMap[category.toLowerCase()] || 'general';\n\n      // Check if user is authenticated (optional - tickets can be anonymous)\n      let submitterId = null;\n      const authHeader = req.headers['authorization'];\n      if (authHeader) {\n        try {\n          const token = authHeader.split(' ')[1];\n          const decoded = jwt.verify(token, JWT_SECRET) as any;\n          submitterId = decoded.userId;\n        } catch (error) {\n          // If token is invalid, treat as anonymous submission\n          console.log('Anonymous ticket submission - invalid/missing token');\n        }\n      }\n\n      // Create support ticket\n      const ticketData = {\n        ticketNumber,\n        submitterName: name,\n        submitterEmail: email,\n        submitterId,\n        category: category.toLowerCase(),\n        priority: priority.toLowerCase(),\n        department,\n        subject,\n        description: message,\n        status: 'open'\n      };\n\n      const ticket = await storage.createSupportTicket(ticketData);\n\n      // Create initial message from user\n      await storage.createSupportTicketMessage({\n        ticketId: ticket.id,\n        senderId: submitterId,\n        senderType: 'user',\n        senderName: name,\n        senderEmail: email,\n        content: message,\n        isInternal: false\n      });\n\n      console.log(`Support ticket created: ${ticketNumber}`, { \n        id: ticket.id,\n        submitter: name,\n        email,\n        category,\n        priority,\n        department,\n        subject\n      });\n\n      res.status(201).json({\n        success: true,\n        ticket: {\n          id: ticket.id,\n          ticketNumber: ticket.ticketNumber,\n          status: ticket.status,\n          category: ticket.category,\n          priority: ticket.priority,\n          department: ticket.department,\n          subject: ticket.subject,\n          createdAt: ticket.createdAt\n        },\n        message: \"Support ticket submitted successfully\"\n      });\n    } catch (error) {\n      console.error('Failed to submit support ticket:', error);\n      res.status(500).json({ message: \"Failed to submit support ticket\" });\n    }\n  });\n\n  // Support Agent Authentication Middleware\n  async function requireSupportAgent(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n    try {\n      if (!req.user) {\n        console.log('No user in request for support agent auth');\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      console.log('Checking support agent for user:', req.user.userId, 'role:', req.user.role);\n\n      // Allow admins to access agent dashboard\n      if (req.user.role === 'admin') {\n        console.log('Admin user accessing agent dashboard');\n        // Create a mock agent object for admin\n        (req as any).agent = {\n          id: 'admin',\n          agentId: 'ADMIN',\n          department: 'all',\n          permissions: ['view_all_tickets', 'respond_all_tickets', 'assign_tickets', 'close_tickets', 'modify_priority', 'internal_notes'],\n          isActive: true,\n          maxTicketsPerDay: 999,\n          responseTimeTarget: 1,\n          user: {\n            firstName: 'Admin',\n            lastName: 'User'\n          }\n        };\n        return next();\n      }\n\n      const supportAgent = await storage.getUserSupportAgent(req.user.userId);\n      console.log('Found support agent:', supportAgent ? supportAgent.id : 'none');\n      \n      if (!supportAgent) {\n        console.log('No support agent record found for user:', req.user.userId);\n        return res.status(403).json({ message: 'Support agent access required' });\n      }\n      \n      if (!supportAgent.isActive) {\n        console.log('Support agent is not active:', supportAgent.id);\n        return res.status(403).json({ message: 'Support agent account is suspended' });\n      }\n\n      // Attach agent info to request\n      (req as any).agent = supportAgent;\n      console.log('Support agent authenticated successfully:', supportAgent.agentId);\n      next();\n    } catch (error) {\n      console.error('Support agent authentication error:', error);\n      res.status(500).json({ message: 'Authentication error' });\n    }\n  }\n\n  // Check if agent has specific permission\n  function requirePermission(permission: string) {\n    return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n      const agent = (req as any).agent;\n      if (!agent || !agent.permissions.includes(permission)) {\n        return res.status(403).json({ message: `Permission required: ${permission}` });\n      }\n      next();\n    };\n  }\n\n  // Debug endpoint for support agent authentication\n  app.get(\"/api/debug/agent-auth\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      console.log('Debug: User info:', {\n        userId: req.user.userId,\n        email: req.user.email,\n        role: req.user.role\n      });\n\n      const supportAgent = await storage.getUserSupportAgent(req.user.userId);\n      console.log('Debug: Support agent:', supportAgent);\n\n      res.json({\n        user: {\n          userId: req.user.userId,\n          email: req.user.email,\n          role: req.user.role\n        },\n        supportAgent: supportAgent\n      });\n    } catch (error) {\n      console.error('Debug agent auth error:', error);\n      res.status(500).json({ message: 'Debug error', error: error.message });\n    }\n  });\n\n  // --- Support Agent Ticket Management ---\n  \n  // Get tickets for agent based on permissions and department\n  app.get(\"/api/agent/tickets\", authenticateToken, requireSupportAgent, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const agent = (req as any).agent;\n      const { status, priority, page = 1, limit = 20 } = req.query;\n\n      let filters: any = {};\n      \n      // Apply department filter based on agent's department\n      if (agent.department !== 'all') {\n        filters.department = agent.department;\n      }\n\n      // Apply status filter if provided\n      if (status && typeof status === 'string') {\n        filters.status = status;\n      }\n\n      // Apply priority filter if provided\n      if (priority && typeof priority === 'string') {\n        filters.priority = priority;\n      }\n\n      // If agent can only view assigned tickets, filter by assignment\n      if (!agent.permissions.includes('view_all_tickets')) {\n        filters.assignedTo = agent.id;\n      }\n\n      const tickets = await storage.getSupportTickets(filters);\n\n      console.log(`Agent ${agent.agentId} viewing tickets`, {\n        department: agent.department,\n        filters,\n        count: tickets.length\n      });\n\n      res.json({\n        tickets,\n        pagination: {\n          page: parseInt(page as string),\n          limit: parseInt(limit as string),\n          total: tickets.length\n        },\n        agent: {\n          id: agent.id,\n          agentId: agent.agentId,\n          department: agent.department,\n          permissions: agent.permissions\n        }\n      });\n    } catch (error) {\n      console.error('Failed to fetch tickets for agent:', error);\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  // Get specific ticket details\n  app.get(\"/api/agent/tickets/:id\", authenticateToken, requireSupportAgent, requirePermission('view_tickets'), async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const agent = (req as any).agent;\n\n      const ticket = await storage.getSupportTicket(id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      // Check if agent can view this ticket based on department and assignment\n      if (agent.department !== 'all' && ticket.department !== agent.department) {\n        if (!agent.permissions.includes('view_all_tickets') && ticket.assignedTo !== agent.id) {\n          return res.status(403).json({ message: \"Access denied to this ticket\" });\n        }\n      }\n\n      // Get ticket messages\n      const messages = await storage.getSupportTicketMessages(id);\n\n      console.log(`Agent ${agent.agentId} viewing ticket ${ticket.ticketNumber}`);\n\n      res.json({\n        ticket,\n        messages: messages.map(msg => ({\n          ...msg,\n          // Hide internal messages from non-agent viewers if needed\n          isInternal: msg.isInternal && !agent.permissions.includes('view_internal_notes') ? false : msg.isInternal\n        }))\n      });\n    } catch (error) {\n      console.error('Failed to fetch ticket details:', error);\n      res.status(500).json({ message: \"Failed to fetch ticket details\" });\n    }\n  });\n\n  // Add response to ticket\n  app.post(\"/api/agent/tickets/:id/messages\", authenticateToken, requireSupportAgent, requirePermission('respond_tickets'), async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { content, isInternal = false } = req.body;\n      const agent = (req as any).agent;\n\n      if (!content) {\n        return res.status(400).json({ message: \"Message content is required\" });\n      }\n\n      const ticket = await storage.getSupportTicket(id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      // Check if agent can respond to this ticket\n      if (agent.department !== 'all' && ticket.department !== agent.department) {\n        if (!agent.permissions.includes('respond_all_tickets') && ticket.assignedTo !== agent.id) {\n          return res.status(403).json({ message: \"Access denied to respond to this ticket\" });\n        }\n      }\n\n      // Check internal notes permission\n      if (isInternal && !agent.permissions.includes('internal_notes')) {\n        return res.status(403).json({ message: \"Permission denied for internal notes\" });\n      }\n\n      // Create the message\n      const message = await storage.createSupportTicketMessage({\n        ticketId: id,\n        senderId: agent.userId,\n        senderType: 'agent',\n        senderName: `${agent.user?.firstName || ''} ${agent.user?.lastName || ''}`.trim() || agent.agentId,\n        content,\n        isInternal\n      });\n\n      // Update ticket status if needed\n      let statusUpdate = {};\n      if (ticket.status === 'open') {\n        statusUpdate = { status: 'in_progress' };\n      }\n      if (!ticket.assignedTo && agent.permissions.includes('assign_tickets')) {\n        statusUpdate = { ...statusUpdate, assignedTo: agent.id };\n      }\n\n      if (Object.keys(statusUpdate).length > 0) {\n        await storage.updateSupportTicket(id, statusUpdate);\n      }\n\n      console.log(`Agent ${agent.agentId} responded to ticket ${ticket.ticketNumber}`, {\n        messageId: message.id,\n        isInternal,\n        statusUpdate\n      });\n\n      res.status(201).json({\n        message,\n        ticket: await storage.getSupportTicket(id)\n      });\n    } catch (error) {\n      console.error('Failed to add ticket response:', error);\n      res.status(500).json({ message: \"Failed to add response\" });\n    }\n  });\n\n  // Update ticket (assign, change status, etc.)\n  app.put(\"/api/agent/tickets/:id\", authenticateToken, requireSupportAgent, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { status, assignedTo, priority, resolution } = req.body;\n      const agent = (req as any).agent;\n\n      const ticket = await storage.getSupportTicket(id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      // Check permissions for various operations\n      const updates: any = {};\n\n      if (status !== undefined) {\n        if (status === 'closed' && !agent.permissions.includes('close_tickets')) {\n          return res.status(403).json({ message: \"Permission denied to close tickets\" });\n        }\n        updates.status = status;\n        \n        if (status === 'resolved' || status === 'closed') {\n          updates.resolvedAt = new Date();\n          if (resolution) {\n            updates.resolution = resolution;\n          }\n        }\n      }\n\n      if (assignedTo !== undefined && agent.permissions.includes('assign_tickets')) {\n        updates.assignedTo = assignedTo;\n      }\n\n      if (priority !== undefined && agent.permissions.includes('modify_priority')) {\n        updates.priority = priority;\n      }\n\n      if (Object.keys(updates).length === 0) {\n        return res.status(400).json({ message: \"No valid updates provided\" });\n      }\n\n      const updatedTicket = await storage.updateSupportTicket(id, updates);\n\n      console.log(`Agent ${agent.agentId} updated ticket ${ticket.ticketNumber}`, updates);\n\n      res.json({\n        ticket: updatedTicket,\n        message: \"Ticket updated successfully\"\n      });\n    } catch (error) {\n      console.error('Failed to update ticket:', error);\n      res.status(500).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  // Get agent dashboard statistics\n  app.get(\"/api/agent/dashboard\", authenticateToken, requireSupportAgent, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const agent = (req as any).agent;\n\n      // Get tickets assigned to this agent\n      const assignedTickets = await storage.getSupportTickets({ assignedTo: agent.id });\n      \n      // Get all tickets in agent's department for overview\n      let departmentFilters: any = {};\n      if (agent.department !== 'all') {\n        departmentFilters.department = agent.department;\n      }\n      const departmentTickets = await storage.getSupportTickets(departmentFilters);\n\n      const stats = {\n        assigned: {\n          total: assignedTickets.length,\n          open: assignedTickets.filter(t => t.status === 'open').length,\n          inProgress: assignedTickets.filter(t => t.status === 'in_progress').length,\n          resolved: assignedTickets.filter(t => t.status === 'resolved').length\n        },\n        department: {\n          total: departmentTickets.length,\n          unassigned: departmentTickets.filter(t => !t.assignedTo).length,\n          urgent: departmentTickets.filter(t => t.priority === 'urgent').length,\n          high: departmentTickets.filter(t => t.priority === 'high').length\n        }\n      };\n\n      res.json({\n        agent: {\n          id: agent.id,\n          agentId: agent.agentId,\n          department: agent.department,\n          permissions: agent.permissions,\n          maxTicketsPerDay: agent.maxTicketsPerDay,\n          responseTimeTarget: agent.responseTimeTarget\n        },\n        statistics: stats,\n        recentTickets: assignedTickets.slice(0, 5).map(ticket => ({\n          id: ticket.id,\n          ticketNumber: ticket.ticketNumber,\n          subject: ticket.subject,\n          status: ticket.status,\n          priority: ticket.priority,\n          createdAt: ticket.createdAt,\n          submitterName: ticket.submitterName\n        }))\n      });\n    } catch (error) {\n      console.error('Failed to fetch agent dashboard:', error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // --- Contract Payment ---\n  // Contract payment initialization endpoint\n  app.post(\"/api/contracts/:contractId/payment\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { contractId } = req.params;\n\n      // Get contract details\n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n\n      // Verify user is the client for this contract\n      if (contract.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check if contract is already funded\n      console.log(`Contract ${contractId} escrow status: ${contract.escrowStatus}`);\n      if (contract.escrowStatus === 'funded' || contract.escrowStatus === 'held') {\n        return res.status(400).json({\n          message: \"Contract is already funded\",\n          escrowStatus: contract.escrowStatus\n        });\n      }\n\n      // Get user details for payment\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Payment services have been removed\n      return res.status(503).json({\n        message: \"Payment services are currently unavailable. Please contact support.\",\n        error: \"Payment services removed\"\n      });\n\n    } catch (error) {\n      console.error('Contract payment initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize payment\" });\n    }\n  });\n\n  // Flutterwave token packages endpoint\n  app.get(\"/api/findertokens/flutterwave-packages\", (req: Request, res: Response) => {\n    res.json(FLUTTERWAVE_TOKEN_PACKAGES);\n  });\n\n  // Opay token packages endpoint - REMOVED\n\n  // FinderToken‚Ñ¢ Purchase endpoint\n  app.post(\"/api/tokens/purchase\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { tokenAmount, amount } = req.body;\n\n      if (!tokenAmount || !amount || tokenAmount <= 0 || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid token amount or price\" });\n      }\n\n      const flutterwaveService = new FlutterwaveService();\n      const user = await storage.getUser(req.user.userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const reference = flutterwaveService.generateTransactionReference(req.user.userId);\n\n      // Create callback URL for after payment\n      const callbackUrl = `${req.protocol}://${req.get('host')}/finder/payment-success?payment=success&reference=${reference}`;\n\n      const transaction = await paymentService.initializeTransaction(\n        user.email,\n        amount, // Amount in naira\n        reference,\n        {\n          userId: req.user.userId,\n          tokens: tokenAmount,\n          package_type: 'findertoken_special'\n        },\n        callbackUrl\n      );\n\n      res.json(transaction);\n    } catch (error) {\n      console.error('Token purchase initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize payment\" });\n    }\n  });\n\n  // Initialize payment endpoint\n  app.post(\"/api/payments/initialize\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { packageId } = req.body;\n\n      const flutterwaveService = new FlutterwaveService();\n      const selectedPackage = FLUTTERWAVE_TOKEN_PACKAGES.find((pkg: any) => pkg.id === packageId);\n\n      if (!selectedPackage) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const reference = paymentService.generateTransactionReference(req.user.userId);\n\n      const transaction = await paymentService.initializeTransaction(\n        user.email,\n        selectedPackage.price,\n        reference,\n        {\n          userId: req.user.userId,\n          packageId: packageId,\n          tokens: selectedPackage.tokens\n        }\n      );\n\n      res.json(transaction);\n    } catch (error) {\n      console.error('Payment initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize payment\" });\n    }\n  });\n\n  // Initialize Opay payment endpoint - REMOVED\n\n  // Check Flutterwave configuration\n  app.get(\"/api/payments/flutterwave/config\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const flutterwaveService = new FlutterwaveService();\n      res.json({\n        isConfigured: flutterwaveService.isConfigured(),\n        hasSecretKey: !!process.env.FLUTTERWAVE_SECRET_KEY,\n        hasPublicKey: !!process.env.FLUTTERWAVE_PUBLIC_KEY\n      });\n    } catch (error) {\n      console.error('Error checking Flutterwave configuration:', error);\n      res.status(500).json({ message: \"Failed to check Flutterwave configuration\" });\n    }\n  });\n\n  // Initialize Flutterwave payment endpoint\n  app.post(\"/api/payments/flutterwave/initialize\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { packageId, phone, customerName } = req.body;\n\n      const flutterwaveService = new FlutterwaveService();\n      const selectedPackage = FLUTTERWAVE_TOKEN_PACKAGES.find((pkg: any) => pkg.id === packageId); // Assuming FLUTTERWAVE_TOKEN_PACKAGES is defined\n\n      if (!selectedPackage) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const reference = flutterwaveService.generateTransactionReference(req.user.userId);\n\n      const transaction = await flutterwaveService.initializeTransaction(\n        user.email,\n        selectedPackage.price,\n        reference,\n        {\n          userId: req.user.userId,\n          packageId: packageId,\n          tokens: selectedPackage.tokens,\n          phone: phone,\n          customerName: customerName || `${user.firstName} ${user.lastName}`\n        }\n      );\n\n      res.json(transaction);\n    } catch (error) {\n      console.error('Flutterwave payment initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize Flutterwave payment\" });\n    }\n  });\n\n  // Client token purchase with Flutterwave\n  app.post(\"/api/client/tokens/flutterwave/initialize\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can purchase tokens\" });\n      }\n\n      const { packageId, phone, customerName } = req.body;\n      const flutterwaveService = new FlutterwaveService();\n\n      // Get token packages from storage instead of hardcoded packages\n      const tokenPackages = await storage.getActiveTokenPackages();\n      const selectedPackage = tokenPackages.find(pkg => pkg.id === packageId);\n\n      if (!selectedPackage) {\n        console.log('Available packages:', tokenPackages.map(p => ({ id: p.id, name: p.name })));\n        console.log('Requested package ID:', packageId);\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const reference = flutterwaveService.generateTransactionReference(req.user.userId);\n\n      const transaction = await flutterwaveService.initializeTransaction(\n        user.email,\n        parseFloat(selectedPackage.price),\n        reference,\n        {\n          userId: req.user.userId,\n          packageId: packageId,\n          tokens: selectedPackage.tokenCount,\n          phone: phone,\n          customerName: customerName || `${user.firstName} ${user.lastName}`,\n          userRole: 'client'\n        }\n      );\n\n      res.json(transaction);\n    } catch (error) {\n      console.error('Client Flutterwave payment initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize Flutterwave payment\" });\n    }\n  });\n\n  // Client token purchase verification\n  app.get(\"/api/client/tokens/flutterwave/verify/:reference\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can verify token purchases\" });\n      }\n\n      const { reference } = req.params;\n      const flutterwaveService = new FlutterwaveService();\n\n      const transaction = await flutterwaveService.verifyTransaction(reference);\n\n      if (transaction.status === 'success') {\n        // Check if transaction already processed\n        const existingTransaction = await storage.getTransactionByReference(reference);\n\n        if (!existingTransaction) {\n          // For clients, we need to add to their findertoken balance\n          // First check if they have a client profile or create one\n          let client = await storage.getClientProfile(req.user.userId);\n\n          // Get tokens from metadata or amount mapping\n          const { getTokensFromAmount } = require('./flutterwaveService'); // Assuming this helper exists\n          const tokens = transaction.metadata?.tokens || getTokensFromAmount(transaction.amount) || 10;\n\n          // Add tokens to client balance\n          await storage.addClientFindertokens(req.user.userId, tokens, `FinderToken‚Ñ¢ purchase via Flutterwave - ${tokens} tokens`);\n\n          // Create transaction record\n          await storage.createTransaction({\n            userId: req.user.userId,\n            type: 'findertoken_purchase',\n            amount: tokens,\n            description: `FinderToken‚Ñ¢ purchase via Flutterwave - ${tokens} tokens`,\n            reference: reference\n          });\n\n          console.log(`Flutterwave client verification: Added ${tokens} tokens to client ${req.user.userId}`);\n        } else {\n          console.log(`Flutterwave client verification: Transaction ${reference} already processed`);\n        }\n\n        res.json({\n          status: 'success',\n          data: transaction\n        });\n      } else {\n        res.json({\n          status: 'failed',\n          message: 'Payment was not successful'\n        });\n      }\n    } catch (error) {\n      console.error('Client Flutterwave payment verification error:', error);\n      res.status(500).json({ message: \"Failed to verify Flutterwave payment\" });\n    }\n  });\n\n  // Payment verification endpoint\n  app.get(\"/api/payments/verify/:reference\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { reference } = req.params;\n      const flutterwaveService = new FlutterwaveService();\n\n      const transaction = await flutterwaveService.verifyTransaction(reference);\n\n      if (transaction.status === 'success') {\n        const { metadata } = transaction;\n        const { userId, tokens } = metadata;\n\n        // Verify this transaction belongs to the requesting user\n        if (userId !== req.user.userId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n\n        // Update user's findertoken balance if not already done\n        const finder = await storage.getFinderByUserId(userId);\n        if (finder) {\n          // Check if transaction already processed\n          const existingTransaction = await storage.getTransactionByReference(reference);\n\n          if (!existingTransaction) {\n            // Update balance and create transaction record\n            const currentBalance = finder.findertokenBalance || 0;\n            await storage.updateFinder(finder.id, {\n              findertokenBalance: currentBalance + tokens\n            });\n\n            await storage.createTransaction({\n              userId: userId,\n              finderId: finder.id,\n              type: 'findertoken_purchase',\n              amount: tokens,\n              description: `FinderToken‚Ñ¢ purchase - ${tokens} tokens`,\n              reference: reference\n            });\n          }\n        }\n\n        res.json({\n          status: 'success',\n          data: transaction\n        });\n      } else {\n        res.json({\n          status: 'failed',\n          message: 'Payment was not successful'\n        });\n      }\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      res.status(500).json({ message: \"Failed to verify payment\" });\n    }\n  });\n\n  // Flutterwave payment verification endpoint\n  app.get(\"/api/payments/flutterwave/verify/:reference\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { reference } = req.params;\n      const flutterwaveService = new FlutterwaveService();\n\n      const transaction = await flutterwaveService.verifyTransaction(reference);\n\n      if (transaction.status === 'success') {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder profile not found\" });\n        }\n\n        // Check if transaction already processed\n        const existingTransaction = await storage.getTransactionByReference(reference);\n\n        if (!existingTransaction) {\n          // Import the helper function\n          const { getTokensFromAmount } = require('./flutterwaveService'); // Assuming this helper exists\n\n          // Determine tokens from the amount or metadata\n          const tokens = transaction.metadata?.tokens || getTokensFromAmount(transaction.amount) || 10;\n\n          // Update balance and create transaction record\n          const currentBalance = finder.findertokenBalance || 0;\n          await storage.updateFinder(finder.id, {\n            findertokenBalance: currentBalance + tokens\n          });\n\n          await storage.createTransaction({\n            userId: req.user.userId,\n            finderId: finder.id,\n            type: 'findertoken_purchase',\n            amount: tokens,\n            description: `FinderToken‚Ñ¢ purchase via Flutterwave - ${tokens} tokens`,\n            reference: reference\n          });\n\n          console.log(`Flutterwave verification: Added ${tokens} tokens to user ${req.user.userId}`);\n        } else {\n          console.log(`Flutterwave verification: Transaction ${reference} already processed`);\n        }\n\n        res.json({\n          status: 'success',\n          data: transaction\n        });\n      } else {\n        res.json({\n          status: 'failed',\n          message: 'Payment was not successful'\n        });\n      }\n    } catch (error) {\n      console.error('Flutterwave payment verification error:', error);\n      res.status(500).json({ message: \"Failed to verify Flutterwave payment\" });\n    }\n  });\n\n  // Flutterwave webhook endpoint\n  app.post(\"/api/payments/flutterwave/webhook\", express.raw({ type: 'application/json' }), async (req: Request, res: Response) => {\n    try {\n      const flutterwaveService = new FlutterwaveService();\n\n      const signature = req.headers['verif-hash'] as string;\n      const payload = req.body.toString();\n\n      if (!flutterwaveService.verifyWebhookSignature(payload, signature)) {\n        console.log('Invalid Flutterwave webhook signature');\n        return res.status(400).send('Invalid signature');\n      }\n\n      const event = JSON.parse(payload);\n\n      if (event.event === 'charge.completed' && event.data.status === 'successful') {\n        const { tx_ref, amount, meta } = event.data;\n        const { userId, tokens } = meta || {};\n\n        if (!userId || !tokens) {\n          console.log('Missing userId or tokens in Flutterwave webhook metadata');\n          return res.status(400).send('Missing required metadata');\n        }\n\n        // Check if transaction already processed\n        const existingTransaction = await storage.getTransactionByReference(tx_ref);\n\n        if (!existingTransaction) {\n          const finder = await storage.getFinderByUserId(userId);\n          if (finder) {\n            const currentBalance = finder.findertokenBalance || 0;\n            await storage.updateFinder(finder.id, {\n              findertokenBalance: currentBalance + tokens\n            });\n\n            await storage.createTransaction({\n              userId: userId,\n              finderId: finder.id,\n              type: 'findertoken_purchase',\n              amount: tokens,\n              description: `FinderToken‚Ñ¢ purchase via Flutterwave - ${tokens} tokens`,\n              reference: tx_ref\n            });\n\n            console.log(`Flutterwave webhook: Added ${tokens} tokens to user ${userId}`);\n          } else {\n            console.log(`Flutterwave webhook: Finder not found for user ${userId}`);\n          }\n        } else {\n          console.log(`Flutterwave webhook: Transaction ${tx_ref} already processed`);\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('Flutterwave webhook error:', error);\n      res.status(500).send('Error processing Flutterwave webhook');\n    }\n  });\n\n\n  // --- Client Contracts ---\n  // Client-specific contracts endpoint\n  app.get(\"/api/client/contracts\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view contracts\" });\n      }\n\n      const contracts = await storage.getContractsByClientId(req.user.userId);\n      res.json(contracts);\n    } catch (error) {\n      console.error('Failed to fetch client contracts:', error);\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  // Get specific contract details for client\n  app.get(\"/api/client/contracts/:contractId\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can view contract details\" });\n      }\n\n      const { contractId } = req.params;\n      const contracts = await storage.getContractsByClientId(req.user.userId);\n      const contract = contracts.find(c => c.id === contractId);\n\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found or access denied\" });\n      }\n\n      res.json(contract);\n    } catch (error) {\n      console.error('Failed to fetch contract details:', error);\n      res.status(500).json({ message: \"Failed to fetch contract details\" });\n    }\n  });\n\n  // Contract routes\n  app.get(\"/api/contracts/my\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      let contracts;\n      if (req.user.role === 'client') {\n        contracts = await storage.getContractsByClientId(req.user.userId);\n      } else if (req.user.role === 'finder') {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder profile not found\" });\n        }\n        contracts = await storage.getContractsByFinderId(finder.id);\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  app.post(\"/api/contracts/:id/complete\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const contract = await storage.getContract(id);\n\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n\n      // Only the finder can mark as complete\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder || contract.finderId !== finder.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.updateContract(id, {\n        escrowStatus: 'completed',\n        isCompleted: true,\n        completedAt: new Date()\n      });\n\n      res.json({ message: \"Contract marked as complete\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to complete contract\" });\n    }\n  });\n\n  app.post(\"/api/contracts/:id/release-payment\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const contract = await storage.getContract(id);\n\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n\n      // Only the client can release payment\n      if (contract.clientId !== req.user.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Check if already released\n      if (contract.escrowStatus === 'released') {\n        return res.status(400).json({ message: \"Payment has already been released\" });\n      }\n\n      await storage.updateContract(id, { escrowStatus: 'released' });\n\n      // Release funds to finder's available balance\n      await storage.releaseFundsToFinder(contract.finderId, contract.amount.toString());\n\n      res.json({ message: \"Payment released successfully\" });\n    } catch (error) {\n      console.error('Release payment error:', error);\n      res.status(500).json({ message: \"Failed to release payment\" });\n    }\n  });\n\n  // --- Review Routes ---\n  app.post(\"/api/reviews\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can leave reviews\" });\n      }\n\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        clientId: req.user.userId\n      });\n\n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to create review\", error: error.message });\n    }\n  });\n\n  // --- Findertoken Routes ---\n  app.get(\"/api/findertokens/balance\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders have findertoken balances\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const findertokenBalance = await storage.getFindertokenBalance(finder.id);\n      res.json(findertokenBalance || { balance: 0 });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch findertoken balance\" });\n    }\n  });\n\n  app.get(\"/api/transactions/my\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can view transactions\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const transactions = await storage.getTransactionsByFinderId(finder.id);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // --- Public Categories ---\n  // Public categories endpoint for forms\n  app.get(\"/api/categories\", async (req: Request, res: Response) => {\n    try {\n      const categories = await storage.getActiveCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      res.status(500).json({ message: 'Failed to fetch categories' });\n    }\n  });\n\n  // --- Admin Routes ---\n  app.get(\"/api/admin/finder-profile/:userId\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const finder = await storage.getFinderByUserId(userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder not found\" });\n      }\n\n      const user = await storage.getUser(userId);\n      res.json({ ...finder, user });\n    } catch (error) {\n      console.error('Failed to fetch finder profile:', error);\n      res.status(500).json({ message: \"Failed to fetch finder profile\" });\n    }\n  });\n\n  // Get finder profile by name slug (for name-based URLs)\n  app.get(\"/api/admin/finder-profile/by-slug/:nameSlug\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { nameSlug } = req.params;\n\n      // Extract the ID part from the name slug (last 8 characters)\n      const match = nameSlug.match(/([a-f0-9]{8})$/);\n      if (!match) {\n        return res.status(400).json({ message: \"Invalid name slug format\" });\n      }\n\n      const idPrefix = match[1];\n\n      // Get all users and find the one with matching ID prefix\n      const users = await storage.getAllUsers();\n      const user = users.find(u => u.id.startsWith(idPrefix));\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get the finder profile for this user\n      const finder = await storage.getFinderByUserId(user.id);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder not found\" });\n      }\n\n      // Remove password from user data\n      const { password, ...userWithoutPassword } = user;\n      res.json({ ...finder, user: userWithoutPassword });\n    } catch (error) {\n      console.error('Error fetching finder profile by slug:', error);\n      res.status(500).json({ message: \"Failed to fetch finder profile\" });\n    }\n  });\n\n  app.get(\"/api/admin/finds\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const finds = await storage.getAllFinds();\n      res.json(finds);\n    } catch (error) {\n      console.error('Failed to fetch admin finds:', error);\n      res.status(500).json({ message: \"Failed to fetch finds\" });\n    }\n  });\n\n  app.get(\"/api/admin/proposals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const proposals = await storage.getAllProposals();\n      res.json(proposals);\n    } catch (error) {\n      console.error('Failed to fetch admin proposals:', error);\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(user => {\n        const { password, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n      });\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get specific user by ID (for admin profile viewing)\n  app.get(\"/api/admin/users/:userId\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get user by name slug (for name-based URLs)\n  app.get(\"/api/admin/users/by-slug/:nameSlug\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { nameSlug } = req.params;\n\n      // Extract the ID part from the name slug (last 8 characters)\n      const match = nameSlug.match(/([a-f0-9]{8})$/);\n      if (!match) {\n        return res.status(400).json({ message: \"Invalid name slug format\" });\n      }\n\n      const idPrefix = match[1];\n\n      // Get all users and find the one with matching ID prefix\n      const users = await storage.getAllUsers();\n      const user = users.find(u => u.id.startsWith(idPrefix));\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Error fetching user by slug:', error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/ban\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason || typeof reason !== 'string' || !reason.trim()) {\n        return res.status(400).json({ message: \"Ban reason is required\" });\n      }\n\n      const user = await storage.updateUser(id, { isBanned: true });\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User banned successfully\", user: { ...user, password: undefined } });\n    } catch (error) {\n      console.error('Ban user error:', error);\n      res.status(500).json({ message: \"Failed to ban user\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/unban\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const user = await storage.updateUser(id, { isBanned: false });\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User unbanned successfully\", user: { ...user, password: undefined } });\n    } catch (error) {\n      console.error('Unban user error:', error);\n      res.status(500).json({ message: \"Failed to unban user\" });\n    }\n  });\n\n  app.get(\"/api/admin/settings/:key\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { key } = req.params;\n      const setting = await storage.getAdminSetting(key);\n      res.json(setting);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch setting\" });\n    }\n  });\n\n  app.post(\"/api/admin/settings\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { key, value } = req.body;\n      const setting = await storage.setAdminSetting(key, value);\n      res.json(setting);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update setting\" });\n    }\n  });\n\n  // File upload routes for messaging\n  app.post(\"/api/messages/upload\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error('Failed to get upload URL:', error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.post(\"/api/messages/attach\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { fileUrl, fileName } = req.body;\n\n      if (!fileUrl || !fileName) {\n        return res.status(400).json({ message: \"File URL and name are required\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        fileUrl,\n        {\n          owner: req.user.id,\n          visibility: \"private\", // Message attachments are private\n        }\n      );\n\n      res.json({\n        objectPath,\n        fileName,\n        success: true\n      });\n    } catch (error) {\n      console.error('Failed to set file ACL:', error);\n      res.status(500).json({ message: \"Failed to process file attachment\" });\n    }\n  });\n\n  // Serve private message attachments\n  app.get(\"/objects/:objectPath(*)\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n\n      // Check if user can access this file\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: req.user.id,\n        requestedPermission: ObjectPermission.READ,\n      });\n\n      if (!canAccess) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing file:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n      return res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Upload endpoint for messages (duplicate - already defined above)\n  // app.post(\"/api/messages/upload\", authenticateToken, async (req: AuthenticatedRequest, res) => { ... });\n\n  // Process attachment after upload (duplicate - already defined above)\n  // app.post(\"/api/messages/attach\", authenticateToken, async (req: AuthenticatedRequest, res) => { ... });\n\n  // --- Messaging Routes ---\n  // Only clients can initiate conversations\n  app.post(\"/api/messages/conversations\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: \"Only clients can initiate conversations\" });\n      }\n\n      const { proposalId } = req.body;\n      const proposal = await storage.getProposal(proposalId);\n\n      if (!proposal) {\n        return res.status(404).json({ message: \"Proposal not found\" });\n      }\n\n      // Check if conversation already exists\n      const existingConversation = await storage.getConversation(req.user.userId, proposalId);\n      if (existingConversation) {\n        return res.json(existingConversation);\n      }\n\n      // Create new conversation\n      const conversation = await storage.createConversation({\n        clientId: req.user.userId,\n        finderId: proposal.finderId,\n        proposalId: proposalId\n      });\n\n      res.json(conversation);\n    } catch (error) {\n      console.error('Create conversation error:', error);\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  // Get conversations for logged-in user (client or finder)\n  app.get(\"/api/messages/conversations\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      let conversations;\n\n      if (req.user.role === 'client') {\n        conversations = await storage.getConversationsByClientId(req.user.userId);\n      } else if (req.user.role === 'finder') {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder profile not found\" });\n        }\n        conversations = await storage.getConversationsByFinderId(finder.id);\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(conversations);\n    } catch (error) {\n      console.error('Get conversations error:', error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // Get a specific conversation by ID\n  app.get(\"/api/messages/conversations/:conversationId\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { conversationId } = req.params;\n\n      const conversation = await storage.getConversationById(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      // TODO: Add permission check to ensure user is part of the conversation\n\n      res.json(conversation);\n    } catch (error) {\n      console.error('Get conversation error:', error);\n      res.status(500).json({ message: \"Failed to fetch conversation\" });\n    }\n  });\n\n  // Get messages for a conversation\n  app.get(\"/api/messages/conversations/:conversationId/messages\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { conversationId } = req.params;\n\n      // Prevent caching of messages\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n\n      // TODO: Add permission check to ensure user is part of the conversation\n      const messages = await storage.getMessages(conversationId);\n\n      // Mark messages as read for the current user\n      await storage.markMessagesAsRead(conversationId, req.user.userId);\n\n      res.json(messages);\n    } catch (error) {\n      console.error('Get messages error:', error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Send a message\n  app.post(\"/api/messages/conversations/:conversationId/messages\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { conversationId } = req.params;\n      const { content, attachmentPaths, attachmentNames, quotedMessageId } = req.body;\n\n      if ((!content || content.trim().length === 0) && (!attachmentPaths || attachmentPaths.length === 0)) {\n        return res.status(400).json({ message: \"Message content or attachments are required\" });\n      }\n\n      // Get conversation details for email notification\n      const conversation = await storage.getConversationById(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      const message = await storage.createMessage({\n        conversationId,\n        senderId: req.user.userId,\n        content: content ? content.trim() : '',\n        attachmentPaths: attachmentPaths || [],\n        attachmentNames: attachmentNames || [],\n        quotedMessageId,\n      });\n\n      // Send email notification to the recipient\n      try {\n        const senderUser = await storage.getUser(req.user.userId);\n        const proposal = await storage.getProposal(conversation.proposalId);\n        const request = proposal ? await storage.getFind(proposal.findId) : null;\n\n        if (senderUser && request) {\n          // Determine recipient based on sender role\n          let recipientUserId: string;\n          if (req.user.role === 'client') {\n            // Client is sending message to finder\n            const finder = await storage.getFinder(conversation.finderId);\n            if (finder) {\n              recipientUserId = finder.userId;\n              const finderUser = await storage.getUser(recipientUserId);\n              if (finderUser) {\n                await emailService.notifyFinderNewMessage(\n                  finderUser.email,\n                  `${senderUser.firstName} ${senderUser.lastName}`,\n                  request.title\n                );\n              }\n            }\n          } else if (req.user.role === 'finder') {\n            // Finder is sending message to client\n            recipientUserId = conversation.clientId;\n            const clientUser = await storage.getUser(recipientUserId);\n            if (clientUser) {\n              await emailService.notifyClientNewMessage(\n                clientUser.email,\n                `${senderUser.firstName} ${senderUser.lastName}`,\n                request.title\n              );\n            }\n          }\n        }\n      } catch (emailError) {\n        console.error('Failed to send message notification email:', emailError);\n      }\n\n      res.json(message);\n    } catch (error) {\n      console.error('Send message error:', error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get finder profile by ID\n  app.get(\"/api/finders/:finderId/profile\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { finderId } = req.params;\n\n      const finderProfile = await storage.getFinderProfile(finderId);\n\n      if (!finderProfile) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      res.json(finderProfile);\n    } catch (error) {\n      console.error('Get finder profile error:', error);\n      res.status(500).json({ message: \"Failed to fetch finder profile\" });\n    }\n  });\n\n  // --- Financial Dashboard ---\n  app.get(\"/api/admin/transactions\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all transactions with user details\n      const transactions = await storage.getAllTransactionsWithUsers();\n      res.json(transactions);\n    } catch (error) {\n      console.error('Failed to fetch admin transactions:', error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/admin/contracts\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all contracts with client and finder details\n      const contracts = await storage.getAllContractsWithUsers();\n      res.json(contracts);\n    } catch (error) {\n      console.error('Failed to fetch admin contracts:', error);\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  // --- Admin Management Routes ---\n  app.get(\"/api/admin/categories\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/admin/categories\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { name, description } = req.body;\n      const category = await storage.createCategory({\n        name,\n        description,\n        isActive: true\n      });\n\n      res.status(201).json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to create category\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/categories/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const category = await storage.updateCategory(id, req.body);\n\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n\n      res.json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update category\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteCategory(id);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to delete category\", error: error.message });\n    }\n  });\n\n  // --- Token Package Admin Routes ---\n  app.get(\"/api/admin/token-packages\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const tokenPackages = await storage.getAllTokenPackages();\n      res.json(tokenPackages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch token packages\" });\n    }\n  });\n\n  app.post(\"/api/admin/token-packages\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { name, description, price, tokenCount, isActive = true } = req.body;\n\n      // Input validation\n      if (!name || !price || !tokenCount || price <= 0 || tokenCount <= 0) {\n        return res.status(400).json({ message: \"Name, price, and token count are required and must be positive\" });\n      }\n\n      const tokenPackage = await storage.createTokenPackage({\n        name,\n        description,\n        price: price.toString(),\n        tokenCount,\n        isActive\n      });\n\n      res.status(201).json(tokenPackage);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to create token package\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/token-packages/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { name, description, price, tokenCount, isActive } = req.body;\n\n      // Input validation\n      if (price && price <= 0) {\n        return res.status(400).json({ message: \"Price must be positive\" });\n      }\n      if (tokenCount && tokenCount <= 0) {\n        return res.status(400).json({ message: \"Token count must be positive\" });\n      }\n\n      const updates: any = {};\n      if (name) updates.name = name;\n      if (description !== undefined) updates.description = description;\n      if (price) updates.price = price.toString();\n      if (tokenCount) updates.tokenCount = tokenCount;\n      if (isActive !== undefined) updates.isActive = isActive;\n\n      const tokenPackage = await storage.updateTokenPackage(id, updates);\n\n      if (!tokenPackage) {\n        return res.status(404).json({ message: \"Token package not found\" });\n      }\n\n      res.json(tokenPackage);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update token package\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/token-packages/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const success = await storage.deleteTokenPackage(id);\n\n      if (!success) {\n        return res.status(404).json({ message: \"Token package not found\" });\n      }\n\n      res.json({ message: \"Token package deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to delete token package\", error: error.message });\n    }\n  });\n\n  // --- Public Token Packages ---\n  // Public active token packages endpoint (for finders to purchase)\n  app.get(\"/api/token-packages\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      // Only return active packages for finders to purchase\n      const activePackages = await storage.getActiveTokenPackages();\n      res.json(activePackages);\n    } catch (error) {\n      console.error('Error fetching active token packages:', error);\n      res.status(500).json({ message: \"Failed to fetch token packages\" });\n    }\n  });\n\n  // --- Token Purchase Payment Routes ---\n  app.post(\"/api/payments/initialize-token-purchase\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { packageId } = req.body;\n\n      if (!packageId) {\n        return res.status(400).json({ message: \"Package ID is required\" });\n      }\n\n      // Get the token package\n      const tokenPackage = await storage.getTokenPackage(packageId);\n      if (!tokenPackage || !tokenPackage.isActive) {\n        return res.status(404).json({ message: \"Token package not found or inactive\" });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Initialize payment with Paystack\n      const paymentService = new FlutterwaveService();\n      const reference = paymentService.generateTransactionReference(user.id);\n\n      const paymentData = await paymentService.initializeTransaction(\n        user.email,\n        parseFloat(tokenPackage.price),\n        reference,\n        {\n          packageId: tokenPackage.id,\n          tokenCount: tokenPackage.tokenCount,\n          userId: user.id,\n          type: 'token_purchase'\n        }\n      );\n\n      res.json({\n        success: true,\n        paymentUrl: paymentData.authorization_url,\n        reference: reference,\n        amount: tokenPackage.price,\n        tokenCount: tokenPackage.tokenCount\n      });\n    } catch (error: any) {\n      console.error('Payment initialization error:', error);\n      res.status(500).json({ message: \"Failed to initialize payment\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/payments/verify-token-purchase\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { reference } = req.body;\n\n      if (!reference) {\n        return res.status(400).json({ message: \"Payment reference is required\" });\n      }\n\n      // Verify payment with Paystack\n      const paymentService = new FlutterwaveService();\n      const verification = await paymentService.verifyTransaction(reference);\n\n      if (verification.status === 'success') {\n        const metadata = verification.metadata;\n        const finder = await storage.getFinderByUserId(req.user.userId);\n\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder profile not found\" });\n        }\n\n        // Add tokens to finder balance\n        await storage.updateFinderTokenBalance(finder.id, metadata.tokenCount);\n\n        // Create transaction record\n        await storage.createTransaction({\n          userId: req.user.userId,\n          finderId: finder.id,\n          amount: metadata.tokenCount,\n          type: 'findertoken_purchase',\n          description: `Purchased ${metadata.tokenCount} findertokens`,\n          reference: reference\n        });\n\n        res.json({\n          success: true,\n          message: \"Payment verified and tokens added to your account\",\n          tokensAdded: metadata.tokenCount\n        });\n      } else {\n        res.status(400).json({ message: \"Payment verification failed\" });\n      }\n    } catch (error: any) {\n      console.error('Payment verification error:', error);\n      res.status(500).json({ message: \"Failed to verify payment\", error: error.message });\n    }\n  });\n\n  // --- Finder Levels Admin Routes ---\n  app.get(\"/api/admin/finder-levels\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const levels = await storage.getFinderLevels();\n      res.json(levels);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch finder levels\" });\n    }\n  });\n\n  app.post(\"/api/admin/finder-levels\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      console.log('Creating finder level with data:', req.body);\n      const level = await storage.createFinderLevel(req.body);\n      console.log('Created finder level:', level);\n      res.status(201).json(level);\n    } catch (error: any) {\n      console.error('Error creating finder level:', error);\n      res.status(400).json({ message: \"Failed to create finder level\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/finder-levels/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const level = await storage.updateFinderLevel(id, req.body);\n\n      if (!level) {\n        return res.status(404).json({ message: \"Finder level not found\" });\n      }\n\n      res.json(level);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update finder level\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/finder-levels/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteFinderLevel(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Finder level not found\" });\n      }\n\n      res.json({ message: \"Finder level deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to delete finder level\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/calculate-finder-level/:finderId\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { finderId } = req.params;\n      const calculatedLevel = await storage.calculateFinderLevel(finderId);\n\n      if (!calculatedLevel) {\n        return res.status(404).json({ message: \"Could not calculate level for this finder\" });\n      }\n\n      // Auto-assign the calculated level\n      await storage.assignFinderLevel(finderId, calculatedLevel.id);\n\n      res.json({ message: \"Finder level calculated and assigned\", level: calculatedLevel });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to calculate finder level\", error: error.message });\n    }\n  });\n\n  // --- User Management Routes ---\n  app.post(\"/api/admin/users/:id/ban\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason) {\n        return res.status(400).json({ message: \"Ban reason is required\" });\n      }\n\n      const user = await storage.banUser(id, reason);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User banned successfully\", user });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to ban user\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/unban\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const user = await storage.unbanUser(id);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User unbanned successfully\", user });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to unban user\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/verify\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const user = await storage.verifyUser(id);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User verified successfully\", user });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to verify user\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:id/unverify\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const user = await storage.unverifyUser(id);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User unverified successfully\", user });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to unverify user\", error: error.message });\n    }\n  });\n\n  // --- Contact Settings Routes ---\n  app.get(\"/api/admin/contact-settings\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const settings = await storage.getContactSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching contact settings:', error);\n      res.status(500).json({ message: \"Failed to fetch contact settings\" });\n    }\n  });\n\n  app.put(\"/api/admin/contact-settings\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const settings = await storage.updateContactSettings(req.body);\n      res.json({ message: \"Contact settings updated successfully\", settings });\n    } catch (error) {\n      console.error('Error updating contact settings:', error);\n      res.status(500).json({ message: \"Failed to update contact settings\" });\n    }\n  });\n\n  // Public contact settings endpoint\n  app.get(\"/api/contact-settings\", async (req: Request, res: Response) => {\n    try {\n      const settings = await storage.getContactSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching public contact settings:', error);\n      res.status(500).json({ message: \"Failed to fetch contact settings\" });\n    }\n  });\n\n  // --- Admin Settings Routes ---\n  app.get(\"/api/admin/settings\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const proposalTokenCost = await storage.getAdminSetting('proposal_token_cost');\n      const findertokenPrice = await storage.getAdminSetting('findertoken_price');\n      const platformFeePercentage = await storage.getAdminSetting('platform_fee_percentage');\n      const clientPaymentChargePercentage = await storage.getAdminSetting('client_payment_charge_percentage');\n      const finderEarningsChargePercentage = await storage.getAdminSetting('finder_earnings_charge_percentage');\n      const highBudgetThreshold = await storage.getAdminSetting('high_budget_threshold');\n      const highBudgetTokenCost = await storage.getAdminSetting('high_budget_token_cost');\n\n      res.json({\n        proposalTokenCost: proposalTokenCost?.value || '1',\n        findertokenPrice: findertokenPrice?.value || '100', // Default 100 per token in kobo/cents\n        platformFeePercentage: platformFeePercentage?.value || '10',\n        clientPaymentChargePercentage: clientPaymentChargePercentage?.value || '2.5',\n        finderEarningsChargePercentage: finderEarningsChargePercentage?.value || '5',\n        highBudgetThreshold: highBudgetThreshold?.value || '100000',\n        highBudgetTokenCost: highBudgetTokenCost?.value || '5'\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin settings\" });\n    }\n  });\n\n  app.put(\"/api/admin/settings\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const {\n        proposalTokenCost,\n        findertokenPrice,\n        platformFeePercentage,\n        clientPaymentChargePercentage,\n        finderEarningsChargePercentage,\n        highBudgetThreshold,\n        highBudgetTokenCost\n      } = req.body;\n\n      if (proposalTokenCost !== undefined) {\n        await storage.setAdminSetting('proposal_token_cost', proposalTokenCost.toString());\n      }\n\n      if (findertokenPrice !== undefined) {\n        await storage.setAdminSetting('findertoken_price', findertokenPrice.toString());\n      }\n\n      if (platformFeePercentage !== undefined) {\n        await storage.setAdminSetting('platform_fee_percentage', platformFeePercentage.toString());\n      }\n\n      if (clientPaymentChargePercentage !== undefined) {\n        await storage.setAdminSetting('client_payment_charge_percentage', clientPaymentChargePercentage.toString());\n      }\n\n      if (finderEarningsChargePercentage !== undefined) {\n        await storage.setAdminSetting('finder_earnings_charge_percentage', finderEarningsChargePercentage.toString());\n      }\n\n      if (highBudgetThreshold !== undefined) {\n        await storage.setAdminSetting('high_budget_threshold', highBudgetThreshold.toString());\n      }\n\n      if (highBudgetTokenCost !== undefined) {\n        await storage.setAdminSetting('high_budget_token_cost', highBudgetTokenCost.toString());\n      }\n\n      res.json({ message: \"Settings updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update settings\", error: error.message });\n    }\n  });\n\n  // --- Token charge endpoints --- Admin can charge finders tokens\n  app.post(\"/api/admin/charge-tokens\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { finderId, amount, reason } = req.body;\n\n      if (!finderId || !amount || !reason) {\n        return res.status(400).json({ message:\"Finder ID, amount, and reason are required\" });\n      }\n\n      // Get finder to verify they exist\n      const finder = await storage.getFinder(finderId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder not found\" });\n      }\n\n      // Charge tokens from finder's balance\n      const success = await storage.chargeFinderTokens(finderId, Math.abs(amount), reason, req.user.userId);\n\n      if (!success) {\n        return res.status(400).json({ message: \"Insufficient token balance\" });\n      }\n\n      res.json({ message: \"Tokens charged successfully\" });\n    } catch (error) {\n      console.error('Charge tokens error:', error);\n      res.status(500).json({ message: \"Failed to charge tokens\" });\n    }\n  });\n\n  // Monthly token distribution - Admin can distribute monthly tokens to all finders\n  app.post(\"/api/admin/distribute-monthly-tokens\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const result = await storage.distributeMonthlyTokens();\n\n      res.json({\n        message: \"Monthly token distribution completed\",\n        distributed: result.distributed,\n        alreadyDistributed: result.alreadyDistributed\n      });\n    } catch (error) {\n      console.error('Monthly token distribution error:', error);\n      res.status(500).json({ message: \"Failed to distribute monthly tokens\" });\n    }\n  });\n\n  // Grant tokens to a specific user (finder or client)\n  app.post(\"/api/admin/grant-tokens\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId, userRole, amount, reason, finderId } = req.body;\n\n      // Support both old API (finderId) and new API (userId + userRole)\n      if (finderId && !userId) {\n        // Legacy support for existing calls\n        if (!finderId || !amount || !reason) {\n          return res.status(400).json({ message: \"Finder ID, amount, and reason are required\" });\n        }\n\n        if (amount <= 0) {\n          return res.status(400).json({ message: \"Amount must be positive\" });\n        }\n\n        // Verify finder exists\n        const finder = await storage.getFinder(finderId);\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder not found\" });\n        }\n\n        // Grant tokens to finder\n        const grant = await storage.grantTokensToFinder(finderId, amount, reason, req.user.userId);\n\n        return res.json({\n          message: \"Tokens granted successfully\",\n          grant\n        });\n      }\n\n      // New API for both finders and clients\n      if (!userId || !userRole || !amount || !reason) {\n        return res.status(400).json({ message: \"User ID, user role, amount, and reason are required\" });\n      }\n\n      if (amount <= 0) {\n        return res.status(400).json({ message: \"Amount must be positive\" });\n      }\n\n      if (!['finder', 'client'].includes(userRole)) {\n        return res.status(400).json({ message: \"User role must be 'finder' or 'client'\" });\n      }\n\n      // Verify user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== userRole) {\n        return res.status(400).json({ message: \"User role mismatch\" });\n      }\n\n      let grant;\n      if (userRole === 'finder') {\n        // Grant tokens to finder\n        const finder = await storage.getFinderByUserId(userId);\n        if (!finder) {\n          return res.status(404).json({ message: \"Finder profile not found\" });\n        }\n        grant = await storage.grantTokensToFinder(finder.id, amount, reason, req.user.userId);\n      } else {\n        // Grant tokens to client\n        grant = await storage.grantTokensToClient(userId, amount, reason, req.user.userId);\n      }\n\n      res.json({\n        message: `Tokens granted successfully to ${userRole}`,\n        grant\n      });\n    } catch (error) {\n      console.error('Grant tokens error:', error);\n      res.status(500).json({ message: \"Failed to grant tokens\" });\n    }\n  });\n\n  // Get tokens grants history\n  app.get(\"/api/admin/token-grants\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId, finderId } = req.query;\n      // Support both userId (new) and finderId (legacy) parameters\n      const queryUserId = userId || finderId;\n      const grants = await storage.getTokenGrants(queryUserId as string);\n\n      res.json(grants);\n    } catch (error) {\n      console.error('Get token grants error:', error);\n      res.status(500).json({ message: \"Failed to fetch token grants\" });\n    }\n  });\n\n  // Get monthly distribution history\n  app.get(\"/api/admin/monthly-distributions\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const now = new Date();\n      const month = parseInt(req.query.month as string) || (now.getMonth() + 1);\n      const year = parseInt(req.query.year as string) || now.getFullYear();\n\n      const distributions = await storage.getMonthlyDistributions(month, year);\n\n      res.json(distributions);\n    } catch (error) {\n      console.error('Get monthly distributions error:', error);\n      res.status(500).json({ message: \"Failed to fetch monthly distributions\" });\n    }\n  });\n\n  // Sync token balances - Admin only\n  app.post(\"/api/admin/sync-token-balances\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.syncFinderTokenBalances();\n\n      res.json({ message: \"Token balances synchronized successfully\" });\n    } catch (error) {\n      console.error('Token balance sync error:', error);\n      res.status(500).json({ message: \"Failed to sync token balances\" });\n    }\n  });\n\n  // Get pricing info for token purchases\n  app.get(\"/api/tokens/pricing\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const findertokenPrice = await storage.getAdminSetting('findertoken_price');\n      const pricePerToken = parseFloat(findertokenPrice?.value || '100'); // Default 100 kobo per token\n\n      res.json({\n        pricePerToken, // in kobo/cents\n        currency: 'NGN'\n      });\n    } catch (error) {\n      console.error('Get pricing error:', error);\n      res.status(500).json({ message: \"Failed to fetch pricing\" });\n    }\n  });\n\n  // --- Withdrawal management routes ---\n  app.get(\"/api/admin/withdrawals\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const withdrawals = await storage.getWithdrawalRequests();\n      res.json(withdrawals);\n    } catch (error) {\n      console.error('Withdrawals API error:', error);\n      res.status(500).json({ message: \"Failed to fetch withdrawal requests\", error: (error as Error).message });\n    }\n  });\n\n  app.put(\"/api/admin/withdrawals/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { status, adminNotes } = req.body;\n\n      if (!['processing', 'approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const withdrawal = await storage.updateWithdrawalRequest(id, {\n        status,\n        adminNotes,\n        processedBy: req.user.userId\n      });\n\n      if (!withdrawal) {\n        return res.status(404).json({ message: \"Withdrawal request not found\" });\n      }\n\n      // If approved, deduct from finder balance - but check balance first\n      if (status === 'approved') {\n        const finder = await storage.getFinder(withdrawal.finderId);\n        const currentBalance = parseFloat(finder?.availableBalance || '0');\n        const withdrawalAmount = parseFloat(withdrawal.amount);\n\n        if (finder && currentBalance >= withdrawalAmount) {\n          // Deduct the withdrawal amount from available balance\n          const newBalance = (currentBalance - withdrawalAmount).toFixed(2);\n          await db.update(finders)\n            .set({ availableBalance: newBalance })\n            .where(eq(finders.id, withdrawal.finderId));\n        } else {\n          return res.status(400).json({\n            message: \"Cannot approve withdrawal: Insufficient finder balance\",\n            availableBalance: finder?.availableBalance,\n            requestedAmount: withdrawal.amount\n          });\n        }\n      }\n\n      res.json({ message: \"Withdrawal request updated successfully\", withdrawal });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update withdrawal request\", error: error.message });\n    }\n  });\n\n  // Flutterwave Transfer Webhook for withdrawal status updates\n  app.post(\"/api/payments/flutterwave/transfer/webhook\", async (req: Request, res: Response) => {\n    try {\n      const signature = req.headers['verif-hash'] as string;\n      const payload = JSON.stringify(req.body);\n\n      // Verify webhook signature\n      const flutterwaveService = new FlutterwaveService();\n      if (!flutterwaveService.verifyWebhookSignature(payload, signature)) {\n        console.log('Invalid Flutterwave webhook signature');\n        return res.status(400).json({ error: 'Invalid signature' });\n      }\n\n      const { WithdrawalService } = await import('./withdrawalService');\n      const withdrawalService = new WithdrawalService();\n      \n      await withdrawalService.handleTransferWebhook(req.body.data);\n\n      res.json({ status: 'success' });\n    } catch (error: any) {\n      console.error('Flutterwave transfer webhook error:', error);\n      res.status(500).json({ error: 'Webhook processing failed' });\n    }\n  });\n\n  // Finder withdrawal request\n  app.post(\"/api/finder/withdraw\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Only finders can request withdrawals\" });\n      }\n\n      const { amount, paymentMethod, paymentDetails } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid withdrawal amount\" });\n      }\n\n      if (!paymentMethod || !paymentDetails) {\n        return res.status(400).json({ message: \"Payment method and details are required\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const availableBalance = parseFloat(finder.availableBalance || '0');\n      const requestedAmount = parseFloat(amount);\n\n      if (requestedAmount > availableBalance) {\n        return res.status(400).json({\n          message: \"Insufficient balance\",\n          availableBalance: availableBalance,\n          requestedAmount: requestedAmount\n        });\n      }\n\n      // Generate unique request ID\n      const requestId = `WR-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n\n      const withdrawalRequest = await storage.createWithdrawalRequest({\n        finderId: finder.id,\n        amount: amount.toString(),\n        status: 'pending',\n        paymentMethod,\n        paymentDetails: typeof paymentDetails === 'string' ? paymentDetails : JSON.stringify(paymentDetails),\n        requestId,\n        requestedAt: new Date()\n      });\n\n      // Deduct the amount from available balance immediately\n      await storage.updateFinder(finder.id, {\n        availableBalance: (availableBalance - requestedAmount).toString()\n      });\n\n      // Auto-process withdrawal with Flutterwave\n      try {\n        const { WithdrawalService } = await import('./withdrawalService');\n        const withdrawalService = new WithdrawalService();\n\n        const processingResult = await withdrawalService.processWithdrawal(withdrawalRequest.id);\n\n        if (processingResult.success) {\n          res.json({\n            message: \"Withdrawal request submitted and processed successfully\",\n            requestId,\n            withdrawalId: withdrawalRequest.id,\n            status: \"processing\",\n            transferId: processingResult.transferId,\n            note: \"Your withdrawal is being processed via Flutterwave. You'll receive an update shortly.\"\n          });\n        } else {\n          // If auto-processing fails, keep as pending for manual review\n          res.json({\n            message: \"Withdrawal request submitted for manual review\",\n            requestId,\n            withdrawalId: withdrawalRequest.id,\n            status: \"pending\",\n            note: \"Your withdrawal will be reviewed and processed by our team within 24 hours.\"\n          });\n        }\n      } catch (error) {\n        console.error('Error auto-processing withdrawal:', error);\n        // If auto-processing fails, still return success for the request\n        res.json({\n          message: \"Withdrawal request submitted for manual review\",\n          requestId,\n          withdrawalId: withdrawalRequest.id,\n          status: \"pending\",\n          note: \"Your withdrawal will be reviewed and processed by our team within 24 hours.\"\n        });\n      }\n\n    } catch (error: any) {\n      console.error('Error creating withdrawal request:', error);\n      res.status(500).json({ message: \"Failed to create withdrawal request\" });\n    }\n  });\n\n  // Get finder pending earnings\n  app.get('/api/finder/pending-earnings', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: \"Finder profile not found\" });\n      }\n\n      const pendingEarnings = await storage.getFinderPendingEarnings(finder.id);\n\n      // Get admin fee to calculate net earnings\n      const finderEarningsCharge = await storage.getAdminSetting('finder_earnings_charge_percentage');\n      const feePercentage = parseFloat(finderEarningsCharge?.value || '5');\n\n      const grossAmount = pendingEarnings.pendingAmount;\n      const feeAmount = grossAmount * (feePercentage / 100);\n      const netAmount = grossAmount - feeAmount;\n\n      res.json({\n        grossAmount,\n        feeAmount,\n        netAmount,\n        feePercentage,\n        contractCount: pendingEarnings.contractCount\n      });\n    } catch (error) {\n      console.error('Error fetching pending earnings:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // --- Additional Finder Profile Management Routes ---\n  app.get('/api/finder/profile', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      // Get user information as well\n      const user = await storage.getUser(req.user.userId);\n\n      // Calculate completed jobs from contracts\n      const completedContracts = await storage.getCompletedContractsByFinder(finder.id);\n\n      res.json({\n        ...finder,\n        completedJobs: completedContracts.length,\n        user: user ? {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          isVerified: user.isVerified\n        } : null\n      });\n    } catch (error) {\n      console.error('Error fetching finder profile:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/finder/profile', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const updatedFinder = await storage.updateFinder(finder.id, req.body);\n      res.json(updatedFinder);\n    } catch (error) {\n      console.error('Error updating finder profile:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/finder/transactions', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const transactions = await storage.getTransactionsByFinderId(finder.id);\n      res.json(transactions);\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/finder/withdrawal-settings', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const settings = await storage.getWithdrawalSettings(finder.id);\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching withdrawal settings:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/finder/withdrawal-settings', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const settings = await storage.updateWithdrawalSettings(finder.id, req.body);\n      res.json(settings);\n    } catch (error) {\n      console.error('Error updating withdrawal settings:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/finder/withdrawals', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const withdrawals = await storage.getWithdrawalsByFinderId(finder.id);\n      res.json(withdrawals);\n    } catch (error) {\n      console.error('Error fetching withdrawals:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/finder/security-settings', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const settings = await storage.getSecuritySettings(finder.id);\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching security settings:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/finder/security-settings', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const settings = await storage.updateSecuritySettings(finder.id, req.body);\n      res.json(settings);\n    } catch (error) {\n      console.error('Error updating security settings:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n\n  // --- FAQ Categories Management Routes ---\n  app.get(\"/api/admin/faq-categories\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const categories = await storage.getFAQCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error('Failed to fetch FAQ categories:', error);\n      res.status(500).json({ message: \"Failed to fetch FAQ categories\" });\n    }\n  });\n\n  app.post(\"/api/admin/faq-categories\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { name, description, icon, color, sortOrder } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: \"Category name is required\" });\n      }\n\n      const category = await storage.createFAQCategory({\n        name,\n        description,\n        icon: icon || \"HelpCircle\",\n        color: color || \"bg-blue-100 text-blue-800\",\n        sortOrder: sortOrder || 0,\n        isActive: true\n      });\n\n      res.status(201).json(category);\n    } catch (error: any) {\n      console.error('Failed to create FAQ category:', error);\n      res.status(400).json({ message: \"Failed to create FAQ category\", error: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/faq-categories/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const category = await storage.updateFAQCategory(id, req.body);\n\n      if (!category) {\n        return res.status(404).json({ message: \"FAQ category not found\" });\n      }\n\n      res.json(category);\n    } catch (error: any) {\n      console.error('Failed to update FAQ category:', error);\n      res.status(400).json({ message: \"Failed to update FAQ category\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/faq-categories/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const success = await storage.deleteFAQCategory(id);\n\n      if (!success) {\n        return res.status(404).json({ message: \"FAQ category not found\" });\n      }\n\n      res.json({ message: \"FAQ category deleted successfully\" });\n    } catch (error: any) {\n      console.error('Failed to delete FAQ category:', error);\n      res.status(400).json({ message: \"Failed to delete FAQ category\", error: error.message });\n    }\n  });\n\n  // Public FAQ categories endpoint\n  app.get(\"/api/public/faq-categories\", async (req: Request, res: Response) => {\n    try {\n      const categories = await storage.getFAQCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error('Failed to fetch public FAQ categories:', error);\n      res.status(500).json({ message: \"Failed to fetch FAQ categories\" });\n    }\n  });\n\n  // --- Email system monitoring (Admin only) ---\n  app.get(\"/api/admin/email-status\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { emailQueue } = await import('./emailQueue'); // Assuming emailQueue is in './emailQueue'\n      const status = emailQueue.getQueueStatus();\n\n      // Check if logs directory exists and count recent emails\n      const fs = require('fs').promises;\n      const path = require('path');\n\n      let recentEmails = 0;\n      let failedEmails = 0;\n\n      try {\n        const emailsDir = path.join(process.cwd(), 'logs', 'emails');\n        const failedDir = path.join(process.cwd(), 'logs', 'failed-emails');\n\n        // Count recent emails (last 24 hours)\n        try {\n          const emailFiles = await fs.readdir(emailsDir);\n          const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\n\n          for (const file of emailFiles) {\n            const filePath = path.join(emailsDir, file);\n            const stats = await fs.stat(filePath);\n            if (stats.mtime.getTime() > oneDayAgo) {\n              recentEmails++;\n            }\n          }\n        } catch (e) {\n          // Directory doesn't exist yet\n        }\n\n        // Count failed emails\n        try {\n          const failedFiles = await fs.readdir(failedDir);\n          failedEmails = failedFiles.length;\n        } catch (e) {\n          // Directory doesn't exist yet\n        }\n\n      } catch (error) {\n        console.warn('Could not read email logs:', error);\n      }\n\n      res.json({\n        queue: status,\n        statistics: {\n          recentEmails,\n          failedEmails,\n        },\n        transportInfo: {\n          configured: !!(process.env.SMTP_HOST || process.env.GMAIL_USER),\n          type: process.env.SMTP_HOST ? 'SMTP' : process.env.GMAIL_USER ? 'Gmail' : 'Local/Development'\n        }\n      });\n    } catch (error) {\n      console.error('Email status error:', error);\n      res.status(500).json({ message: \"Failed to get email status\" });\n    }\n  });\n\n  // Test email endpoint (Admin only)\n  app.post(\"/api/admin/test-email\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { to, subject, message } = req.body;\n\n      if (!to || !subject || !message) {\n        return res.status(400).json({ message: \"To, subject, and message are required\" });\n      }\n\n      const { emailQueue } = await import('./emailQueue'); // Assuming emailQueue is in './emailQueue'\n\n      const emailId = await emailQueue.addToQueue({\n        to,\n        subject: subject || 'Test Email from FinderMeister',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2>Test Email</h2>\n            <p>${message}</p>\n            <p><small>Sent at: ${new Date().toISOString()}</small></p>\n            <p>Best regards,<br>FinderMeister Email System</p>\n          </div>\n        `\n      }, 'high');\n\n      res.json({\n        success: true,\n        message: \"Test email queued successfully\",\n        emailId\n      });\n    } catch (error) {\n      console.error('Test email error:', error);\n      res.status(500).json({ message: \"Failed to send test email\" });\n    }\n  });\n\n  // --- Object Storage API ---\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  // --- Blog Posts routes ---\n  app.get(\"/api/admin/blog-posts\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const posts = await storage.getBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetchblog posts\" });\n    }\n  });\n\n  app.post(\"/api/admin/blog-posts\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Add authorId to request body before validation\n      const userId = req.user.userId;\n\n      const requestWithAuthor = {\n        ...req.body,\n        authorId: userId\n      };\n\n      const blogPostData = insertBlogPostSchema.parse(requestWithAuthor);\n\n      const post = await storage.createBlogPost({\n        ...blogPostData,\n        publishedAt: blogPostData.isPublished ? new Date() : null\n      });\n\n      res.status(201).json(post);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to create blog post\", error: error.message });\n    }\n  });\n\n  // Get single blog post\n  app.get(\"/api/admin/blog-posts/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const post = await storage.getBlogPost(id);\n\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json(post);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to fetch blog post\", error: error.message });\n    }\n  });\n\n  // Update blog post\n  app.put(\"/api/admin/blog-posts/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const userId = req.user.userId;\n\n      const requestWithAuthor = {\n        ...req.body,\n        authorId: userId\n      };\n\n      const blogPostData = insertBlogPostSchema.parse(requestWithAuthor);\n\n      const post = await storage.updateBlogPost(id, {\n        ...blogPostData,\n        publishedAt: blogPostData.isPublished ? new Date() : null\n      });\n\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json(post);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to update blog post\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/blog-posts/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteBlogPost(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json({ message: \"Blog post deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to delete blog post\", error: error.message });\n    }\n  });\n\n  // Public blog post route (by slug)\n  app.get(\"/api/blog/:slug\", async (req: Request, res: Response) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPostBySlug(slug);\n\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      // Only return published posts for public access\n      if (!post.isPublished) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json(post);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to fetch blog post\", error: error.message });\n    }\n  });\n\n  // --- Auto-release endpoint ---\n  app.post(\"/api/orders/auto-release\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { autoReleaseService } = await import('./autoReleaseService'); // Assuming autoReleaseService is in './autoReleaseService'\n      const result = await autoReleaseService.manualRelease();\n\n      res.json({\n        message: `Auto-release process completed: ${(result as any).released || 0} contracts released`,\n        released: (result as any).released || 0\n      });\n    } catch (error: any) {\n      console.error('Auto-release error:', error);\n      res.status(500).json({ message: \"Failed to process auto-releases\" });\n    }\n  });\n\n  // Manual contract release endpoint\n  app.post(\"/api/admin/contracts/:contractId/manual-release\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { contractId } = req.params;\n      const { autoReleaseService } = await import('./autoReleaseService'); // Assuming autoReleaseService is in './autoReleaseService'\n\n      const result = await autoReleaseService.manualRelease(contractId);\n      res.json(result);\n    } catch (error) {\n      console.error('Manual release error:', error);\n      res.status(500).json({ message: error.message || \"Failed to release contract\" });\n    }\n  });\n\n  // --- Order submission routes ---\n  app.post('/api/orders/submit', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'finder') {\n        return res.status(403).json({ message: 'Access denied. Finder role required.' });\n      }\n\n      const finder = await storage.getFinderByUserId(req.user.userId);\n      if (!finder) {\n        return res.status(404).json({ message: 'Finder profile not found' });\n      }\n\n      const submissionData = insertOrderSubmissionSchema.parse({\n        ...req.body,\n        finderId: finder.id\n      });\n\n      const submission = await storage.createOrderSubmission(submissionData);\n\n      // Send email notification to client about order submission\n      try {\n        const contract = await storage.getContract(submissionData.contractId);\n        if (contract) {\n          const clientUser = await storage.getUser(contract.clientId);\n          const finderUser = await storage.getUser(req.user.userId);\n          const proposal = await storage.getProposal(contract.proposalId);\n          const request = proposal ? await storage.getFind(proposal.findId) : null;\n\n          if (clientUser && finderUser && request) {\n            await emailService.notifyClientOrderSubmission(\n              clientUser.email,\n              `${finderUser.firstName} ${finderUser.lastName}`,\n              request.title\n            );\n          }\n        }\n      } catch (emailError) {\n        console.error('Failed to send order submission notification email:', emailError);\n      }\n\n      res.status(201).json(submission);\n    } catch (error: any) {\n      console.error('Error submitting order:', error);\n      res.status(400).json({ message: 'Failed to submit order', error: error.message });\n    }\n  });\n\n  // Review order submission (PUT /api/orders/submission/:submissionId)\n  app.put('/api/orders/submission/:submissionId', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: 'Access denied. Client role required.' });\n      }\n\n      const { submissionId } = req.params;\n      const { status, clientFeedback } = req.body;\n\n      if (!status || !['accepted', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: 'Invalid status. Must be \"accepted\" or \"rejected\".' });\n      }\n\n      const submission = await storage.updateOrderSubmission(submissionId, {\n        status,\n        clientFeedback\n      });\n\n      if (!submission) {\n        return res.status(404).json({ message: 'Order submission not found' });\n      }\n\n      res.json(submission);\n    } catch (error: any) {\n      console.error('Error reviewing submission:', error);\n      res.status(400).json({ message: 'Failed to review submission', error: error.message });\n    }\n  });\n\n  app.get('/api/orders/contract/:contractId', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { contractId } = req.params;\n\n      const contractWithSubmission = await storage.getContractWithSubmission(contractId);\n      if (!contractWithSubmission) {\n        return res.status(404).json({ message: 'Contract not found' });\n      }\n\n      // Check if user has access to this contract\n      if (req.user.role === 'finder') {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder || contractWithSubmission.finderId !== finder.id) {\n          return res.status(403).json({ message: 'Access denied' });\n        }\n      } else if (req.user.role === 'client') {\n        if (contractWithSubmission.clientId !== req.user.userId) {\n          return res.status(403).json({ message: 'Access denied' });\n        }\n      } else if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      res.json(contractWithSubmission);\n    } catch (error: any) {\n      console.error('Error fetching contract with submission:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/orders/submission/:submissionId', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'client') {\n        return res.status(403).json({ message: 'Access denied. Client role required.' });\n      }\n\n      const { submissionId } = req.params;\n      const { status, clientFeedback } = req.body;\n\n      if (!status || !['accepted', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: 'Status must be \"accepted\" or \"rejected\"' });\n      }\n\n      const updatedSubmission = await storage.updateOrderSubmission(submissionId, {\n        status,\n        clientFeedback\n      });\n\n      if (!updatedSubmission) {\n        return res.status(404).json({ message: 'Submission not found' });\n      }\n\n      // Send email notification to finder about submission status\n      try {\n        const contract = await storage.getContract(updatedSubmission.contractId);\n        if (contract) {\n          const finder = await storage.getFinder(contract.finderId);\n          const finderUser = finder ? await storage.getUser(finder.userId) : null;\n          const clientUser = await storage.getUser(req.user.userId);\n          const proposal = await storage.getProposal(contract.proposalId);\n          const request = proposal ? await storage.getFind(proposal.findId) : null;\n\n          if (finderUser && clientUser && request) {\n            if (status === 'accepted') {\n              await emailService.notifyFinderSubmissionApproved(\n                finderUser.email,\n                `${clientUser.firstName} ${clientUser.lastName}`,\n                request.title,\n                contract.amount.toString()\n              );\n            } else if (status === 'rejected') {\n              await emailService.notifyFinderSubmissionRejected(\n                finderUser.email,\n                `${clientUser.firstName} ${clientUser.lastName}`,\n                request.title,\n                clientFeedback || 'No specific feedback provided'\n              );\n            }\n          }\n        }\n      } catch (emailError) {\n        console.error('Failed to send submission status notification email:', emailError);\n      }\n\n      res.json(updatedSubmission);\n    } catch (error: any) {\n      console.error('Error updating submission:', error);\n      res.status(400).json({ message: 'Failed to update submission', error: error.message });\n    }\n  });\n\n  // --- Object storage routes for file uploads ---\n  app.post('/api/objects/upload', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error: any) {\n      console.error('Error getting upload URL:', error);\n      res.status(500).json({ message: 'Failed to get upload URL', error: error.message });\n    }\n  });\n\n  app.get('/objects/:objectPath(*)', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: req.user.userId,\n      });\n\n      if (!canAccess) {\n        return res.sendStatus(403);\n      }\n\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error: any) {\n      console.error('Error accessing object:', error);\n      if (error.name === 'ObjectNotFoundError') {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.put('/api/objects/acl', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { objectURL, visibility = 'private' } = req.body;\n\n      if (!objectURL) {\n        return res.status(400).json({ error: 'objectURL is required' });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(objectURL, {\n        owner: req.user.userId,\n        visibility\n      });\n\n      res.json({ objectPath });\n    } catch (error: any) {\n      console.error('Error setting object ACL:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // --- Strike System Routes ---\n  // Admin route to issue a strike\n  app.post('/api/admin/strikes', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      const { userId, offenseType, evidence, userRole, contextId } = req.body;\n\n      if (!userId || !offenseType || !evidence || !userRole) {\n        return res.status(400).json({ message: 'userId, offenseType, evidence, and userRole are required' });\n      }\n\n      // Only clients and finders can receive strikes, not admins\n      if (userRole === 'admin') {\n        return res.status(400).json({ message: 'Strikes cannot be issued to admin users' });\n      }\n\n      if (userRole !== 'client' && userRole !== 'finder') {\n        return res.status(400).json({ message: 'Strikes can only be issued to clients and finders' });\n      }\n\n      // Verify the user exists and has the correct role\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      if (targetUser.role !== userRole) {\n        return res.status(400).json({ message: 'User role does not match specified role' });\n      }\n\n      const result = await strikeService.issueStrikeByOffense(\n        userId,\n        offenseType,\n        evidence,\n        req.user.userId,\n        userRole,\n        contextId\n      );\n\n      res.status(201).json(result);\n    } catch (error: any) {\n      console.error('Error issuing strike:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get user's strike information\n  app.get('/api/users/:userId/strikes', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { userId } = req.params;\n\n      // Users can only view their own strikes, or admins can view any\n      if (req.user.role !== 'admin' && req.user.userId !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const strikes = await storage.getStrikesByUserId(userId);\n      const restrictions = await strikeService.getUserRestrictions(userId);\n\n      res.json({ strikes, restrictions });\n    } catch (error: any) {\n      console.error('Error fetching strikes:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Submit a dispute\n  app.post('/api/strikes/:strikeId/dispute', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { strikeId } = req.params;\n      const { description, evidence } = req.body;\n\n      if (!description) {\n        return res.status(400).json({ message: 'Description is required' });\n      }\n\n      const dispute = await strikeService.submitDispute(\n        req.user.userId,\n        strikeId,\n        description,\n        evidence\n      );\n\n      res.status(201).json(dispute);\n    } catch (error: any) {\n      console.error('Error submitting dispute:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Submit a contract dispute\n  app.post('/api/contracts/:contractId/dispute', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { contractId } = req.params;\n      const { description, evidence, type } = req.body;\n\n      if (!description) {\n        return res.status(400).json({ message: 'Description is required' });\n      }\n\n      if (!type) {\n        return res.status(400).json({ message: 'Dispute type is required' });\n      }\n\n      // Verify the user has access to this contract\n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ message: 'Contract not found' });\n      }\n\n      // Check if user is either the client or finder on this contract\n      const isClient = req.user.role === 'client' && contract.clientId === req.user.userId;\n      const isContractFinder = req.user.role === 'finder';\n\n      if (isContractFinder) {\n        const finder = await storage.getFinderByUserId(req.user.userId);\n        if (!finder || contract.finderId !== finder.id) {\n          return res.status(403).json({ message: 'Access denied. You are not part of this contract.' });\n        }\n      } else if (!isClient) {\n        return res.status(403).json({ message: 'Access denied. You are not part of this contract.' });\n      }\n\n      const dispute = await storage.createDispute({\n        userId: req.user.userId,\n        contractId: contractId,\n        type: type, // 'contract_dispute' or 'payment_dispute'\n        description,\n        evidence: evidence || null\n      });\n\n      res.status(201).json(dispute);\n    } catch (error: any) {\n      console.error('Error submitting contract dispute:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Admin route to get all disputes\n  app.get('/api/admin/disputes', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      const disputes = await storage.getAllDisputes();\n      res.json(disputes);\n    } catch (error: any) {\n      console.error('Error fetching disputes:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Admin route to update dispute status\n  app.patch('/api/admin/disputes/:disputeId', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      const { disputeId } = req.params;\n      const updates = req.body;\n\n      const dispute = await storage.updateDispute(disputeId, updates);\n      res.json(dispute);\n    } catch (error: any) {\n      console.error('Error updating dispute:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Get offense types for a role\n  app.get('/api/offenses/:role', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required.' });\n      }\n\n      const { role } = req.params;\n      const offenses = strikeService.getOffenseTypes(role);\n      res.json(offenses);\n    } catch (error: any) {\n      console.error('Error fetching offense types:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Admin route to get strike statistics\n  app.get('/api/admin/strike-stats', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required.' });\n      }\n\n      const stats = await strikeService.getStrikeStatistics();\n      res.json(stats);\n    } catch (error: any) {\n      console.error('Error fetching strike statistics:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // --- Support Agent Management Routes ---\n  app.get('/api/admin/support-agents', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      console.log('GET support agents request received');\n      console.log('User role:', req.user.role);\n\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('Fetching support agents from storage');\n      const agents = await storage.getSupportAgents();\n      console.log(`Returning ${agents.length} support agents`);\n      res.json(agents);\n    } catch (error: any) {\n      console.error('Error fetching support agents:', error);\n      res.status(500).json({ message: 'Internal server error', error: error.message });\n    }\n  });\n\n  app.post('/api/admin/support-agents', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      console.log('Support agent creation request received');\n      console.log('Request body:', req.body);\n      console.log('User role:', req.user.role);\n\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const {\n        email,\n        firstName,\n        lastName,\n        department,\n        permissions,\n        maxTicketsPerDay,\n        responseTimeTarget,\n        specializations,\n        languages\n      } = req.body;\n\n      if (!email || !firstName || !lastName || !department || !permissions) {\n        return res.status(400).json({ message: 'Email, first name, last name, department, and permissions are required' });\n      }\n\n      console.log('Checking if user exists with email:', email);\n      // Check if user already exists\n      let user = await storage.getUserByEmail(email);\n\n      if (user) {\n        console.log('User found:', user.id);\n        // Check if user is already a support agent\n        const existingAgent = await storage.getUserSupportAgent(user.id);\n        if (existingAgent) {\n          return res.status(400).json({ message: \"User is already a support agent\" });\n        }\n      } else {\n        console.log('Creating new user for support agent');\n        // Create new user account for the support agent\n        const hashedPassword = await bcrypt.hash('ChangeMe123!', 10);\n\n        user = await storage.createUser({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: 'admin' // Support agents get admin role for system access\n        });\n        console.log('New user created:', user.id);\n      }\n\n      // Generate unique agent ID\n      console.log('Generating agent ID');\n      const agentId = await storage.generateAgentId();\n      console.log('Generated agent ID:', agentId);\n\n      // Create support agent record\n      console.log('Creating support agent record');\n      const agent = await storage.createSupportAgent({\n        userId: user.id,\n        agentId,\n        department,\n        permissions: permissions || [],\n        isActive: true,\n        maxTicketsPerDay: maxTicketsPerDay || 20,\n        responseTimeTarget: responseTimeTarget || 24,\n        specializations: specializations || [],\n        languages: languages || ['en'],\n        assignedBy: req.user.userId\n      });\n\n      console.log('Support agent created:', agent.id);\n\n      // Get the created agent with user details\n      const agentWithUser = await storage.getSupportAgent(agent.id);\n\n      console.log('Returning agent with user details:', agentWithUser?.id);\n      res.status(201).json(agentWithUser);\n    } catch (error: any) {\n      console.error('Create support agent error:', error);\n      res.status(500).json({\n        message: \"Failed to create support agent\",\n        error: error.message\n      });\n    }\n  });\n\n  app.get('/api/admin/support-agents/:id', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const agent = await storage.getSupportAgent(id);\n\n      if (!agent) {\n        return res.status(404).json({ message: 'Support agent not found' });\n      }\n\n      res.json(agent);\n    } catch (error: any) {\n      console.error('Error fetching support agent:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/admin/support-agents/:id', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const updates = req.body;\n\n      // Remove fields that shouldn't be updated directly\n      delete updates.id;\n      delete updates.userId;\n      delete updates.agentId;\n      delete updates.createdAt;\n      delete updates.assignedBy;\n\n      const agent = await storage.updateSupportAgent(id, updates);\n\n      if (!agent) {\n        return res.status(404).json({ message: 'Support agent not found' });\n      }\n\n      res.json(agent);\n    } catch (error: any) {\n      console.error('Error updating support agent:', error);\n      res.status(500).json({ message: 'Failed to update support agent' });\n    }\n  });\n\n  app.post('/api/admin/support-agents/:id/suspend', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason) {\n        return res.status(400).json({ message: 'Suspension reason is required' });\n      }\n\n      const agent = await storage.suspendSupportAgent(id, reason);\n\n      if (!agent) {\n        return res.status(404).json({ message: 'Support agent not found' });\n      }\n\n      res.json({ message: 'Support agent suspended successfully', agent });\n    } catch (error: any) {\n      console.error('Error suspending support agent:', error);\n      res.status(500).json({ message: 'Failed to suspend support agent' });\n    }\n  });\n\n  app.post('/api/admin/support-agents/:id/reactivate', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const agent = await storage.reactivateSupportAgent(id);\n\n      if (!agent) {\n        return res.status(404).json({ message: 'Support agent not found' });\n      }\n\n      res.json({ message: 'Support agent reactivated successfully', agent });\n    } catch (error: any) {\n      console.error('Error reactivating support agent:', error);\n      res.status(500).json({ message: 'Failed to reactivate support agent' });\n    }\n  });\n\n  app.delete('/api/admin/support-agents/:id', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const success = await storage.deleteSupportAgent(id);\n\n      if (!success) {\n        return res.status(404).json({ message: 'Support agent not found' });\n      }\n\n      res.json({ message: 'Support agent deleted successfully' });\n    } catch (error: any) {\n      console.error('Error deleting support agent:', error);\n      res.status(500).json({ message: 'Failed to delete support agent' });\n    }\n  });\n\n  // --- Support Department Management ---\n  app.get('/api/admin/support-departments', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const departments = await storage.getSupportDepartments();\n      res.json(departments);\n    } catch (error: any) {\n      console.error('Error fetching support departments:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/admin/support-departments', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { name, description, color, maxResponseTime } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: 'Department name is required' });\n      }\n\n      const department = await storage.createSupportDepartment({\n        name,\n        description,\n        color: color || '#3B82F6',\n        maxResponseTime: maxResponseTime || 24,\n        isActive: true,\n        autoAssignments: true,\n      });\n\n      res.status(201).json(department);\n    } catch (error: any) {\n      console.error('Error creating support department:', error);\n      res.status(500).json({ message: 'Failed to create support department' });\n    }\n  });\n\n  // --- Restricted Words Management ---\n  // Admin find status management\n  app.put('/api/admin/finds/:id/status', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const { status } = req.body;\n\n      // Validate status\n      const validStatuses = ['open', 'in_progress', 'completed', 'cancelled', 'under_review'];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: 'Invalid status' });\n      }\n\n      // Get the find to ensure it exists\n      const find = await storage.getFind(id);\n      if (!find) {\n        return res.status(404).json({ message: 'Find not found' });\n      }\n\n      // Update find status\n      const updatedFind = await storage.updateFind(id, { status });\n      res.json(updatedFind);\n    } catch (error) {\n      console.error('Error updating find status:', error);\n      res.status(500).json({ message: 'Failed to update find status' });\n    }\n  });\n\n  // --- Strike system endpoints ---\n  app.get('/api/offenses/:role', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { role } = req.params;\n\n      // Predefined offenses for different user roles\n      const offenseTypes = {\n        client: [\n          { offense: 'Misleading Request Description', strikeLevel: 1, applicableRoles: ['client'], resolution: 'Warning and request clarification' },\n          { offense: 'Inappropriate Content in Request', strikeLevel: 2, applicableRoles: ['client'], resolution: 'Content removal and warning' },\n          { offense: 'Non-payment or Payment Disputes', strikeLevel: 2, applicableRoles: ['client'], resolution: 'Payment resolution required' },\n          { offense: 'Harassment of Finders', strikeLevel: 3, applicableRoles: ['client'], resolution: 'Immediate account review' },\n          { offense: 'Fraudulent Activity', strikeLevel: 3, applicableRoles: ['client'], resolution: 'Account suspension' }\n        ],\n        finder: [\n          { offense: 'Low Quality or Incomplete Proposals', strikeLevel: 1, applicableRoles: ['finder'], resolution: 'Training and guidance provided' },\n          { offense: 'Missing Deadlines Without Communication', strikeLevel: 1, applicableRoles: ['finder'], resolution: 'Communication improvement required' },\n          { offense: 'Inappropriate Communication', strikeLevel: 2, applicableRoles: ['finder'], resolution: 'Communication standards training' },\n          { offense: 'Delivering Substandard Work', strikeLevel: 2, applicableRoles: ['finder'], resolution: 'Quality standards review' },\n          { offense: 'Fraudulent Claims or Credentials', strikeLevel: 3, applicableRoles: ['finder'], resolution: 'Account verification required' },\n          { offense: 'Harassment of Clients', strikeLevel: 3, applicableRoles: ['finder'], resolution: 'Immediate account review' }\n        ]\n      };\n\n      const roleOffenses = offenseTypes[role as keyof typeof offenseTypes] || [];\n      res.json(roleOffenses);\n    } catch (error) {\n      console.error('Error fetching offense types:', error);\n      res.status(500).json({ message: 'Failed to fetch offense types' });\n    }\n  });\n\n  app.post('/api/admin/strikes', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { userId, offenseType, evidence, userRole, contextId } = req.body;\n\n      if (!userId || !offenseType || !evidence || !userRole) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      // For now, we'll just return a success response\n      // In a full implementation, this would save to database\n      const strike = {\n        id: Date.now().toString(),\n        userId,\n        offenseType,\n        evidence,\n        userRole,\n        contextId,\n        issuedBy: req.user.id,\n        issuedAt: new Date().toISOString(),\n        status: 'active'\n      };\n\n      res.status(201).json(strike);\n    } catch (error) {\n      console.error('Error issuing strike:', error);\n      res.status(500).json({ message: 'Failed to issue strike' });\n    }\n  });\n\n  app.get('/api/admin/restricted-words', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      console.log('Fetching restricted words...');\n      const words = await storage.getRestrictedWords();\n      console.log('Retrieved restricted words:', words.length, 'words found');\n      res.json(words);\n    } catch (error: any) {\n      console.error('Error fetching restricted words:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/admin/restricted-words', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      const { word, category, severity } = req.body;\n      console.log('Received restricted word request:', { word, category, severity, userId: req.user.userId });\n\n      if (!word || typeof word !== 'string') {\n        return res.status(400).json({ message: 'Word is required and must be a string' });\n      }\n\n      const wordData = {\n        word: word.toLowerCase().trim(),\n        category: category || 'general',\n        severity: severity || 'flag',\n        addedBy: req.user.userId,\n        isActive: true\n      };\n\n      console.log('Adding restricted word with data:', wordData);\n      const restrictedWord = await storage.addRestrictedWord(wordData);\n      console.log('Successfully added restricted word:', restrictedWord);\n\n      res.status(201).json(restrictedWord);\n    } catch (error: any) {\n      console.error('Error adding restricted word:', error);\n      if (error.message?.includes('duplicate') || error.message?.includes('unique')) {\n        return res.status(409).json({ message: 'This word is already in the restricted list' });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/admin/restricted-words/:wordId', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied. Admin role required.' });\n      }\n\n      const { wordId } = req.params;\n      const success = await storage.removeRestrictedWord(wordId);\n\n      if (!success) {\n        return res.status(404).json({ message: 'Restricted word not found' });\n      }\n\n      res.json({ message: 'Restricted word removed successfully' });\n    } catch (error: any) {\n      console.error('Error removing restricted word:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // --- FAQ Management Routes ---\n  // Admin FAQ management\n  app.get(\"/api/admin/faqs\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const allFaqs = await db.select().from(faqs).orderBy(faqs.sortOrder, faqs.createdAt);\n      res.json(allFaqs);\n    } catch (error) {\n      console.error('Error fetching FAQs:', error);\n      res.status(500).json({ error: 'Failed to fetch FAQs' });\n    }\n  });\n\n  app.post(\"/api/admin/faqs\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { insertFAQSchema } = await import('@shared/schema');\n      const faqData = insertFAQSchema.parse(req.body);\n\n      const newFaq = await db.insert(faqs).values({\n        ...faqData,\n        tags: faqData.tags || [],\n        isActive: faqData.isActive ?? true,\n        sortOrder: faqData.sortOrder || 0\n      }).returning();\n\n      res.json(newFaq[0]);\n    } catch (error) {\n      console.error('Error creating FAQ:', error);\n      res.status(500).json({ error: 'Failed to create FAQ', details: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/faqs/:id\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { question, answer, category, tags, isActive, sortOrder } = req.body;\n\n      const updated = await db\n        .update(faqs)\n        .set({\n          question,\n          answer,\n          category,\n          tags: tags || [],\n          isActive: isActive ?? true,\n          sortOrder: sortOrder || 0,\n          updatedAt: new Date()\n        })\n        .where(eq(faqs.id, id))\n        .returning();\n\n      if (updated.length === 0) {\n        return res.status(404).json({ error: 'FAQ not found' });\n      }\n\n      res.json(updated[0]);\n    } catch (error) {\n      console.error('Error updating FAQ:', error);\n      res.status(500).json({ error: 'Failed to update FAQ' });\n    }\n  });\n\n  app.delete(\"/api/admin/faqs/:id\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n\n      const deleted = await db.delete(faqs).where(eq(faqs.id, id)).returning();\n\n      if (deleted.length === 0) {\n        return res.status(404).json({ error: 'FAQ not found' });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting FAQ:', error);\n      res.status(500).json({ error: 'Failed to delete FAQ' });\n    }\n  });\n\n  // Public FAQs endpoint\n  app.get(\"/api/public/faqs\", async (req, res) => {\n    try {\n      const activeFaqs = await db\n        .select()\n        .from(faqs)\n        .where(eq(faqs.isActive, true))\n        .orderBy(faqs.sortOrder, faqs.createdAt);\n\n      res.json(activeFaqs);\n    } catch (error) {\n      console.error('Error fetching public FAQs:', error);\n      res.status(500).json({ error: 'Failed to fetch FAQs' });\n    }\n  });\n\n  // --- Admin Withdrawal Settings ---\n  // Admin withdrawal settings\n  app.get(\"/api/admin/withdrawal-settings\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const settings = await db.select().from(withdrawalSettings).limit(1);\n      res.json(settings[0] || {\n        minimumAmount: \"1000\",\n        processingFee: \"45\",\n        processingTimeHours: 24,\n        isActive: true\n      });\n    } catch (error) {\n      console.error('Error fetching withdrawal settings:', error);\n      res.status(500).json({ error: 'Failed to fetch withdrawal settings' });\n    }\n  });\n\n  app.put(\"/api/admin/withdrawal-settings/:id\", requireAuth, requireAdmin, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const updated = await db\n        .update(withdrawalSettings)\n        .set({ ...updateData, updatedAt: new Date() })\n        .where(eq(withdrawalSettings.id, id))\n        .returning();\n\n      res.json(updated[0]);\n    } catch (error) {\n      console.error('Error updating withdrawal settings:', error);\n      res.status(500).json({ error: 'Failed to update withdrawal settings' });\n    }\n  });\n\n  // --- Blog Post Routes ---\n  // Public blog post route\n  app.get(\"/api/blog/:slug\", async (req: Request, res: Response) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPostBySlug(slug);\n\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      // Only return published posts for public access\n      if (!post.isPublished) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n\n      res.json(post);\n    } catch (error: any) {\n      res.status(400).json({ message: \"Failed to fetch blog post\", error: error.message });\n    }\n  });\n\n  // --- User Verification Routes ---\n  // Submit verification\n  app.post(\"/api/verification/submit\", authenticateToken, upload.fields([\n    { name: 'documentFront', maxCount: 1 },\n    { name: 'documentBack', maxCount: 1 },\n    { name: 'selfie', maxCount: 1 }\n  ]), async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const { documentType } = req.body;\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n\n      if (!files.documentFront || !files.selfie) {\n        return res.status(400).json({ message: \"Document front image and selfie are required\" });\n      }\n\n      if (!documentType || !['national_id', 'passport', 'voters_card'].includes(documentType)) {\n        return res.status(400).json({ message: \"Valid document type is required\" });\n      }\n\n      // Check if user already has a pending or verified verification\n      const existing = await storage.getVerificationByUserId(req.user.userId);\n      if (existing && (existing.status === 'pending' || existing.status === 'verified')) {\n        return res.status(400).json({\n          message: existing.status === 'verified'\n            ? \"Your account is already verified\"\n            : \"You already have a verification request pending review\"\n        });\n      }\n\n      const verificationData = {\n        userId: req.user.userId,\n        documentType,\n        documentFrontImage: `/uploads/${files.documentFront[0].filename}`,\n        documentBackImage: files.documentBack ? `/uploads/${files.documentBack[0].filename}` : null,\n        selfieImage: `/uploads/${files.selfie[0].filename}`\n      };\n\n      const verification = await storage.submitVerification(verificationData);\n\n      // Send email notification to user\n      try {\n        const user = await storage.getUser(req.user.userId);\n        if (user) {\n          await emailService.sendVerificationSubmitted(\n            user.email,\n            `${user.firstName} ${user.lastName}`\n          );\n        }\n      } catch (emailError) {\n        console.error('Failed to send verification submission email:', emailError);\n      }\n\n      res.status(201).json({\n        message: \"Verification submitted successfully. Your documents are now under review.\",\n        verification: {\n          id: verification.id,\n          status: verification.status,\n          submittedAt: verification.submittedAt\n        }\n      });\n    } catch (error) {\n      console.error('Verification submission error:', error);\n      res.status(500).json({ message: \"Failed to submit verification\" });\n    }\n  });\n\n  // Get user's verification status\n  app.get(\"/api/verification/status\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const verification = await storage.getVerificationByUserId(req.user.userId);\n      const isRequired = await storage.isVerificationRequired();\n\n      res.json({\n        isRequired,\n        verification: verification ? {\n          id: verification.id,\n          status: verification.status,\n          documentType: verification.documentType,\n          submittedAt: verification.submittedAt,\n          reviewedAt: verification.reviewedAt,\n          rejectionReason: verification.rejectionReason\n        } : null\n      });\n    } catch (error) {\n      console.error('Get verification status error:', error);\n      res.status(500).json({ message: \"Failed to get verification status\" });\n    }\n  });\n\n  // Admin: Get pending verifications\n  app.get(\"/api/admin/verifications\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const verifications = await storage.getPendingVerifications();\n      res.json(verifications);\n    } catch (error) {\n      console.error('Get pending verifications error:', error);\n      res.status(500).json({ message: \"Failed to get pending verifications\" });\n    }\n  });\n\n  // Admin: Get verification details\n  app.get(\"/api/admin/verifications/:id\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const verification = await storage.getVerificationById(id);\n\n      if (!verification) {\n        return res.status(404).json({ message: \"Verification not found\" });\n      }\n\n      res.json(verification);\n    } catch (error) {\n      console.error('Get verification details error:', error);\n      res.status(500).json({ message: \"Failed to get verification details\" });\n    }\n  });\n\n  // Admin: Approve verification\n  app.post(\"/api/admin/verifications/:id/approve\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const verification = await storage.updateVerificationStatus(id, 'verified', req.user.userId);\n\n      if (!verification) {\n        return res.status(404).json({ message: \"Verification not found\" });\n      }\n\n      // Send approval email to user\n      try {\n        const user = await storage.getUser(verification.userId);\n        if (user) {\n          await emailService.sendVerificationApproved(\n            user.email,\n            `${user.firstName} ${user.lastName}`\n          );\n        }\n      } catch (emailError) {\n        console.error('Failed to send verification approval email:', emailError);\n      }\n\n      res.json({ message: \"Verification approved successfully\" });\n    } catch (error) {\n      console.error('Approve verification error:', error);\n      res.status(500).json({ message: \"Failed to approve verification\" });\n    }\n  });\n\n  // Admin: Reject verification\n  app.post(\"/api/admin/verifications/:id/reject\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason || reason.trim().length === 0) {\n        return res.status(400).json({ message: \"Rejection reason is required\" });\n      }\n\n      const verification = await storage.updateVerificationStatus(id, 'rejected', req.user.userId, reason);\n\n      if (!verification) {\n        return res.status(404).json({ message: \"Verification not found\" });\n      }\n\n      // Send rejection email to user\n      try {\n        const user = await storage.getUser(verification.userId);\n        if (user) {\n          await emailService.sendVerificationRejected(\n            user.email,\n            `${user.firstName} ${user.lastName}`,\n            reason\n          );\n        }\n      } catch (emailError) {\n        console.error('Failed to send verification rejection email:', emailError);\n      }\n\n      res.json({ message: \"Verification rejected successfully\" });\n    } catch (error) {\n      console.error('Reject verification error:', error);\n      res.status(500).json({ message: \"Failed to reject verification\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":195671},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Finder,\n  type InsertFinder,\n  type Find,\n  type InsertFind,\n  type Proposal,\n  type InsertProposal,\n  type Contract,\n  type InsertContract,\n  type Review,\n  type InsertReview,\n  type Findertoken,\n  type InsertFindertoken,\n  type Transaction,\n  type InsertTransaction,\n  type AdminSetting,\n  type InsertAdminSetting,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type Category,\n  type InsertCategory,\n  type WithdrawalRequest,\n  type InsertWithdrawalRequest,\n  type BlogPost,\n  type InsertBlogPost,\n  type OrderSubmission,\n  type InsertOrderSubmission,\n  type FinderLevel,\n  type InsertFinderLevel,\n  type MonthlyTokenDistribution,\n  type InsertMonthlyTokenDistribution,\n  type TokenGrant,\n  type InsertTokenGrant,\n  type Strike,\n  type InsertStrike,\n  type UserRestriction,\n  type InsertUserRestriction,\n  type Dispute,\n  type InsertDispute,\n  type BehavioralTraining,\n  type InsertBehavioralTraining,\n  type TrustedBadge,\n  type InsertTrustedBadge,\n  type RestrictedWord,\n  type InsertRestrictedWord,\n  type TokenPackage,\n  type InsertTokenPackage,\n  type ClientTokenGrant,\n  type InsertClientTokenGrant,\n  users,\n  finders,\n  finds,\n  proposals,\n  contracts,\n  reviews,\n  findertokens,\n  transactions,\n  adminSettings,\n  conversations,\n  messages,\n  categories,\n  withdrawalSettings,\n  withdrawalRequests,\n  blogPosts,\n  orderSubmissions,\n  finderLevels,\n  tokenCharges,\n  monthlyTokenDistributions,\n  tokenGrants,\n  clientTokenGrants,\n  restrictedWords,\n  strikes,\n  userRestrictions,\n  disputes,\n  behavioralTraining,\n  trustedBadges,\n  tokenPackages,\n  supportAgents,\n  supportTickets,\n  supportTicketMessages,\n  supportDepartments,\n  contactSettings,\n  faqCategories,\n  userVerifications,\n  type SupportAgent,\n  type SupportTicket,\n  type SupportTicketMessage,\n  type SupportDepartment,\n  type InsertSupportAgent,\n  type InsertSupportTicket,\n  type InsertSupportDepartment,\n  type UserVerification,\n  type InsertUserVerification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql as drizzleSql, sql } from \"drizzle-orm\";\nimport { generateId } from \"@shared/utils\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateUserPassword(id: string, hashedPassword: string): Promise<void>;\n\n  // Finder operations\n  getFinder(id: string): Promise<Finder | undefined>;\n  getFinderByUserId(userId: string): Promise<Finder | undefined>;\n  createFinder(finder: InsertFinder): Promise<Finder>;\n  updateFinder(id: string, updates: Partial<Finder>): Promise<Finder | undefined>;\n  getFinderPendingEarnings(finderId: string): Promise<{ pendingAmount: number; contractCount: number; }>;\n  calculateFinderProfileCompletion(finderId: string): Promise<{ completionPercentage: number; missingFields: string[]; }>;\n\n  // Find operations\n  getFind(id: string): Promise<Find | undefined>;\n  getFindsByClientId(clientId: string): Promise<Find[]>;\n  getAllActiveFinds(): Promise<Find[]>;\n  getAllFinds(): Promise<Find[]>;\n  getAvailableFindsForFinders(): Promise<Find[]>;\n  createFind(find: InsertFind): Promise<Find>;\n  updateFind(id: string, updates: Partial<Find>): Promise<Find | undefined>;\n\n  // Proposal operations\n  getProposal(id: string): Promise<Proposal | undefined>;\n  getProposalsByFindId(findId: string): Promise<Proposal[]>;\n  getProposalsByFinderId(finderId: string): Promise<Proposal[]>;\n  getAllProposals(): Promise<Proposal[]>;\n  getProposalByFinderAndFind(finderId: string, findId: string): Promise<Proposal | undefined>;\n  hasAcceptedProposal(findId: string): Promise<boolean>;\n  getClientContactForAcceptedProposal(proposalId: string, finderId: string): Promise<{firstName: string, lastName: string, email: string, phone?: string} | undefined>;\n  createProposal(proposal: InsertProposal): Promise<Proposal>;\n  updateProposal(id: string, updates: Partial<Proposal>): Promise<Proposal | undefined>;\n\n  // Contract operations\n  getContract(id: string): Promise<Contract | undefined>;\n  getContractsByClientId(clientId: string): Promise<Contract[]>;\n  getContractsByFinderId(finderId: string): Promise<Contract[]>;\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: string, updates: Partial<Contract>): Promise<Contract | undefined>;\n\n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getReviewsByFinderId(finderId: string): Promise<Review[]>;\n\n  // Findertoken operations\n  getFindertokenBalance(finderId: string): Promise<Findertoken | undefined>;\n  createFindertokenRecord(finderId: string): Promise<Findertoken>;\n  updateFindertokenBalance(finderId: string, newBalance: number): Promise<Findertoken | undefined>;\n  updateFinderTokenBalance(finderId: string, newBalance: number): Promise<void>;\n  syncFinderTokenBalances(): Promise<void>;\n\n  // Transaction operations\n  createTransaction(transaction: any): Promise<Transaction>;\n  getTransactionsByFinderId(finderId: string): Promise<Transaction[]>;\n  getTransactionsByUserId(userId: string): Promise<Transaction[]>;\n  getTransactionByReference(reference: string): Promise<Transaction | undefined>;\n  getAllTransactionsWithUsers(): Promise<any[]>;\n  getAllContractsWithUsers(): Promise<any[]>;\n\n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getAdminSetting(key: string): Promise<AdminSetting | undefined>;\n  getAdminSettings(): Promise<{[key: string]: string}>;\n  setAdminSetting(key: string, value: string): Promise<AdminSetting>;\n\n  // Client operations\n  getClientProfile(clientId: string): Promise<User | undefined>;\n  deductClientFindertokens(clientId: string, amount: number, description: string): Promise<void>;\n  addClientFindertokens(clientId: string, amount: number, description: string): Promise<{ success: boolean; newBalance: number; }>;\n\n  // Token charging\n  chargeFinderTokens(finderId: string, amount: number, reason: string, chargedBy: string): Promise<boolean>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getActiveCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, updates: Partial<Category>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<void>;\n\n  // User management operations\n  banUser(userId: string, reason: string): Promise<User | undefined>;\n  unbanUser(userId: string): Promise<User | undefined>;\n  verifyUser(userId: string): Promise<User | undefined>;\n  unverifyUser(userId: string): Promise<User | undefined>;\n  verifyFinder(finderId: string): Promise<Finder | null>;\n  unverifyFinder(finderId: string): Promise<Finder | null>;\n\n  // Withdrawal operations\n  createWithdrawalRequest(request: InsertWithdrawalRequest): Promise<WithdrawalRequest>;\n  getWithdrawalRequests(): Promise<any[]>;\n  updateWithdrawalRequest(id: string, updates: Partial<WithdrawalRequest>): Promise<WithdrawalRequest | undefined>;\n  updateFinderBalance(finderId: string, amount: string): Promise<void>;\n  releaseFundsToFinder(finderId: string, contractAmount: string): Promise<void>;\n  getWithdrawalSettings(finderId: string): Promise<any>;\n  updateWithdrawalSettings(finderId: string, settings: any): Promise<any>;\n  getWithdrawalsByFinderId(finderId: string): Promise<WithdrawalRequest[]>;\n\n  // Messaging operations\n  getConversation(clientId: string, proposalId: string): Promise<Conversation | undefined>;\n  getConversationById(conversationId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getConversationsByClientId(clientId: string): Promise<Array<Conversation & {\n    proposal: { request: { title: string; }; };\n    finder: { user: { firstName: string; lastName: string; }; };\n    lastMessage?: { content: string; createdAt: Date; senderId: string; };\n    unreadCount: number;\n  }>>;\n  getConversationsByFinderId(finderId: string): Promise<Array<Conversation & {\n    proposal: { request: { title: string; }; };\n    client: { firstName: string; lastName: string; };\n    lastMessage?: { content: string; createdAt: Date; senderId: string; };\n    unreadCount: number;\n  }>>;\n  getMessages(conversationId: string): Promise<Array<Message & { sender: { firstName: string; lastName: string; }; quotedMessage?: { content: string; sender: { firstName: string; lastName: string; } } }>>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  markMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n  getFinderProfile(finderId: string): Promise<any>;\n\n  // Blog post operations\n  getBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, updates: Partial<BlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<boolean>;\n\n  // Order submission operations\n  createOrderSubmission(submission: InsertOrderSubmission): Promise<OrderSubmission>;\n  getOrderSubmissionByContractId(contractId: string): Promise<OrderSubmission | undefined>;\n  updateOrderSubmission(id: string, updates: Partial<OrderSubmission>): Promise<OrderSubmission | undefined>;\n  getContractWithSubmission(contractId: string): Promise<(Contract & {orderSubmission?: OrderSubmission, finder?: any}) | undefined>;\n\n  // Finder level operations\n  getFinderLevels(): Promise<FinderLevel[]>;\n  getFinderLevel(id: string): Promise<FinderLevel | undefined>;\n  createFinderLevel(level: InsertFinderLevel): Promise<FinderLevel>;\n  updateFinderLevel(id: string, updates: Partial<FinderLevel>): Promise<FinderLevel | undefined>;\n  deleteFinderLevel(id: string): Promise<boolean>;\n  calculateFinderLevel(finderId: string): Promise<FinderLevel | undefined>;\n  assignFinderLevel(finderId: string, levelId: string): Promise<void>;\n\n  // Monthly token distribution operations\n  distributeMonthlyTokens(): Promise<{ distributed: number; alreadyDistributed: number; }>;\n  getMonthlyDistributions(month: number, year: number): Promise<MonthlyTokenDistribution[]>;\n  hasReceivedMonthlyTokens(finderId: string, month: number, year: number): Promise<boolean>;\n  createMonthlyDistribution(distribution: InsertMonthlyTokenDistribution): Promise<MonthlyTokenDistribution>;\n\n  // Token grant operations\n  grantTokensToFinder(finderId: string, amount: number, reason: string, grantedBy: string): Promise<TokenGrant>;\n  grantTokensToClient(userId: string, amount: number, reason: string, grantedBy: string): Promise<ClientTokenGrant>;\n  getTokenGrants(userId?: string): Promise<any[]>;\n  getAllFindersForTokens(): Promise<Finder[]>;\n\n  // Strike System operations\n  issueStrike(strike: InsertStrike): Promise<Strike>;\n  getStrikesByUserId(userId: string): Promise<Strike[]>;\n  getActiveStrikesCount(userId: string): Promise<number>;\n  updateStrike(id: string, updates: Partial<Strike>): Promise<Strike | undefined>;\n\n  // User Restrictions operations\n  createUserRestriction(restriction: InsertUserRestriction): Promise<UserRestriction>;\n  getUserActiveRestrictions(userId: string): Promise<UserRestriction[]>;\n  updateUserRestriction(id: string, updates: Partial<UserRestriction>): Promise<UserRestriction | undefined>;\n\n  // Dispute operations\n  createDispute(dispute: InsertDispute): Promise<Dispute>;\n  getDisputesByUserId(userId: string): Promise<Dispute[]>;\n  getAllDisputes(): Promise<Dispute[]>;\n  updateDispute(id: string, updates: Partial<Dispute>): Promise<Dispute | undefined>;\n\n  // Behavioral Training operations\n  assignTraining(training: InsertBehavioralTraining): Promise<BehavioralTraining>;\n  getTrainingsByUserId(userId: string): Promise<BehavioralTraining[]>;\n  updateTraining(id: string, updates: Partial<BehavioralTraining>): Promise<BehavioralTraining | undefined>;\n\n  // Trusted Badge operations\n  awardBadge(badge: InsertTrustedBadge): Promise<TrustedBadge>;\n  getUserBadges(userId: string): Promise<TrustedBadge[]>;\n  updateBadge(id: string, updates: Partial<TrustedBadge>): Promise<TrustedBadge | undefined>;\n\n  // Strike System Analysis\n  getUserStrikeLevel(userId: string): Promise<number>;\n\n  // Token Package operations\n  getAllTokenPackages(): Promise<TokenPackage[]>;\n  getActiveTokenPackages(): Promise<TokenPackage[]>;\n  getTokenPackage(id: string): Promise<TokenPackage | undefined>;\n  createTokenPackage(tokenPackage: InsertTokenPackage): Promise<TokenPackage>;\n  updateTokenPackage(id: string, updates: Partial<TokenPackage>): Promise<TokenPackage | undefined>;\n  deleteTokenPackage(id: string): Promise<boolean>;\n\n  // Restricted Words Management\n  addRestrictedWord(word: InsertRestrictedWord): Promise<RestrictedWord>;\n  getRestrictedWords(): Promise<RestrictedWord[]>;\n  removeRestrictedWord(id: string): Promise<boolean>;\n  updateRestrictedWord(id: string, updates: Partial<RestrictedWord>): Promise<RestrictedWord | undefined>;\n  checkContentForRestrictedWords(content: string): Promise<string[]>;\n\n  // Support Agent Management\n  createSupportAgent(data: InsertSupportAgent & { agentId: string }): Promise<SupportAgent>;\n  getSupportAgents(): Promise<Array<SupportAgent & { user: { id: string; firstName: string; lastName: string; email: string; } }>>;\n  getSupportAgent(id: string): Promise<SupportAgent & { user: { id: string; firstName: string; lastName: string; email: string; } } | undefined>;\n  updateSupportAgent(id: string, data: Partial<InsertSupportAgent>): Promise<SupportAgent | undefined>;\n  suspendSupportAgent(id: string, reason: string): Promise<SupportAgent | undefined>;\n  reactivateSupportAgent(id: string): Promise<SupportAgent | undefined>;\n  deleteSupportAgent(id: string): Promise<boolean>;\n  generateAgentId(): Promise<string>;\n\n  // Support Department Management\n  getSupportDepartments(): Promise<Array<SupportDepartment & { isActive: boolean; name: string; }>>;\n  createSupportDepartment(data: InsertSupportDepartment): Promise<SupportDepartment>;\n  updateSupportDepartment(id: string, data: Partial<InsertSupportDepartment>): Promise<SupportDepartment | undefined>;\n  deleteSupportDepartment(id: string): Promise<boolean>;\n\n  // Support Agent Check\n  getUserSupportAgent(userId: string): Promise<SupportAgent | undefined>;\n\n  // Generate withdrawal request ID\n  generateWithdrawalRequestId(): Promise<string>;\n\n  // Contact Settings operations\n  getContactSettings(): Promise<any>;\n  updateContactSettings(settings: any): Promise<any>;\n\n  // FAQ Categories operations\n  getFAQCategories(): Promise<any[]>;\n  createFAQCategory(category: any): Promise<any>;\n  updateFAQCategory(id: string, updates: any): Promise<any>;\n  deleteFAQCategory(id: string): Promise<boolean>;\n\n  // User Verification operations\n  submitVerification(verification: any): Promise<any>;\n  getVerificationByUserId(userId: string): Promise<any>;\n  getPendingVerifications(): Promise<any[]>;\n  updateVerificationStatus(id: string, status: string, reviewedBy: string, rejectionReason?: string): Promise<any>;\n  getVerificationById(id: string): Promise<any>;\n  isVerificationRequired(): Promise<boolean>;\n\n  // Support Ticket operations\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  getSupportTickets(filters?: { status?: string; department?: string; assignedTo?: string; priority?: string }): Promise<Array<SupportTicket & { submitter?: { firstName: string; lastName: string; email: string; }; assignedAgent?: { agentId: string; user: { firstName: string; lastName: string; } }; }>>;\n  getSupportTicket(id: string): Promise<SupportTicket & { submitter?: { firstName: string; lastName: string; email: string; }; assignedAgent?: { agentId: string; user: { firstName: string; lastName: string; } }; } | undefined>;\n  updateSupportTicket(id: string, updates: Partial<SupportTicket>): Promise<SupportTicket | undefined>;\n  deleteSupportTicket(id: string): Promise<boolean>;\n  generateTicketNumber(): Promise<string>;\n\n  // Support Ticket Message operations\n  createSupportTicketMessage(message: { ticketId: string; senderId?: string; senderType: string; senderName: string; senderEmail?: string; content: string; attachments?: string[]; isInternal?: boolean; }): Promise<SupportTicketMessage>;\n  getSupportTicketMessages(ticketId: string): Promise<Array<SupportTicketMessage & { sender?: { firstName: string; lastName: string; } }>>;\n  markTicketMessageAsRead(messageId: string): Promise<void>;\n\n  // New method for proposals\n  getProposalsForClient(clientId: string): Promise<Proposal[]>;\n}\n\nclass DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async updateUserPassword(id: string, hashedPassword: string): Promise<void> {\n    await db.update(users).set({ password: hashedPassword }).where(eq(users.id, id));\n  }\n\n  // Finder operations\n  async getFinder(id: string): Promise<Finder | undefined> {\n    const result = await db.select().from(finders).where(eq(finders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFinderByUserId(userId: string): Promise<Finder | undefined> {\n    const result = await db.select().from(finders).where(eq(finders.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createFinder(finder: InsertFinder): Promise<Finder> {\n    const result = await db.insert(finders).values(finder).returning();\n    return result[0];\n  }\n\n  async updateFinder(id: string, updates: Partial<Finder>): Promise<Finder | undefined> {\n    const result = await db.update(finders).set(updates).where(eq(finders.id, id)).returning();\n    return result[0];\n  }\n\n  async getFinderPendingEarnings(finderId: string): Promise<{ pendingAmount: number; contractCount: number; }> {\n    // Implementation for pending earnings calculation\n    return { pendingAmount: 0, contractCount: 0 };\n  }\n\n  async calculateFinderProfileCompletion(finderId: string): Promise<{ completionPercentage: number; missingFields: string[]; }> {\n    // Implementation for profile completion calculation\n    return { completionPercentage: 100, missingFields: [] };\n  }\n\n  // Find operations\n  async getFind(id: string): Promise<Find | undefined> {\n    const result = await db.select().from(finds).where(eq(finds.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFindsByClientId(clientId: string): Promise<Find[]> {\n    return await db.select().from(finds).where(eq(finds.clientId, clientId));\n  }\n\n  async getAllActiveFinds(): Promise<Find[]> {\n    return await db.select().from(finds).where(eq(finds.status, 'open'));\n  }\n\n  async getAllFinds(): Promise<Find[]> {\n    return await db.select().from(finds);\n  }\n\n  async getAvailableFindsForFinders(): Promise<Find[]> {\n    return await db.select().from(finds).where(eq(finds.status, 'open'));\n  }\n\n  async createFind(find: InsertFind): Promise<Find> {\n    const result = await db.insert(finds).values(find).returning();\n    return result[0];\n  }\n\n  async updateFind(id: string, updates: Partial<Find>): Promise<Find | undefined> {\n    const result = await db.update(finds).set(updates).where(eq(finds.id, id)).returning();\n    return result[0];\n  }\n\n  // Proposal operations\n  async getProposal(id: string): Promise<Proposal | undefined> {\n    const result = await db.select().from(proposals).where(eq(proposals.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProposalsByFindId(findId: string): Promise<Proposal[]> {\n    return await db.select().from(proposals).where(eq(proposals.findId, findId));\n  }\n\n  async getProposalsByFinderId(finderId: string): Promise<Proposal[]> {\n    return await db.select().from(proposals).where(eq(proposals.finderId, finderId));\n  }\n\n  async getAllProposals(): Promise<Proposal[]> {\n    return await db.select().from(proposals);\n  }\n\n  async getProposalByFinderAndFind(finderId: string, findId: string): Promise<Proposal | undefined> {\n    const result = await db.select().from(proposals)\n      .where(and(eq(proposals.finderId, finderId), eq(proposals.findId, findId)))\n      .limit(1);\n    return result[0];\n  }\n\n  async hasAcceptedProposal(findId: string): Promise<boolean> {\n    const result = await db.select().from(proposals)\n      .where(and(eq(proposals.findId, findId), eq(proposals.status, 'accepted')))\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async getClientContactForAcceptedProposal(proposalId: string, finderId: string): Promise<{firstName: string, lastName: string, email: string, phone?: string} | undefined> {\n    // Implementation for getting client contact details\n    return undefined;\n  }\n\n  async createProposal(proposal: InsertProposal): Promise<Proposal> {\n    const result = await db.insert(proposals).values(proposal).returning();\n    return result[0];\n  }\n\n  async updateProposal(id: string, updates: Partial<Proposal>): Promise<Proposal | undefined> {\n    const result = await db.update(proposals).set(updates).where(eq(proposals.id, id)).returning();\n    return result[0];\n  }\n\n  // Contract operations\n  async getContract(id: string): Promise<Contract | undefined> {\n    const result = await db.select().from(contracts).where(eq(contracts.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getContractsByClientId(clientId: string): Promise<Contract[]> {\n    return await db.select().from(contracts).where(eq(contracts.clientId, clientId));\n  }\n\n  async getContractsByFinderId(finderId: string): Promise<Contract[]> {\n    return await db.select().from(contracts).where(eq(contracts.finderId, finderId));\n  }\n\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const result = await db.insert(contracts).values(contract).returning();\n    return result[0];\n  }\n\n  async updateContract(id: string, updates: Partial<Contract>): Promise<Contract | undefined> {\n    const result = await db.update(contracts).set(updates).where(eq(contracts.id, id)).returning();\n    return result[0];\n  }\n\n  // Review operations\n  async createReview(review: InsertReview): Promise<Review> {\n    const result = await db.insert(reviews).values(review).returning();\n    return result[0];\n  }\n\n  async getReviewsByFinderId(finderId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.finderId, finderId));\n  }\n\n  // Findertoken operations\n  async getFindertokenBalance(finderId: string): Promise<Findertoken | undefined> {\n    const result = await db.select().from(findertokens).where(eq(findertokens.finderId, finderId)).limit(1);\n    return result[0];\n  }\n\n  async createFindertokenRecord(finderId: string): Promise<Findertoken> {\n    const result = await db.insert(findertokens).values({ finderId, balance: 0 }).returning();\n    return result[0];\n  }\n\n  async updateFindertokenBalance(finderId: string, newBalance: number): Promise<Findertoken | undefined> {\n    const result = await db.update(findertokens).set({ balance: newBalance }).where(eq(findertokens.finderId, finderId)).returning();\n    return result[0];\n  }\n\n  async updateFinderTokenBalance(finderId: string, newBalance: number): Promise<void> {\n    await db.update(finders).set({ findertokenBalance: newBalance }).where(eq(finders.id, finderId));\n  }\n\n  async syncFinderTokenBalances(): Promise<void> {\n    // Implementation for syncing token balances\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: any): Promise<Transaction> {\n    const result = await db.insert(transactions).values(transaction).returning();\n    return result[0];\n  }\n\n  async getTransactionsByFinderId(finderId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions).where(eq(transactions.finderId, finderId));\n  }\n\n  async getTransactionsByUserId(userId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions).where(eq(transactions.userId, userId));\n  }\n\n  async getTransactionByReference(reference: string): Promise<Transaction | undefined> {\n    const result = await db.select().from(transactions).where(eq(transactions.reference, reference)).limit(1);\n    return result[0];\n  }\n\n  async getAllTransactionsWithUsers(): Promise<any[]> {\n    return [];\n  }\n\n  async getAllContractsWithUsers(): Promise<any[]> {\n    return [];\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getAdminSetting(key: string): Promise<AdminSetting | undefined> {\n    const result = await db.select().from(adminSettings).where(eq(adminSettings.key, key)).limit(1);\n    return result[0];\n  }\n\n  async getAdminSettings(): Promise<{[key: string]: string}> {\n    const settings = await db.select().from(adminSettings);\n    return settings.reduce((acc, setting) => {\n      acc[setting.key] = setting.value;\n      return acc;\n    }, {} as {[key: string]: string});\n  }\n\n  async setAdminSetting(key: string, value: string): Promise<AdminSetting> {\n    const result = await db.insert(adminSettings)\n      .values({ key, value })\n      .onConflictDoUpdate({ target: adminSettings.key, set: { value } })\n      .returning();\n    return result[0];\n  }\n\n  // Client operations\n  async getClientProfile(clientId: string): Promise<User | undefined> {\n    return this.getUser(clientId);\n  }\n\n  async deductClientFindertokens(clientId: string, amount: number, description: string): Promise<void> {\n    // Implementation for deducting client tokens\n  }\n\n  async addClientFindertokens(clientId: string, amount: number, description: string): Promise<{ success: boolean; newBalance: number; }> {\n    // Implementation for adding client tokens\n    return { success: true, newBalance: 0 };\n  }\n\n  // Token charging\n  async chargeFinderTokens(finderId: string, amount: number, reason: string, chargedBy: string): Promise<boolean> {\n    // Implementation for charging finder tokens\n    return true;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async getActiveCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const result = await db.insert(categories).values(category).returning();\n    return result[0];\n  }\n\n  async updateCategory(id: string, updates: Partial<Category>): Promise<Category | undefined> {\n    const result = await db.update(categories).set(updates).where(eq(categories.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // User management operations\n  async banUser(userId: string, reason: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ isBanned: true, bannedReason: reason, bannedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async unbanUser(userId: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ isBanned: false, bannedReason: null, bannedAt: null })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async verifyUser(userId: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ isVerified: true })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async unverifyUser(userId: string): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ isVerified: false })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async verifyFinder(finderId: string): Promise<Finder | null> {\n    const result = await db.update(finders)\n      .set({ isVerified: true })\n      .where(eq(finders.id, finderId))\n      .returning();\n    return result[0] || null;\n  }\n\n  async unverifyFinder(finderId: string): Promise<Finder | null> {\n    const result = await db.update(finders)\n      .set({ isVerified: false })\n      .where(eq(finders.id, finderId))\n      .returning();\n    return result[0] || null;\n  }\n\n  // Withdrawal operations\n  async createWithdrawalRequest(request: InsertWithdrawalRequest): Promise<WithdrawalRequest> {\n    const result = await db.insert(withdrawalRequests).values(request).returning();\n    return result[0];\n  }\n\n  async getWithdrawalRequests(): Promise<any[]> {\n    return [];\n  }\n\n  async updateWithdrawalRequest(id: string, updates: Partial<WithdrawalRequest>): Promise<WithdrawalRequest | undefined> {\n    const result = await db.update(withdrawalRequests).set(updates).where(eq(withdrawalRequests.id, id)).returning();\n    return result[0];\n  }\n\n  async updateFinderBalance(finderId: string, amount: string): Promise<void> {\n    await db.update(finders).set({ availableBalance: amount }).where(eq(finders.id, finderId));\n  }\n\n  async releaseFundsToFinder(finderId: string, contractAmount: string): Promise<void> {\n    // Implementation for releasing funds\n  }\n\n  async getWithdrawalSettings(finderId: string): Promise<any> {\n    return {};\n  }\n\n  async updateWithdrawalSettings(finderId: string, settings: any): Promise<any> {\n    return settings;\n  }\n\n  async getWithdrawalsByFinderId(finderId: string): Promise<WithdrawalRequest[]> {\n    return await db.select().from(withdrawalRequests).where(eq(withdrawalRequests.finderId, finderId));\n  }\n\n  // Add all other required method implementations...\n  // (Due to length constraints, I'm providing a basic structure)\n  // The remaining methods should follow similar patterns\n\n  async getConversation(clientId: string, proposalId: string): Promise<Conversation | undefined> { return undefined; }\n  async getConversationById(conversationId: string): Promise<Conversation | undefined> { return undefined; }\n  async createConversation(conversation: InsertConversation): Promise<Conversation> { throw new Error('Not implemented'); }\n  async getConversationsByClientId(clientId: string): Promise<any[]> { return []; }\n  async getConversationsByFinderId(finderId: string): Promise<any[]> { return []; }\n  async getMessages(conversationId: string): Promise<any[]> { return []; }\n  async createMessage(message: InsertMessage): Promise<Message> { throw new Error('Not implemented'); }\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {}\n  async getFinderProfile(finderId: string): Promise<any> { return null; }\n\n  // Blog operations\n  async getBlogPosts(): Promise<BlogPost[]> { return []; }\n  async getBlogPost(id: string): Promise<BlogPost | undefined> { return undefined; }\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> { return undefined; }\n  async getPublishedBlogPosts(): Promise<BlogPost[]> { return []; }\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> { throw new Error('Not implemented'); }\n  async updateBlogPost(id: string, updates: Partial<BlogPost>): Promise<BlogPost | undefined> { return undefined; }\n  async deleteBlogPost(id: string): Promise<boolean> { return false; }\n\n  // Order submission operations\n  async createOrderSubmission(submission: InsertOrderSubmission): Promise<OrderSubmission> { throw new Error('Not implemented'); }\n  async getOrderSubmissionByContractId(contractId: string): Promise<OrderSubmission | undefined> { return undefined; }\n  async updateOrderSubmission(id: string, updates: Partial<OrderSubmission>): Promise<OrderSubmission | undefined> { return undefined; }\n  async getContractWithSubmission(contractId: string): Promise<any> { return undefined; }\n\n  // Finder level operations\n  async getFinderLevels(): Promise<FinderLevel[]> { return []; }\n  async getFinderLevel(id: string): Promise<FinderLevel | undefined> { return undefined; }\n  async createFinderLevel(level: InsertFinderLevel): Promise<FinderLevel> { throw new Error('Not implemented'); }\n  async updateFinderLevel(id: string, updates: Partial<FinderLevel>): Promise<FinderLevel | undefined> { return undefined; }\n  async deleteFinderLevel(id: string): Promise<boolean> { return false; }\n  async calculateFinderLevel(finderId: string): Promise<FinderLevel | undefined> { return undefined; }\n  async assignFinderLevel(finderId: string, levelId: string): Promise<void> {}\n\n  // Token distribution operations\n  async distributeMonthlyTokens(): Promise<{ distributed: number; alreadyDistributed: number; }> { return { distributed: 0, alreadyDistributed: 0 }; }\n  async getMonthlyDistributions(month: number, year: number): Promise<MonthlyTokenDistribution[]> { return []; }\n  async hasReceivedMonthlyTokens(finderId: string, month: number, year: number): Promise<boolean> { return false; }\n  async createMonthlyDistribution(distribution: InsertMonthlyTokenDistribution): Promise<MonthlyTokenDistribution> { throw new Error('Not implemented'); }\n\n  // Token grant operations\n  async grantTokensToFinder(finderId: string, amount: number, reason: string, grantedBy: string): Promise<TokenGrant> { throw new Error('Not implemented'); }\n  async grantTokensToClient(userId: string, amount: number, reason: string, grantedBy: string): Promise<ClientTokenGrant> { throw new Error('Not implemented'); }\n  async getTokenGrants(userId?: string): Promise<any[]> { return []; }\n  async getAllFindersForTokens(): Promise<Finder[]> { return []; }\n\n  // Strike system operations\n  async issueStrike(strike: InsertStrike): Promise<Strike> { throw new Error('Not implemented'); }\n  async getStrikesByUserId(userId: string): Promise<Strike[]> { return []; }\n  async getActiveStrikesCount(userId: string): Promise<number> { return 0; }\n  async updateStrike(id: string, updates: Partial<Strike>): Promise<Strike | undefined> { return undefined; }\n\n  // User restrictions operations\n  async createUserRestriction(restriction: InsertUserRestriction): Promise<UserRestriction> { throw new Error('Not implemented'); }\n  async getUserActiveRestrictions(userId: string): Promise<UserRestriction[]> { return []; }\n  async updateUserRestriction(id: string, updates: Partial<UserRestriction>): Promise<UserRestriction | undefined> { return undefined; }\n\n  // Dispute operations\n  async createDispute(dispute: InsertDispute): Promise<Dispute> { throw new Error('Not implemented'); }\n  async getDisputesByUserId(userId: string): Promise<Dispute[]> { return []; }\n  async getAllDisputes(): Promise<Dispute[]> { return []; }\n  async updateDispute(id: string, updates: Partial<Dispute>): Promise<Dispute | undefined> { return undefined; }\n\n  // Training operations\n  async assignTraining(training: InsertBehavioralTraining): Promise<BehavioralTraining> { throw new Error('Not implemented'); }\n  async getTrainingsByUserId(userId: string): Promise<BehavioralTraining[]> { return []; }\n  async updateTraining(id: string, updates: Partial<BehavioralTraining>): Promise<BehavioralTraining | undefined> { return undefined; }\n\n  // Badge operations\n  async awardBadge(badge: InsertTrustedBadge): Promise<TrustedBadge> { throw new Error('Not implemented'); }\n  async getUserBadges(userId: string): Promise<TrustedBadge[]> { return []; }\n  async updateBadge(id: string, updates: Partial<TrustedBadge>): Promise<TrustedBadge | undefined> { return undefined; }\n\n  // Strike analysis\n  async getUserStrikeLevel(userId: string): Promise<number> { return 0; }\n\n  // Token packages\n  async getAllTokenPackages(): Promise<TokenPackage[]> { return []; }\n  async getActiveTokenPackages(): Promise<TokenPackage[]> { return []; }\n  async getTokenPackage(id: string): Promise<TokenPackage | undefined> { return undefined; }\n  async createTokenPackage(tokenPackage: InsertTokenPackage): Promise<TokenPackage> { throw new Error('Not implemented'); }\n  async updateTokenPackage(id: string, updates: Partial<TokenPackage>): Promise<TokenPackage | undefined> { return undefined; }\n  async deleteTokenPackage(id: string): Promise<boolean> { return false; }\n\n  // Restricted words\n  async addRestrictedWord(word: InsertRestrictedWord): Promise<RestrictedWord> { throw new Error('Not implemented'); }\n  async getRestrictedWords(): Promise<RestrictedWord[]> { return []; }\n  async removeRestrictedWord(id: string): Promise<boolean> { return false; }\n  async updateRestrictedWord(id: string, updates: Partial<RestrictedWord>): Promise<RestrictedWord | undefined> { return undefined; }\n  async checkContentForRestrictedWords(content: string): Promise<string[]> { return []; }\n\n  // Support operations\n  async createSupportAgent(data: InsertSupportAgent & { agentId: string }): Promise<SupportAgent> { throw new Error('Not implemented'); }\n  async getSupportAgents(): Promise<any[]> { return []; }\n  async getSupportAgent(id: string): Promise<any> { return undefined; }\n  async updateSupportAgent(id: string, data: Partial<InsertSupportAgent>): Promise<SupportAgent | undefined> { return undefined; }\n  async suspendSupportAgent(id: string, reason: string): Promise<SupportAgent | undefined> { return undefined; }\n  async reactivateSupportAgent(id: string): Promise<SupportAgent | undefined> { return undefined; }\n  async deleteSupportAgent(id: string): Promise<boolean> { return false; }\n  async generateAgentId(): Promise<string> { return 'AGT001'; }\n\n  async getSupportDepartments(): Promise<any[]> { return []; }\n  async createSupportDepartment(data: InsertSupportDepartment): Promise<SupportDepartment> { throw new Error('Not implemented'); }\n  async updateSupportDepartment(id: string, data: Partial<InsertSupportDepartment>): Promise<SupportDepartment | undefined> { return undefined; }\n  async deleteSupportDepartment(id: string): Promise<boolean> { return false; }\n\n  async getUserSupportAgent(userId: string): Promise<SupportAgent | undefined> { return undefined; }\n  async generateWithdrawalRequestId(): Promise<string> { return 'WR-2025-001'; }\n\n  // Contact settings\n  async getContactSettings(): Promise<any> {\n    try {\n      const result = await db.select().from(contactSettings).limit(1);\n      return result[0] || null;\n    } catch (error) {\n      console.error('Error fetching contact settings:', error);\n      return null;\n    }\n  }\n\n  async updateContactSettings(settings: any): Promise<any> {\n    try {\n      // Check if a record exists\n      const existing = await db.select().from(contactSettings).limit(1);\n\n      if (existing.length > 0) {\n        // Update existing record\n        const result = await db.update(contactSettings)\n          .set({\n            ...settings,\n            updatedAt: new Date()\n          })\n          .where(eq(contactSettings.id, existing[0].id))\n          .returning();\n        return result[0];\n      } else {\n        // Create new record\n        const result = await db.insert(contactSettings)\n          .values({\n            ...settings,\n            updatedAt: new Date()\n          })\n          .returning();\n        return result[0];\n      }\n    } catch (error) {\n      console.error('Error updating contact settings:', error);\n      throw error;\n    }\n  }\n\n  // FAQ operations\n  async getFAQCategories(): Promise<any[]> { return []; }\n  async createFAQCategory(category: any): Promise<any> { return category; }\n  async updateFAQCategory(id: string, updates: any): Promise<any> { return updates; }\n  async deleteFAQCategory(id: string): Promise<boolean> { return false; }\n\n  // Verification operations\n  async submitVerification(verification: any): Promise<any> { return verification; }\n  async getVerificationByUserId(userId: string): Promise<any> { return null; }\n  async getPendingVerifications(): Promise<any[]> {\n    return await db.select({\n      id: userVerifications.id,\n      userId: userVerifications.userId,\n      documentType: userVerifications.documentType,\n      documentFrontImage: userVerifications.documentFrontImage,\n      documentBackImage: userVerifications.documentBackImage,\n      selfieImage: userVerifications.selfieImage,\n      status: userVerifications.status,\n      submittedAt: userVerifications.submittedAt,\n      reviewedAt: userVerifications.reviewedAt,\n      rejectionReason: userVerifications.rejectionReason,\n      user: {\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        role: users.role\n      }\n    })\n    .from(userVerifications)\n    .innerJoin(users, eq(userVerifications.userId, users.id))\n    .where(eq(userVerifications.status, 'pending'))\n    .orderBy(desc(userVerifications.submittedAt));\n  }\n  async updateVerificationStatus(id: string, status: string, reviewedBy: string, rejectionReason?: string): Promise<any> { return {}; }\n  async getVerificationById(id: string): Promise<any> { return null; }\n  async isVerificationRequired(): Promise<boolean> { return false; }\n\n  // Support tickets\n  async createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket> { throw new Error('Not implemented'); }\n  async getSupportTickets(filters?: any): Promise<any[]> { return []; }\n  async getSupportTicket(id: string): Promise<any> { return undefined; }\n  async updateSupportTicket(id: string, updates: Partial<SupportTicket>): Promise<SupportTicket | undefined> { return undefined; }\n  async deleteSupportTicket(id: string): Promise<boolean> { return false; }\n  async generateTicketNumber(): Promise<string> { return 'TKT-001'; }\n\n  async createSupportTicketMessage(message: any): Promise<SupportTicketMessage> { throw new Error('Not implemented'); }\n  async getSupportTicketMessages(ticketId: string): Promise<any[]> { return []; }\n  async markTicketMessageAsRead(messageId: string): Promise<void> {}\n\n  // Implementation for getProposalsForClient\n  async getProposalsForClient(clientId: string): Promise<Proposal[]> {\n    return await db.select().from(proposals).where(eq(proposals.clientId, clientId));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":42508},"server/strikeService.ts":{"content":"import { storage } from \"./storage\";\nimport { \n  type InsertStrike,\n  type InsertUserRestriction,\n  type InsertDispute,\n  type InsertBehavioralTraining,\n  type InsertTrustedBadge\n} from \"@shared/schema\";\n\n// Strike level definitions based on the requirements document\ninterface StrikeDefinition {\n  level: number;\n  consequence: string;\n  description: string;\n  restrictionType?: string;\n  restrictionDuration?: number; // in hours\n}\n\nconst strikeDefinitions: StrikeDefinition[] = [\n  { \n    level: 1, \n    consequence: \"Warning\", \n    description: \"Educational reminder with no penalty\" \n  },\n  { \n    level: 2, \n    consequence: \"System Restrictions\", \n    description: \"Limited features for 7 days\",\n    restrictionType: \"limited_features\",\n    restrictionDuration: 7 * 24 // 7 days in hours\n  },\n  { \n    level: 3, \n    consequence: \"Temporary Suspension\", \n    description: \"Account suspended for 30 days\",\n    restrictionType: \"suspended\",\n    restrictionDuration: 30 * 24 // 30 days in hours\n  },\n  { \n    level: 4, \n    consequence: \"Permanent Ban\", \n    description: \"Account blacklisted permanently\",\n    restrictionType: \"banned\",\n    restrictionDuration: undefined // permanent\n  }\n];\n\n// Offense definitions from the requirements document\ninterface OffenseDefinition {\n  offense: string;\n  strikeLevel: number;\n  applicableRoles: string[];\n  resolution: string;\n}\n\nconst clientOffenses: OffenseDefinition[] = [\n  {\n    offense: \"No-show or ghosting after find match\",\n    strikeLevel: 1,\n    applicableRoles: [\"client\"],\n    resolution: \"Warning + auto-removal of find\"\n  },\n  {\n    offense: \"Fake or malicious find\",\n    strikeLevel: 2,\n    applicableRoles: [\"client\"],\n    resolution: \"Review + block posting for 7 days\"\n  },\n  {\n    offense: \"Low review average\",\n    strikeLevel: 2,\n    applicableRoles: [\"client\"],\n    resolution: \"7-day review & education period\"\n  },\n  {\n    offense: \"Refusing payment after confirmed find\",\n    strikeLevel: 3,\n    applicableRoles: [\"client\"],\n    resolution: \"Escrow payout to Finder + 30-day ban\"\n  },\n  {\n    offense: \"Abuse or harassment of Finders\",\n    strikeLevel: 3,\n    applicableRoles: [\"client\"],\n    resolution: \"Investigation by support team\"\n  }\n];\n\nconst finderOffenses: OffenseDefinition[] = [\n  {\n    offense: \"Repeated no-shows\",\n    strikeLevel: 2,\n    applicableRoles: [\"finder\"],\n    resolution: \"Limited applications for 7 days\"\n  },\n  {\n    offense: \"Toxic communication\",\n    strikeLevel: 2,\n    applicableRoles: [\"finder\"],\n    resolution: \"Temporarily muted + counseling module\"\n  },\n  {\n    offense: \"Lying about completion\",\n    strikeLevel: 3,\n    applicableRoles: [\"finder\"],\n    resolution: \"Possible platform removal\"\n  },\n  {\n    offense: \"Uploading fake proof\",\n    strikeLevel: 3,\n    applicableRoles: [\"finder\"],\n    resolution: \"Escalated to ban on third offense\"\n  },\n  {\n    offense: \"Impersonation\",\n    strikeLevel: 4,\n    applicableRoles: [\"finder\"],\n    resolution: \"Immediate permanent ban\"\n  },\n  {\n    offense: \"Offering banned/illegal items\",\n    strikeLevel: 4,\n    applicableRoles: [\"finder\"],\n    resolution: \"Blacklist + report to authorities\"\n  }\n];\n\nexport class StrikeService {\n  /**\n   * Issue a strike to a user based on offense type\n   */\n  async issueStrikeByOffense(\n    userId: string,\n    offenseType: string,\n    evidence: string,\n    issuedBy: string,\n    userRole: string,\n    contextId?: string // contract, find, or proposal ID for context\n  ) {\n    // Find the offense definition\n    const allOffenses = [...clientOffenses, ...finderOffenses];\n    const offense = allOffenses.find(o => \n      o.offense === offenseType && o.applicableRoles.includes(userRole)\n    );\n    \n    if (!offense) {\n      throw new Error(`Invalid offense type \"${offenseType}\" for role \"${userRole}\"`);\n    }\n\n    // Check current strike level\n    const currentStrikes = await storage.getActiveStrikesCount(userId);\n    const newStrikeLevel = currentStrikes + 1;\n    \n    // Issue the strike\n    const strike = await storage.issueStrike({\n      userId,\n      strikeLevel: newStrikeLevel,\n      offense: offense.offense,\n      offenseType,\n      evidence,\n      issuedBy\n    });\n\n    // Apply consequences based on strike level\n    await this.applyStrikeConsequences(userId, newStrikeLevel, offense.resolution, issuedBy);\n\n    return {\n      strike,\n      consequences: strikeDefinitions.find(s => s.level === newStrikeLevel),\n      nextLevel: strikeDefinitions.find(s => s.level === newStrikeLevel + 1)\n    };\n  }\n\n  /**\n   * Apply consequences for a strike level\n   */\n  private async applyStrikeConsequences(\n    userId: string,\n    strikeLevel: number,\n    resolution: string,\n    issuedBy: string\n  ) {\n    const definition = strikeDefinitions.find(s => s.level === strikeLevel);\n    if (!definition) return;\n\n    // Level 1: Warning only - no restrictions\n    if (strikeLevel === 1) {\n      return;\n    }\n\n    // Level 2-4: Apply restrictions\n    if (definition.restrictionType) {\n      const endDate = definition.restrictionDuration \n        ? new Date(Date.now() + definition.restrictionDuration * 60 * 60 * 1000)\n        : null; // permanent for level 4\n\n      await storage.createUserRestriction({\n        userId,\n        restrictionType: definition.restrictionType,\n        reason: `Strike Level ${strikeLevel}: ${definition.description}`,\n        endDate,\n        createdBy: issuedBy\n      });\n\n      // For permanent bans, also update user record\n      if (strikeLevel === 4) {\n        await storage.updateUser(userId, {\n          isBanned: true,\n          bannedReason: `Strike Level 4: ${definition.description}`,\n          bannedAt: new Date()\n        });\n      }\n    }\n\n    // Assign behavioral training for levels 2 and 3\n    if (strikeLevel === 2 || strikeLevel === 3) {\n      const moduleType = strikeLevel === 2 ? 'communication' : 'reliability';\n      await storage.assignTraining({\n        userId,\n        moduleType\n      });\n    }\n  }\n\n  /**\n   * Check if user has active restrictions\n   */\n  async getUserRestrictions(userId: string) {\n    const restrictions = await storage.getUserActiveRestrictions(userId);\n    const strikes = await storage.getStrikesByUserId(userId);\n    const activeStrikes = strikes.filter(s => s.status === 'active');\n    \n    return {\n      restrictions,\n      activeStrikes,\n      strikeLevel: activeStrikes.length,\n      canPost: !restrictions.some(r => r.restrictionType === 'posting' || r.restrictionType === 'suspended' || r.restrictionType === 'banned'),\n      canApply: !restrictions.some(r => r.restrictionType === 'applications' || r.restrictionType === 'suspended' || r.restrictionType === 'banned'),\n      canMessage: !restrictions.some(r => r.restrictionType === 'messaging' || r.restrictionType === 'suspended' || r.restrictionType === 'banned'),\n      isSuspended: restrictions.some(r => r.restrictionType === 'suspended'),\n      isBanned: restrictions.some(r => r.restrictionType === 'banned')\n    };\n  }\n\n  /**\n   * Submit a dispute for a strike\n   */\n  async submitDispute(\n    userId: string,\n    strikeId: string,\n    description: string,\n    evidence?: string\n  ) {\n    return await storage.createDispute({\n      userId,\n      strikeId,\n      type: 'strike_appeal',\n      description,\n      evidence\n    });\n  }\n\n  /**\n   * Award trusted badge to user\n   */\n  async awardTrustedBadge(userId: string, badgeType: string) {\n    // Check if user qualifies for trusted badge (strike-free for 90+ days)\n    const strikes = await storage.getStrikesByUserId(userId);\n    const recentStrikes = strikes.filter(s => {\n      const ninetyDaysAgo = new Date();\n      ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\n      return s.createdAt && s.createdAt > ninetyDaysAgo;\n    });\n\n    if (recentStrikes.length === 0) {\n      return await storage.awardBadge({\n        userId,\n        badgeType\n      });\n    }\n    \n    throw new Error(\"User has strikes within the last 90 days\");\n  }\n\n  /**\n   * Get strike statistics for admin dashboard\n   */\n  async getStrikeStatistics() {\n    // Get all active strikes\n    const allUsers = await storage.getAllUsers();\n    const stats = {\n      totalUsers: allUsers.length,\n      usersWithActiveStrikes: 0,\n      strikeLevelBreakdown: { 1: 0, 2: 0, 3: 0, 4: 0 },\n      recentStrikes: 0,\n      disputesInReview: 0\n    };\n\n    // Calculate statistics\n    for (const user of allUsers) {\n      const activeStrikes = await storage.getActiveStrikesCount(user.id);\n      if (activeStrikes > 0) {\n        stats.usersWithActiveStrikes++;\n        stats.strikeLevelBreakdown[Math.min(activeStrikes, 4) as keyof typeof stats.strikeLevelBreakdown]++;\n      }\n    }\n\n    // Get recent strikes (last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    for (const user of allUsers) {\n      const strikes = await storage.getStrikesByUserId(user.id);\n      const recentStrikes = strikes.filter(s => s.createdAt && s.createdAt > thirtyDaysAgo);\n      stats.recentStrikes += recentStrikes.length;\n    }\n\n    // Get pending disputes\n    const disputes = await storage.getAllDisputes();\n    stats.disputesInReview = disputes.filter(d => d.status === 'pending' || d.status === 'investigating').length;\n\n    return stats;\n  }\n\n  /**\n   * Get available offense types for a role\n   */\n  getOffenseTypes(role: string) {\n    if (role === 'client') return clientOffenses;\n    if (role === 'finder') return finderOffenses;\n    return [];\n  }\n\n  /**\n   * Expire old strikes and restrictions (should be run as a cron job)\n   */\n  async cleanupExpiredData() {\n    const now = new Date();\n    \n    // Expire old strikes (90 days)\n    const allUsers = await storage.getAllUsers();\n    for (const user of allUsers) {\n      const strikes = await storage.getStrikesByUserId(user.id);\n      for (const strike of strikes) {\n        if (strike.expiresAt && strike.expiresAt <= now && strike.status === 'active') {\n          await storage.updateStrike(strike.id, { status: 'expired' });\n        }\n      }\n    }\n\n    // Deactivate expired restrictions\n    for (const user of allUsers) {\n      const restrictions = await storage.getUserActiveRestrictions(user.id);\n      for (const restriction of restrictions) {\n        if (restriction.endDate && restriction.endDate <= now && restriction.isActive) {\n          await storage.updateUserRestriction(restriction.id, { isActive: false });\n        }\n      }\n    }\n  }\n}\n\nexport const strikeService = new StrikeService();","size_bytes":10477},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { InferSelectModel, InferInsertModel } from 'drizzle-orm';\n\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull(), // 'client', 'finder', 'admin'\n  isVerified: boolean(\"is_verified\").default(false),\n  identityVerificationStatus: text(\"identity_verification_status\").default(\"not_verified\"), // 'not_verified', 'pending', 'verified', 'rejected'\n  isBanned: boolean(\"is_banned\").default(false),\n  bannedReason: text(\"banned_reason\"),\n  bannedAt: timestamp(\"banned_at\"),\n  findertokenBalance: integer(\"findertoken_balance\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const finders = pgTable(\"finders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  jobsCompleted: integer(\"jobs_completed\").default(0),\n  totalEarned: decimal(\"total_earned\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  availableBalance: decimal(\"available_balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  averageRating: decimal(\"average_rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  currentLevelId: varchar(\"current_level_id\").references(() => finderLevels.id), // references finder levels table\n  bio: text(\"bio\"),\n  category: text(\"category\"), // Finder's specialty category\n  categories: text(\"categories\").array(), // New field for multiple categories\n  skills: text(\"skills\").array(),\n  hourlyRate: decimal(\"hourly_rate\", { precision: 8, scale: 2 }),\n  availability: text(\"availability\").default(\"full-time\"),\n  phone: text(\"phone\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  findertokenBalance: integer(\"findertoken_balance\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const findertokens = pgTable(\"findertokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  balance: integer(\"balance\").default(0),\n});\n\nexport const finds = pgTable(\"finds\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  budgetMin: text(\"budget_min\"),\n  budgetMax: text(\"budget_max\"),\n  timeframe: text(\"timeframe\"),\n  status: text(\"status\").default(\"open\"), // 'open', 'in_progress', 'completed', 'under_review'\n  findertokenCost: integer(\"findertoken_cost\").default(1),\n  attachments: text(\"attachments\").array(), // Array of file paths stored locally\n  flaggedWords: text(\"flagged_words\").array(), // Array of detected restricted words\n  reviewReason: text(\"review_reason\"), // Reason why find is under review\n  isHighBudget: boolean(\"is_high_budget\").default(false), // High budget posting requiring findertokens\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Restricted Words table for admin management\nexport const restrictedWords = pgTable(\"restricted_words\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: text(\"word\").notNull().unique(),\n  category: text(\"category\").default(\"general\"), // Category of restriction\n  severity: text(\"severity\").default(\"flag\"), // 'flag', 'block', 'review'\n  addedBy: varchar(\"added_by\").references(() => users.id).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const proposals = pgTable(\"proposals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  findId: varchar(\"find_id\").references(() => finds.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  approach: text(\"approach\").notNull(),\n  price: text(\"price\").notNull(),\n  timeline: text(\"timeline\").notNull(),\n  notes: text(\"notes\"),\n  status: text(\"status\").default(\"pending\"), // 'pending', 'accepted', 'rejected'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contracts = pgTable(\"contracts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  findId: varchar(\"find_id\").references(() => finds.id).notNull(),\n  proposalId: varchar(\"proposal_id\").references(() => proposals.id).notNull(),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  escrowStatus: text(\"escrow_status\").default(\"held\"), // 'held', 'in_progress', 'completed', 'released'\n  isCompleted: boolean(\"is_completed\").default(false),\n  hasSubmission: boolean(\"has_submission\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contractId: varchar(\"contract_id\").references(() => contracts.id).notNull(),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id),\n  amount: integer(\"amount\").notNull(),\n  type: text(\"type\").notNull(), // 'findertoken_purchase', 'proposal', 'refund'\n  description: text(\"description\"),\n  reference: text(\"reference\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const adminSettings = pgTable(\"admin_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tokenPackages = pgTable(\"token_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  tokenCount: integer(\"token_count\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  proposalId: varchar(\"proposal_id\").references(() => proposals.id).notNull(),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  attachmentPaths: text(\"attachment_paths\").array(), // Array of file paths in object storage\n  attachmentNames: text(\"attachment_names\").array(), // Array of original file names\n  quotedMessageId: text(\"quoted_message_id\").references((): any => messages.id),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const withdrawalSettings = pgTable(\"withdrawal_settings\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  minimumAmount: text(\"minimum_amount\").notNull().default(\"1000\"),\n  processingFee: text(\"processing_fee\").notNull().default(\"45\"),\n  processingTimeHours: integer(\"processing_time_hours\").notNull().default(24),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const withdrawalRequests = pgTable(\"withdrawal_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requestId: varchar(\"request_id\").notNull().unique(), // Human-readable request ID like \"WR-2025-001\"\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"pending\"), // 'pending', 'processing', 'approved', 'rejected'\n  paymentMethod: text(\"payment_method\").notNull(), // 'bank_transfer', 'paypal', 'crypto'\n  paymentDetails: text(\"payment_details\").notNull(), // JSON string with payment info\n  adminNotes: text(\"admin_notes\"),\n  processedBy: varchar(\"processed_by\").references(() => users.id),\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  isPublished: boolean(\"is_published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orderSubmissions = pgTable(\"order_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contractId: varchar(\"contract_id\").references(() => contracts.id).notNull(),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  submissionText: text(\"submission_text\"),\n  attachmentPaths: text(\"attachment_paths\").array(), // array of file paths\n  status: text(\"status\").default(\"submitted\"), // 'submitted', 'accepted', 'rejected'\n  clientFeedback: text(\"client_feedback\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  autoReleaseDate: timestamp(\"auto_release_date\"), // 3 days after acceptance or 5 days after submission\n});\n\nexport const finderLevels = pgTable(\"finder_levels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  minEarnedAmount: decimal(\"min_earned_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  minJobsCompleted: integer(\"min_jobs_completed\").default(0),\n  minReviewPercentage: integer(\"min_review_percentage\").default(0), // 0-100, average review score\n  icon: text(\"icon\"), // icon name or URL\n  iconUrl: text(\"icon_url\"), // custom uploaded icon URL\n  color: text(\"color\"), // hex color code\n  order: integer(\"order\").notNull(), // display order\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tokenCharges = pgTable(\"token_charges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  amount: integer(\"amount\").notNull(), // number of tokens charged\n  reason: text(\"reason\").notNull(), // reason for charge\n  chargedBy: varchar(\"charged_by\").references(() => users.id).notNull(), // admin who charged\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const monthlyTokenDistributions = pgTable(\"monthly_token_distributions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  year: integer(\"year\").notNull(),\n  tokensGranted: integer(\"tokens_granted\").default(20),\n  distributedAt: timestamp(\"distributed_at\").defaultNow(),\n});\n\nexport const tokenGrants = pgTable(\"token_grants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  finderId: varchar(\"finder_id\").references(() => finders.id).notNull(),\n  amount: integer(\"amount\").notNull(), // number of tokens granted\n  reason: text(\"reason\").notNull(), // reason for grant\n  grantedBy: varchar(\"granted_by\").references(() => users.id).notNull(), // admin who granted\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clientTokenGrants = pgTable(\"client_token_grants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  amount: integer(\"amount\").notNull(), // number of tokens granted\n  reason: text(\"reason\").notNull(), // reason for grant\n  grantedBy: varchar(\"granted_by\").references(() => users.id).notNull(), // admin who granted\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Strike System Tables\nexport const strikes = pgTable(\"strikes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  strikeLevel: integer(\"strike_level\").notNull(), // 1, 2, 3, 4\n  offense: text(\"offense\").notNull(), // Description of the offense\n  offenseType: text(\"offense_type\").notNull(), // Category of offense\n  evidence: text(\"evidence\"), // JSON string with evidence details\n  issuedBy: varchar(\"issued_by\").references(() => users.id).notNull(),\n  status: text(\"status\").default(\"active\"), // 'active', 'appealed', 'resolved', 'expired'\n  appealReason: text(\"appeal_reason\"),\n  appealedAt: timestamp(\"appealed_at\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  expiresAt: timestamp(\"expires_at\"), // When strike can be cleared (90 days for rollback)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userRestrictions = pgTable(\"user_restrictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  restrictionType: text(\"restriction_type\").notNull(), // 'posting', 'applications', 'messaging', 'suspended', 'banned'\n  reason: text(\"reason\").notNull(),\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\"), // null for permanent restrictions\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const disputes = pgTable(\"disputes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  strikeId: varchar(\"strike_id\").references(() => strikes.id),\n  contractId: varchar(\"contract_id\").references(() => contracts.id),\n  findId: varchar(\"find_id\").references(() => finds.id),\n  type: text(\"type\").notNull(), // 'strike_appeal', 'contract_dispute', 'payment_dispute'\n  description: text(\"description\").notNull(),\n  evidence: text(\"evidence\"), // JSON string with files, screenshots, etc.\n  status: text(\"status\").default(\"pending\"), // 'pending', 'investigating', 'resolved', 'rejected'\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  resolution: text(\"resolution\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\nexport const behavioralTraining = pgTable(\"behavioral_training\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  moduleType: text(\"module_type\").notNull(), // 'communication', 'reliability', 'fraud_prevention'\n  status: text(\"status\").default(\"assigned\"), // 'assigned', 'in_progress', 'completed'\n  assignedDate: timestamp(\"assigned_date\").defaultNow(),\n  completedDate: timestamp(\"completed_date\"),\n  score: integer(\"score\"), // percentage score if applicable\n});\n\nexport const trustedBadges = pgTable(\"trusted_badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  badgeType: text(\"badge_type\").notNull(), // 'trusted_client', 'trusted_finder', 'referral_champion'\n  earnedDate: timestamp(\"earned_date\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n  validUntil: timestamp(\"valid_until\"), // null for permanent badges\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  finder: one(finders, {\n    fields: [users.id],\n    references: [finders.userId],\n  }),\n  finds: many(finds),\n  clientContracts: many(contracts, { relationName: \"clientContracts\" }),\n  finderContracts: many(contracts, { relationName: \"finderContracts\" }),\n  clientReviews: many(reviews, { relationName: \"clientReviews\" }),\n  finderReviews: many(reviews, { relationName: \"finderReviews\" }),\n  clientConversations: many(conversations, { relationName: \"clientConversations\" }),\n  sentMessages: many(messages, { relationName: \"sentMessages\" }),\n}));\n\nexport const findersRelations = relations(finders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [finders.userId],\n    references: [users.id],\n  }),\n  findertokens: one(findertokens),\n  withdrawalSettings: one(withdrawalSettings),\n  currentLevel: one(finderLevels, {\n    fields: [finders.currentLevelId],\n    references: [finderLevels.id],\n  }),\n  proposals: many(proposals),\n  contracts: many(contracts, { relationName: \"finderContracts\" }),\n  transactions: many(transactions),\n  reviews: many(reviews, { relationName: \"finderReviews\" }),\n  finderConversations: many(conversations, { relationName: \"finderConversations\" }),\n  withdrawalRequests: many(withdrawalRequests),\n}));\n\nexport const findsRelations = relations(finds, ({ one, many }) => ({\n  client: one(users, {\n    fields: [finds.clientId],\n    references: [users.id],\n  }),\n  proposals: many(proposals),\n  contracts: many(contracts),\n}));\n\nexport const proposalsRelations = relations(proposals, ({ one }) => ({\n  find: one(finds, {\n    fields: [proposals.findId],\n    references: [finds.id],\n  }),\n  finder: one(finders, {\n    fields: [proposals.finderId],\n    references: [finders.id],\n  }),\n}));\n\nexport const contractsRelations = relations(contracts, ({ one, many }) => ({\n  find: one(finds, {\n    fields: [contracts.findId],\n    references: [finds.id],\n  }),\n  proposal: one(proposals, {\n    fields: [contracts.proposalId],\n    references: [proposals.id],\n  }),\n  client: one(users, {\n    fields: [contracts.clientId],\n    references: [users.id],\n  }),\n  finder: one(finders, {\n    fields: [contracts.finderId],\n    references: [finders.id],\n  }),\n  orderSubmissions: many(orderSubmissions),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  contract: one(contracts, {\n    fields: [reviews.contractId],\n    references: [contracts.id],\n  }),\n  client: one(users, {\n    fields: [reviews.clientId],\n    references: [users.id],\n    relationName: \"clientReviews\",\n  }),\n  finder: one(users, {\n    fields: [reviews.finderId],\n    references: [users.id],\n    relationName: \"finderReviews\",\n  }),\n}));\n\nexport const findertokensRelations = relations(findertokens, ({ one }) => ({\n  finder: one(finders, {\n    fields: [findertokens.finderId],\n    references: [finders.id],\n  }),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  finder: one(finders, {\n    fields: [transactions.finderId],\n    references: [finders.id],\n  }),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  client: one(users, {\n    fields: [conversations.clientId],\n    references: [users.id],\n    relationName: \"clientConversations\",\n  }),\n  finder: one(finders, {\n    fields: [conversations.finderId],\n    references: [finders.id],\n    relationName: \"finderConversations\",\n  }),\n  proposal: one(proposals, {\n    fields: [conversations.proposalId],\n    references: [proposals.id],\n  }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, {\n    fields: [messages.conversationId],\n    references: [conversations.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sentMessages\",\n  }),\n}));\n\nexport const blogPostsRelations = relations(blogPosts, ({ one }) => ({\n  author: one(users, {\n    fields: [blogPosts.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const orderSubmissionsRelations = relations(orderSubmissions, ({ one }) => ({\n  contract: one(contracts, {\n    fields: [orderSubmissions.contractId],\n    references: [contracts.id],\n  }),\n  finder: one(finders, {\n    fields: [orderSubmissions.finderId],\n    references: [finders.id],\n  }),\n}));\n\n// Removed withdrawalSettingsRelations as withdrawalSettings table doesn't have a finderId field\n// This table contains global withdrawal settings, not finder-specific settings\n\nexport const withdrawalRequestsRelations = relations(withdrawalRequests, ({ one }) => ({\n  finder: one(finders, {\n    fields: [withdrawalRequests.finderId],\n    references: [finders.id],\n  }),\n  processedBy: one(users, {\n    fields: [withdrawalRequests.processedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const finderLevelsRelations = relations(finderLevels, ({ many }) => ({\n  finders: many(finders),\n}));\n\nexport const monthlyTokenDistributionsRelations = relations(monthlyTokenDistributions, ({ one }) => ({\n  finder: one(finders, {\n    fields: [monthlyTokenDistributions.finderId],\n    references: [finders.id],\n  }),\n}));\n\nexport const tokenGrantsRelations = relations(tokenGrants, ({ one }) => ({\n  finder: one(finders, {\n    fields: [tokenGrants.finderId],\n    references: [finders.id],\n  }),\n  grantedBy: one(users, {\n    fields: [tokenGrants.grantedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const clientTokenGrantsRelations = relations(clientTokenGrants, ({ one }) => ({\n  client: one(users, {\n    fields: [clientTokenGrants.clientId],\n    references: [users.id],\n  }),\n  grantedBy: one(users, {\n    fields: [clientTokenGrants.grantedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const restrictedWordsRelations = relations(restrictedWords, ({ one }) => ({\n  addedByUser: one(users, {\n    fields: [restrictedWords.addedBy],\n    references: [users.id],\n  }),\n}));\n\n// Export types\nexport type User = InferSelectModel<typeof users>;\nexport type InsertUser = InferInsertModel<typeof users>;\nexport type Finder = InferSelectModel<typeof finders> & { categories?: string[] | null };\nexport type InsertFinder = InferInsertModel<typeof finders>;\nexport type Find = InferSelectModel<typeof finds>;\nexport type InsertFind = InferInsertModel<typeof finds>;\nexport type Proposal = InferSelectModel<typeof proposals>;\nexport type InsertProposal = InferInsertModel<typeof proposals>;\nexport type Contract = InferSelectModel<typeof contracts>;\nexport type InsertContract = InferInsertModel<typeof contracts>;\nexport type Review = InferSelectModel<typeof reviews>;\nexport type InsertReview = InferInsertModel<typeof reviews>;\nexport type Findertoken = InferSelectModel<typeof findertokens>;\nexport type InsertFindertoken = InferInsertModel<typeof findertokens>;\nexport type Transaction = InferSelectModel<typeof transactions>;\nexport type InsertTransaction = InferInsertModel<typeof transactions>;\nexport type AdminSetting = InferSelectModel<typeof adminSettings>;\nexport type InsertAdminSetting = InferInsertModel<typeof adminSettings>;\nexport type Conversation = InferSelectModel<typeof conversations>;\nexport type InsertConversation = InferInsertModel<typeof conversations>;\nexport type Message = InferSelectModel<typeof messages>;\nexport type InsertMessage = InferInsertModel<typeof messages>;\nexport type FinderLevel = InferSelectModel<typeof finderLevels>;\nexport type InsertFinderLevel = InferInsertModel<typeof finderLevels>;\nexport type BlogPost = InferSelectModel<typeof blogPosts>;\nexport type InsertBlogPost = InferInsertModel<typeof blogPosts>;\nexport type TokenPackage = InferSelectModel<typeof tokenPackages>;\nexport type InsertTokenPackage = InferInsertModel<typeof tokenPackages>;\nexport type OrderSubmission = InferSelectModel<typeof orderSubmissions>;\nexport type InsertOrderSubmission = InferInsertModel<typeof orderSubmissions>;\n\n// Categories\nexport const insertCategorySchema = createInsertSchema(categories);\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = InferSelectModel<typeof categories>;\n\n// Withdrawal Settings\nexport const insertWithdrawalSettingsSchema = createInsertSchema(withdrawalSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertWithdrawalSettings = z.infer<typeof insertWithdrawalSettingsSchema>;\nexport type WithdrawalSettings = InferSelectModel<typeof withdrawalSettings>;\n\n// Withdrawal Requests\nexport const insertWithdrawalRequestSchema = createInsertSchema(withdrawalRequests);\nexport type InsertWithdrawalRequest = z.infer<typeof insertWithdrawalRequestSchema>;\nexport type WithdrawalRequest = InferSelectModel<typeof withdrawalRequests>;\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFinderSchema = createInsertSchema(finders).omit({\n  id: true,\n});\n\nexport const insertFindSchema = createInsertSchema(finds).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProposalSchema = createInsertSchema(proposals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContractSchema = createInsertSchema(contracts).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFindertokenSchema = createInsertSchema(findertokens).omit({\n  id: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAdminSettingSchema = createInsertSchema(adminSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertTokenChargeSchema = createInsertSchema(tokenCharges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMonthlyTokenDistributionSchema = createInsertSchema(monthlyTokenDistributions).omit({\n  id: true,\n  distributedAt: true,\n});\n\nexport const insertTokenGrantSchema = createInsertSchema(tokenGrants).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Monthly Token Distribution Types\nexport type MonthlyTokenDistribution = InferSelectModel<typeof monthlyTokenDistributions> & {\n  finder?: {\n    id: string;\n    user?: {\n      firstName: string | null;\n      lastName: string | null;\n      email: string;\n    };\n  };\n};\nexport type InsertMonthlyTokenDistribution = z.infer<typeof insertMonthlyTokenDistributionSchema>;\n\n// Token Grant Types\nexport type TokenGrant = InferSelectModel<typeof tokenGrants>;\nexport type InsertTokenGrant = z.infer<typeof insertTokenGrantSchema>;\n\n// Client Token Grant Types\nexport type ClientTokenGrant = InferSelectModel<typeof clientTokenGrants>;\nexport const insertClientTokenGrantSchema = createInsertSchema(clientTokenGrants).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertClientTokenGrant = z.infer<typeof insertClientTokenGrantSchema>;\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  lastMessageAt: true,\n  createdAt: true,\n});\n\nexport const insertFinderLevelSchema = createInsertSchema(finderLevels).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUserType = z.infer<typeof insertUserSchema>;\nexport type InsertFinderType = z.infer<typeof insertFinderSchema>;\nexport type InsertFindType = z.infer<typeof insertFindSchema>;\nexport type InsertProposalType = z.infer<typeof insertProposalSchema>;\nexport type InsertContractType = z.infer<typeof insertContractSchema>;\nexport type InsertReviewType = z.infer<typeof insertReviewSchema>;\nexport type InsertTokenChargeType = z.infer<typeof insertTokenChargeSchema>;\nexport type InsertTransactionType = z.infer<typeof insertTransactionSchema>;\nexport type InsertAdminSettingType = z.infer<typeof insertAdminSettingSchema>;\nexport type InsertConversationType = z.infer<typeof insertConversationSchema>;\nexport type InsertMessageType = z.infer<typeof insertMessageSchema>;\nexport type InsertBlogPostType = z.infer<typeof insertBlogPostSchema>;\n\n// Token Package schemas\nexport const insertTokenPackageSchema = createInsertSchema(tokenPackages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Order Submissions\nexport const insertOrderSubmissionSchema = createInsertSchema(orderSubmissions).omit({\n  id: true,\n  submittedAt: true,\n  reviewedAt: true,\n  autoReleaseDate: true,\n});\nexport type InsertOrderSubmissionType = z.infer<typeof insertOrderSubmissionSchema>;\n\n// Support Agent System Tables\nexport const supportAgents = pgTable(\"support_agents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  agentId: varchar(\"agent_id\").notNull().unique(), // Human-readable ID like \"AGT001\"\n  department: text(\"department\").notNull(), // 'general', 'technical', 'billing', 'disputes'\n  permissions: text(\"permissions\").array().notNull(), // Array of permission strings\n  isActive: boolean(\"is_active\").default(true),\n  maxTicketsPerDay: integer(\"max_tickets_per_day\").default(20),\n  responseTimeTarget: integer(\"response_time_target\").default(24), // hours\n  specializations: text(\"specializations\").array(), // Areas of expertise\n  languages: text(\"languages\").array().default([\"en\"]), // Languages spoken\n  assignedBy: varchar(\"assigned_by\").references(() => users.id).notNull(),\n  suspendedAt: timestamp(\"suspended_at\"),\n  suspensionReason: text(\"suspension_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type SelectSupportAgent = InferSelectModel<typeof supportAgents>;\n\n// Contact Settings Table\nexport const contactSettings = pgTable(\"contact_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supportEmail: text(\"support_email\").default(\"findermeisterinnovations@gmail.com\"),\n  supportPhone: text(\"support_phone\").default(\"+234-7039391065\"),\n  officeAddress: text(\"office_address\").default(\"18 Back of Road safety office, Moniya, Ibadan\"),\n  businessHours: text(\"business_hours\").default(\"Mon-Fri, 9 AM - 6 PM WAT\"),\n  facebookUrl: text(\"facebook_url\").default(\"https://facebook.com/findermeister\"),\n  twitterUrl: text(\"twitter_url\").default(\"https://twitter.com/findermeister\"),\n  instagramUrl: text(\"instagram_url\").default(\"https://instagram.com/findermeister\"),\n  tiktokUrl: text(\"tiktok_url\").default(\"https://tiktok.com/@findermeisterinnovations\"),\n  linkedinUrl: text(\"linkedin_url\").default(\"https://linkedin.com/company/findermeister\"),\n  whatsappNumber: text(\"whatsapp_number\").default(\"+234-7039391065\"),\n  responseTimeLow: text(\"response_time_low\").default(\"2-3 business days\"),\n  responseTimeMedium: text(\"response_time_medium\").default(\"1-2 business days\"),\n  responseTimeHigh: text(\"response_time_high\").default(\"4-8 hours\"),\n  responseTimeUrgent: text(\"response_time_urgent\").default(\"1-2 hours\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// FAQ Categories Table\nexport const faqCategories = pgTable(\"faq_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").default(\"HelpCircle\"),\n  color: text(\"color\").default(\"bg-blue-100 text-blue-800\"),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User Verification Table\nexport const userVerifications = pgTable(\"user_verifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  documentType: text(\"document_type\").notNull(), // 'national_id', 'passport', 'drivers_license'\n  documentFrontImage: text(\"document_front_image\").notNull(),\n  documentBackImage: text(\"document_back_image\"),\n  selfieImage: text(\"selfie_image\").notNull(),\n  status: text(\"status\").default(\"pending\"), // 'pending', 'verified', 'rejected'\n  rejectionReason: text(\"rejection_reason\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UserVerification = InferSelectModel<typeof userVerifications>;\nexport type InsertUserVerification = InferInsertModel<typeof userVerifications>;\n\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketNumber: varchar(\"ticket_number\").notNull().unique(), // Human-readable ticket number\n  submitterName: text(\"submitter_name\").notNull(),\n  submitterEmail: text(\"submitter_email\").notNull(),\n  submitterId: varchar(\"submitter_id\").references(() => users.id), // null if anonymous\n  category: text(\"category\").notNull(),\n  priority: text(\"priority\").notNull(), // 'low', 'medium', 'high', 'urgent'\n  department: text(\"department\").notNull(),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  status: text(\"status\").default(\"open\"), // 'open', 'assigned', 'in_progress', 'resolved', 'closed'\n  assignedTo: varchar(\"assigned_to\").references(() => supportAgents.id),\n  assignedAt: timestamp(\"assigned_at\"),\n  responseTimeDeadline: timestamp(\"response_time_deadline\"),\n  firstResponseAt: timestamp(\"first_response_at\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  closedAt: timestamp(\"closed_at\"),\n  satisfactionRating: integer(\"satisfaction_rating\"), // 1-5 rating\n  satisfactionFeedback: text(\"satisfaction_feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const supportTicketMessages = pgTable(\"support_ticket_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => supportTickets.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => users.id),\n  senderType: text(\"sender_type\").notNull(), // 'user', 'agent', 'system'\n  senderName: text(\"sender_name\").notNull(),\n  senderEmail: text(\"sender_email\"),\n  content: text(\"content\").notNull(),\n  attachments: text(\"attachments\").array(),\n  isInternal: boolean(\"is_internal\").default(false), // Internal notes between agents\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const supportDepartments = pgTable(\"support_departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  color: text(\"color\").default(\"#3B82F6\"), // Hex color for UI\n  isActive: boolean(\"is_active\").default(true),\n  autoAssignments: boolean(\"auto_assignments\").default(true),\n  maxResponseTime: integer(\"max_response_time\").default(24), // hours\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Strike System Schemas\nexport const insertStrikeSchema = createInsertSchema(strikes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserRestrictionSchema = createInsertSchema(userRestrictions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDisputeSchema = createInsertSchema(disputes).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertBehavioralTrainingSchema = createInsertSchema(behavioralTraining).omit({\n  id: true,\n  assignedDate: true,\n});\n\nexport const insertTrustedBadgeSchema = createInsertSchema(trustedBadges).omit({\n  id: true,\n  earnedDate: true,\n});\n\n// Strike System Types\nexport type Strike = InferSelectModel<typeof strikes>;\nexport type InsertStrike = InferInsertModel<typeof strikes>;\nexport type SelectStrike = InferSelectModel<typeof strikes>;\n\nexport type UserRestriction = InferSelectModel<typeof userRestrictions>;\nexport type InsertUserRestriction = InferInsertModel<typeof userRestrictions>;\nexport type SelectUserRestriction = InferSelectModel<typeof userRestrictions>;\n\nexport type Dispute = InferSelectModel<typeof disputes>;\nexport type InsertDispute = InferInsertModel<typeof disputes>;\nexport type SelectDispute = InferSelectModel<typeof disputes>;\n\nexport type BehavioralTraining = InferSelectModel<typeof behavioralTraining>;\nexport type InsertBehavioralTraining = InferInsertModel<typeof behavioralTraining>;\nexport type SelectBehavioralTraining = InferSelectModel<typeof behavioralTraining>;\n\nexport type TrustedBadge = InferSelectModel<typeof trustedBadges>;\nexport type InsertTrustedBadge = InferInsertModel<typeof trustedBadges>;\nexport type SelectTrustedBadge = InferSelectModel<typeof trustedBadges>;\n\n// Support Agent Relations\nexport const supportAgentsRelations = relations(supportAgents, ({ one, many }) => ({\n  user: one(users, {\n    fields: [supportAgents.userId],\n    references: [users.id],\n  }),\n  assignedBy: one(users, {\n    fields: [supportAgents.assignedBy],\n    references: [users.id],\n  }),\n  assignedTickets: many(supportTickets),\n}));\n\nexport const supportTicketsRelations = relations(supportTickets, ({ one, many }) => ({\n  submitter: one(users, {\n    fields: [supportTickets.submitterId],\n    references: [users.id],\n  }),\n  assignedAgent: one(supportAgents, {\n    fields: [supportTickets.assignedTo],\n    references: [supportAgents.id],\n  }),\n  messages: many(supportTicketMessages),\n}));\n\nexport const supportTicketMessagesRelations = relations(supportTicketMessages, ({ one }) => ({\n  ticket: one(supportTickets, {\n    fields: [supportTicketMessages.ticketId],\n    references: [supportTickets.id],\n  }),\n  sender: one(users, {\n    fields: [supportTicketMessages.senderId],\n    references: [users.id],\n  }),\n}));\n\n\n// Support Agent Types\nexport type SupportAgent = InferSelectModel<typeof supportAgents>;\nexport type SupportTicket = InferSelectModel<typeof supportTickets>;\nexport type SupportTicketMessage = InferSelectModel<typeof supportTicketMessages>;\nexport type SupportDepartment = InferSelectModel<typeof supportDepartments>;\n\nexport type InsertSupportAgent = InferInsertModel<typeof supportAgents>;\nexport type InsertSupportTicket = InferInsertModel<typeof supportTickets>;\nexport type InsertSupportDepartment = InferInsertModel<typeof supportDepartments>;\n\nexport const insertSupportAgentSchema = createInsertSchema(supportAgents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportDepartmentSchema = createInsertSchema(supportDepartments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const faqs = pgTable(\"faqs\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: text(\"category\").notNull(),\n  tags: text(\"tags\").array().default([]),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`)\n});\n\nexport type FAQ = typeof faqs.$inferSelect;\nexport type InsertFAQ = typeof faqs.$inferInsert;\nexport type FAQCategory = typeof faqCategories.$inferSelect;\nexport type InsertFAQCategory = typeof faqCategories.$inferInsert;\nexport type ContactSettings = typeof contactSettings.$inferSelect;\nexport type InsertContactSettings = typeof contactSettings.$inferInsert;\n\nexport const insertFAQSchema = createInsertSchema(faqs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFAQCategorySchema = createInsertSchema(faqCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactSettingsSchema = createInsertSchema(contactSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertUserVerificationSchema = createInsertSchema(userVerifications).omit({\n  id: true,\n  submittedAt: true,\n  reviewedAt: true,\n  updatedAt: true,\n});\n\n// Restricted Words Types\nexport type RestrictedWord = InferSelectModel<typeof restrictedWords>;\nexport const insertRestrictedWordSchema = createInsertSchema(restrictedWords).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertRestrictedWord = z.infer<typeof insertRestrictedWordSchema>;","size_bytes":41710},"shared/utils.ts":{"content":"// Utility functions for the application\n\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\nexport function formatCurrency(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n}\n\nexport function formatDate(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n}","size_bytes":718},"tests/admin.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Admin Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let adminToken: string;\n  let regularUserToken: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Create admin user\n    const adminResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'admin@example.com',\n        password: 'password123',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin'\n      });\n    adminToken = adminResponse.body.token;\n\n    // Create regular user\n    const userResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'regular@example.com',\n        password: 'password123',\n        firstName: 'Regular',\n        lastName: 'User',\n        role: 'client'\n      });\n    regularUserToken = userResponse.body.token;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('GET /api/admin/users', () => {\n    it('should return all users for admin', async () => {\n      const response = await request(app)\n        .get('/api/admin/users')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject access for non-admin users', async () => {\n      await request(app)\n        .get('/api/admin/users')\n        .set('Authorization', `Bearer ${regularUserToken}`)\n        .expect(403);\n    });\n  });\n\n  describe('GET /api/admin/finds', () => {\n    it('should return all finds for admin', async () => {\n      const response = await request(app)\n        .get('/api/admin/finds')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('POST /api/admin/users/:id/ban', () => {\n    it('should ban a user', async () => {\n      // First get a user ID to ban\n      const usersResponse = await request(app)\n        .get('/api/admin/users')\n        .set('Authorization', `Bearer ${adminToken}`);\n\n      const regularUser = usersResponse.body.find((u: any) => u.email === 'regular@example.com');\n\n      const response = await request(app)\n        .post(`/api/admin/users/${regularUser.id}/ban`)\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send({ reason: 'Test ban reason' })\n        .expect(200);\n\n      expect(response.body.message).toContain('banned');\n    });\n  });\n\n  describe('GET /api/admin/settings', () => {\n    it('should return admin settings', async () => {\n      const response = await request(app)\n        .get('/api/admin/settings')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('proposalTokenCost');\n      expect(response.body).toHaveProperty('findertokenPrice');\n    });\n  });\n\n  describe('PUT /api/admin/settings', () => {\n    it('should update admin settings', async () => {\n      const settingsData = {\n        proposalTokenCost: '2',\n        findertokenPrice: '150'\n      };\n\n      const response = await request(app)\n        .put('/api/admin/settings')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send(settingsData)\n        .expect(200);\n\n      expect(response.body.message).toContain('updated');\n    });\n  });\n});\n","size_bytes":3482},"tests/auth.test.ts":{"content":"\nimport request from 'supertest';\nimport { createServer } from 'http';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Authentication Tests', () => {\n  let app: express.Application;\n  let server: any;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('POST /api/auth/register', () => {\n    it('should register a new user successfully', async () => {\n      const userData = {\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'client',\n        phone: '+1234567890'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('user');\n      expect(response.body).toHaveProperty('token');\n      expect(response.body.user.email).toBe(userData.email);\n      expect(response.body.user.password).toBeUndefined();\n    });\n\n    it('should reject registration with invalid email', async () => {\n      const userData = {\n        email: 'invalid-email',\n        password: 'password123',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'client'\n      };\n\n      await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(400);\n    });\n\n    it('should reject registration with weak password', async () => {\n      const userData = {\n        email: 'test2@example.com',\n        password: '123',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'client'\n      };\n\n      await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(400);\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    it('should login with valid credentials', async () => {\n      // First register a user\n      const userData = {\n        email: 'login-test@example.com',\n        password: 'password123',\n        firstName: 'Login',\n        lastName: 'Test',\n        role: 'client'\n      };\n\n      await request(app)\n        .post('/api/auth/register')\n        .send(userData);\n\n      // Then login\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: userData.email,\n          password: userData.password\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('user');\n      expect(response.body).toHaveProperty('token');\n    });\n\n    it('should reject login with invalid credentials', async () => {\n      await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'wrongpassword'\n        })\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/auth/me', () => {\n    it('should return user data with valid token', async () => {\n      // Register and login to get token\n      const userData = {\n        email: 'me-test@example.com',\n        password: 'password123',\n        firstName: 'Me',\n        lastName: 'Test',\n        role: 'client'\n      };\n\n      const registerResponse = await request(app)\n        .post('/api/auth/register')\n        .send(userData);\n\n      const token = registerResponse.body.token;\n\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body.user.email).toBe(userData.email);\n    });\n\n    it('should reject request without token', async () => {\n      await request(app)\n        .get('/api/auth/me')\n        .expect(401);\n    });\n  });\n});\n","size_bytes":3715},"tests/contracts.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Contracts Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let clientToken: string;\n  let finderToken: string;\n  let proposalId: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Create users and set up proposal\n    const clientResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'client-contracts@example.com',\n        password: 'password123',\n        firstName: 'Client',\n        lastName: 'Contracts',\n        role: 'client'\n      });\n    clientToken = clientResponse.body.token;\n\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-contracts@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Contracts',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n\n    // Create find and proposal\n    const findResponse = await request(app)\n      .post('/api/client/finds')\n      .set('Authorization', `Bearer ${clientToken}`)\n      .send({\n        title: 'Contract Test Find',\n        description: 'For testing contracts',\n        category: 'Technology',\n        budgetMin: '1000',\n        budgetMax: '2000'\n      });\n\n    const proposalResponse = await request(app)\n      .post('/api/proposals')\n      .set('Authorization', `Bearer ${finderToken}`)\n      .send({\n        findId: findResponse.body.id,\n        coverLetter: 'Test proposal for contract',\n        price: '1500',\n        timeline: '1 week'\n      });\n    proposalId = proposalResponse.body.id;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('POST /api/proposals/:id/accept', () => {\n    it('should accept a proposal and create contract', async () => {\n      const response = await request(app)\n        .post(`/api/proposals/${proposalId}/accept`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.contract).toBeDefined();\n      expect(response.body.payment.required).toBe(true);\n    });\n\n    it('should reject proposal acceptance by non-client', async () => {\n      await request(app)\n        .post(`/api/proposals/${proposalId}/accept`)\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(403);\n    });\n  });\n\n  describe('GET /api/contracts/my', () => {\n    it('should return user\\'s contracts', async () => {\n      const clientResponse = await request(app)\n        .get('/api/contracts/my')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(clientResponse.body)).toBe(true);\n\n      const finderResponse = await request(app)\n        .get('/api/contracts/my')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(Array.isArray(finderResponse.body)).toBe(true);\n    });\n\n    it('should reject access without authentication', async () => {\n      await request(app)\n        .get('/api/contracts/my')\n        .expect(401);\n    });\n  });\n});\n","size_bytes":3268},"tests/finds.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Finds/Requests Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let clientToken: string;\n  let finderToken: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Create client user\n    const clientResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'client-finds@example.com',\n        password: 'password123',\n        firstName: 'Client',\n        lastName: 'Test',\n        role: 'client'\n      });\n    clientToken = clientResponse.body.token;\n\n    // Create finder user\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-finds@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Test',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('POST /api/client/finds', () => {\n    it('should create a new find request', async () => {\n      const findData = {\n        title: 'Test Find Request',\n        description: 'This is a test find request description',\n        category: 'Technology',\n        budgetMin: '1000',\n        budgetMax: '2000',\n        duration: '1 week',\n        location: 'Lagos, Nigeria'\n      };\n\n      const response = await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send(findData)\n        .expect(201);\n\n      expect(response.body.title).toBe(findData.title);\n      expect(response.body.status).toBe('open');\n    });\n\n    it('should reject find creation without authentication', async () => {\n      const findData = {\n        title: 'Unauthorized Find',\n        description: 'This should fail',\n        category: 'Technology',\n        budgetMin: '1000',\n        budgetMax: '2000'\n      };\n\n      await request(app)\n        .post('/api/client/finds')\n        .send(findData)\n        .expect(401);\n    });\n\n    it('should reject find creation with invalid data', async () => {\n      const invalidFindData = {\n        title: '', // Empty title\n        description: 'Valid description',\n        category: 'Technology'\n      };\n\n      await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send(invalidFindData)\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/finds', () => {\n    it('should return list of finds for authenticated users', async () => {\n      const response = await request(app)\n        .get('/api/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject access without authentication', async () => {\n      await request(app)\n        .get('/api/finds')\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/finder/finds', () => {\n    it('should return available finds for finders', async () => {\n      const response = await request(app)\n        .get('/api/finder/finds')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject access for non-finder users', async () => {\n      await request(app)\n        .get('/api/finder/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(403);\n    });\n  });\n});\n","size_bytes":3623},"tests/messaging.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Messaging Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let clientToken: string;\n  let finderToken: string;\n  let proposalId: string;\n  let conversationId: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Set up users and proposal\n    const clientResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'client-messaging@example.com',\n        password: 'password123',\n        firstName: 'Client',\n        lastName: 'Messaging',\n        role: 'client'\n      });\n    clientToken = clientResponse.body.token;\n\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-messaging@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Messaging',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n\n    // Create find and proposal for messaging\n    const findResponse = await request(app)\n      .post('/api/client/finds')\n      .set('Authorization', `Bearer ${clientToken}`)\n      .send({\n        title: 'Messaging Test Find',\n        description: 'For testing messaging',\n        category: 'Technology',\n        budgetMin: '1000',\n        budgetMax: '2000'\n      });\n\n    const proposalResponse = await request(app)\n      .post('/api/proposals')\n      .set('Authorization', `Bearer ${finderToken}`)\n      .send({\n        findId: findResponse.body.id,\n        coverLetter: 'Test proposal for messaging',\n        price: '1500',\n        timeline: '1 week'\n      });\n    proposalId = proposalResponse.body.id;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('POST /api/messages/conversations', () => {\n    it('should create a new conversation', async () => {\n      const response = await request(app)\n        .post('/api/messages/conversations')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({ proposalId })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('id');\n      conversationId = response.body.id;\n    });\n\n    it('should reject conversation creation by non-client', async () => {\n      await request(app)\n        .post('/api/messages/conversations')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send({ proposalId })\n        .expect(403);\n    });\n  });\n\n  describe('GET /api/messages/conversations', () => {\n    it('should return user\\'s conversations', async () => {\n      const clientResponse = await request(app)\n        .get('/api/messages/conversations')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(clientResponse.body)).toBe(true);\n\n      const finderResponse = await request(app)\n        .get('/api/messages/conversations')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(Array.isArray(finderResponse.body)).toBe(true);\n    });\n  });\n\n  describe('POST /api/messages/conversations/:id/messages', () => {\n    it('should send a message in conversation', async () => {\n      const messageData = {\n        content: 'Hello, this is a test message!',\n        attachmentPaths: [],\n        attachmentNames: []\n      };\n\n      const response = await request(app)\n        .post(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send(messageData)\n        .expect(200);\n\n      expect(response.body.content).toBe(messageData.content);\n    });\n\n    it('should reject empty messages', async () => {\n      await request(app)\n        .post(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({ content: '', attachmentPaths: [], attachmentNames: [] })\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/messages/conversations/:id/messages', () => {\n    it('should return messages in conversation', async () => {\n      const response = await request(app)\n        .get(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n});\n","size_bytes":4426},"tests/payments.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Payments Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let finderToken: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-payments@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Payments',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('GET /api/findertokens/packages', () => {\n    it('should return available token packages', async () => {\n      const response = await request(app)\n        .get('/api/findertokens/packages')\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('POST /api/tokens/purchase', () => {\n    it('should initialize token purchase', async () => {\n      const purchaseData = {\n        tokenAmount: 10,\n        amount: 1000\n      };\n\n      const response = await request(app)\n        .post('/api/tokens/purchase')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send(purchaseData)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('authorization_url');\n      expect(response.body).toHaveProperty('reference');\n    });\n\n    it('should reject purchase with invalid data', async () => {\n      const invalidData = {\n        tokenAmount: -5,\n        amount: 0\n      };\n\n      await request(app)\n        .post('/api/tokens/purchase')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send(invalidData)\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/findertokens/balance', () => {\n    it('should return finder token balance', async () => {\n      const response = await request(app)\n        .get('/api/findertokens/balance')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('balance');\n    });\n\n    it('should reject access from non-finder', async () => {\n      // Create client token\n      const clientResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'client-balance@example.com',\n          password: 'password123',\n          firstName: 'Client',\n          lastName: 'Balance',\n          role: 'client'\n        });\n\n      await request(app)\n        .get('/api/findertokens/balance')\n        .set('Authorization', `Bearer ${clientResponse.body.token}`)\n        .expect(403);\n    });\n  });\n});\n","size_bytes":2758},"tests/proposals.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Proposals Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let clientToken: string;\n  let finderToken: string;\n  let findId: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Create client and finder users\n    const clientResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'client-proposals@example.com',\n        password: 'password123',\n        firstName: 'Client',\n        lastName: 'Proposals',\n        role: 'client'\n      });\n    clientToken = clientResponse.body.token;\n\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-proposals@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Proposals',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n\n    // Create a find request\n    const findResponse = await request(app)\n      .post('/api/client/finds')\n      .set('Authorization', `Bearer ${clientToken}`)\n      .send({\n        title: 'Test Find for Proposals',\n        description: 'This is for testing proposals',\n        category: 'Technology',\n        budgetMin: '1000',\n        budgetMax: '2000',\n        duration: '1 week'\n      });\n    findId = findResponse.body.id;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('POST /api/proposals', () => {\n    it('should create a new proposal', async () => {\n      const proposalData = {\n        findId: findId,\n        coverLetter: 'I am interested in this project and have relevant experience.',\n        price: '1500',\n        timeline: '5 days'\n      };\n\n      const response = await request(app)\n        .post('/api/proposals')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send(proposalData)\n        .expect(201);\n\n      expect(response.body.coverLetter).toBe(proposalData.coverLetter);\n      expect(response.body.price).toBe(proposalData.price);\n    });\n\n    it('should reject proposal from non-finder', async () => {\n      const proposalData = {\n        findId: findId,\n        coverLetter: 'This should fail',\n        price: '1500',\n        timeline: '5 days'\n      };\n\n      await request(app)\n        .post('/api/proposals')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send(proposalData)\n        .expect(403);\n    });\n\n    it('should reject duplicate proposals from same finder', async () => {\n      const proposalData = {\n        findId: findId,\n        coverLetter: 'Duplicate proposal attempt',\n        price: '1600',\n        timeline: '6 days'\n      };\n\n      await request(app)\n        .post('/api/proposals')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send(proposalData)\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/proposals/my', () => {\n    it('should return finder\\'s proposals', async () => {\n      const response = await request(app)\n        .get('/api/proposals/my')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject access from non-finder', async () => {\n      await request(app)\n        .get('/api/proposals/my')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(403);\n    });\n  });\n\n  describe('GET /api/client/proposals', () => {\n    it('should return client\\'s received proposals', async () => {\n      const response = await request(app)\n        .get('/api/client/proposals')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject access from non-client', async () => {\n      await request(app)\n        .get('/api/client/proposals')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(403);\n    });\n  });\n});\n","size_bytes":4082},"tests/setupTests.ts":{"content":"// Setup for Node.js/backend tests\n\n// Mock TextEncoder and TextDecoder for Node.js environment\nglobal.TextEncoder = global.TextEncoder || require('util').TextEncoder;\nglobal.TextDecoder = global.TextDecoder || require('util').TextDecoder;\n\n// Mock console to avoid noisy output during tests\nconst originalConsoleError = console.error;\nconsole.error = (...args) => {\n  if (args[0]?.includes?.('Warning:')) return; // Suppress React warnings\n  originalConsoleError(...args);\n};\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret';\nprocess.env.DATABASE_URL = process.env.DATABASE_URL || 'postgres://test:test@localhost:5432/test';","size_bytes":685},"tests/strike-system.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\ndescribe('Strike System Tests', () => {\n  let app: express.Application;\n  let server: any;\n  let adminToken: string;\n  let clientToken: string;\n  let finderToken: string;\n  let clientUserId: string;\n  let finderUserId: string;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n\n    // Create admin\n    const adminResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'admin-strikes@example.com',\n        password: 'password123',\n        firstName: 'Admin',\n        lastName: 'Strikes',\n        role: 'admin'\n      });\n    adminToken = adminResponse.body.token;\n\n    // Create client\n    const clientResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'client-strikes@example.com',\n        password: 'password123',\n        firstName: 'Client',\n        lastName: 'Strikes',\n        role: 'client'\n      });\n    clientToken = clientResponse.body.token;\n    clientUserId = clientResponse.body.user.id;\n\n    // Create finder\n    const finderResponse = await request(app)\n      .post('/api/auth/register')\n      .send({\n        email: 'finder-strikes@example.com',\n        password: 'password123',\n        firstName: 'Finder',\n        lastName: 'Strikes',\n        role: 'finder'\n      });\n    finderToken = finderResponse.body.token;\n    finderUserId = finderResponse.body.user.id;\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('GET /api/offenses/:role', () => {\n    it('should return client offenses', async () => {\n      const response = await request(app)\n        .get('/api/offenses/client')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n\n    it('should return finder offenses', async () => {\n      const response = await request(app)\n        .get('/api/offenses/finder')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n\n    it('should reject access for non-admin', async () => {\n      await request(app)\n        .get('/api/offenses/client')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(403);\n    });\n  });\n\n  describe('POST /api/admin/strikes', () => {\n    it('should issue a strike to client', async () => {\n      const strikeData = {\n        userId: clientUserId,\n        offenseType: 'Misleading Request Description',\n        evidence: 'Test evidence for misleading request',\n        userRole: 'client',\n        contextId: 'test-context-123'\n      };\n\n      const response = await request(app)\n        .post('/api/admin/strikes')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send(strikeData)\n        .expect(201);\n\n      expect(response.body.userId).toBe(clientUserId);\n      expect(response.body.offenseType).toBe(strikeData.offenseType);\n    });\n\n    it('should issue a strike to finder', async () => {\n      const strikeData = {\n        userId: finderUserId,\n        offenseType: 'Low Quality or Incomplete Proposals',\n        evidence: 'Test evidence for low quality proposal',\n        userRole: 'finder',\n        contextId: 'test-context-456'\n      };\n\n      const response = await request(app)\n        .post('/api/admin/strikes')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send(strikeData)\n        .expect(201);\n\n      expect(response.body.userId).toBe(finderUserId);\n      expect(response.body.offenseType).toBe(strikeData.offenseType);\n    });\n\n    it('should reject strike issuance by non-admin', async () => {\n      const strikeData = {\n        userId: clientUserId,\n        offenseType: 'Test Offense',\n        evidence: 'Test evidence',\n        userRole: 'client'\n      };\n\n      await request(app)\n        .post('/api/admin/strikes')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send(strikeData)\n        .expect(403);\n    });\n  });\n\n  describe('GET /api/users/:userId/strikes', () => {\n    it('should return user\\'s own strikes', async () => {\n      const response = await request(app)\n        .get(`/api/users/${clientUserId}/strikes`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('strikes');\n      expect(response.body).toHaveProperty('restrictions');\n    });\n\n    it('should allow admin to view any user\\'s strikes', async () => {\n      const response = await request(app)\n        .get(`/api/users/${finderUserId}/strikes`)\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('strikes');\n      expect(response.body).toHaveProperty('restrictions');\n    });\n\n    it('should reject access to other user\\'s strikes', async () => {\n      await request(app)\n        .get(`/api/users/${finderUserId}/strikes`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(403);\n    });\n  });\n});\n","size_bytes":5254},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport RegisterFinder from \"@/pages/auth/register-finder\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport ClientDashboard from \"@/pages/client/dashboard\";\nimport CreateRequest from \"@/pages/client/create-request\";\nimport RequestDetails from \"@/pages/client/request-details\";\nimport ViewProposals from \"@/pages/client/view-proposals\";\nimport ClientBrowseRequests from \"@/pages/client/browse-requests\";\nimport ClientProfile from \"@/pages/client/profile\";\nimport ClientContracts from \"@/pages/client/contracts\";\nimport ContractDetails from \"@/pages/client/contract-details\";\nimport ChangePassword from \"@/pages/client/change-password\";\nimport FinderDashboard from \"@/pages/finder/dashboard\";\nimport FinderBrowseRequests from \"@/pages/finder/browse-requests\";\nimport FinderRequestDetails from \"@/pages/finder/request-details\";\nimport FinderProposals from \"@/pages/finder/proposals\";\nimport FinderProposalDetails from \"@/pages/finder/proposal-details\";\nimport ProposalDetail from \"@/pages/client/proposal-detail\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminUsers from \"@/pages/admin/users\";\nimport AdminRequests from \"@/pages/admin/requests\";\nimport AdminCategories from \"@/pages/admin/categories\";\nimport AdminSettings from \"@/pages/admin/settings\";\nimport AdminWithdrawals from \"@/pages/admin/withdrawals\";\nimport AdminTokenPackages from \"@/pages/admin/token-packages\";\nimport AdminTokenManagement from \"@/pages/admin/token-management\";\nimport AdminBlogPosts from \"@/pages/admin/blog-posts\";\nimport AdminBlogPostCreate from \"@/pages/admin/blog-post-create\";\nimport AdminBlogPostEdit from \"@/pages/admin/blog-post-edit\";\nimport AdminFinderLevels from \"@/pages/admin/finder-levels\";\nimport AdminStrikeSystem from \"@/pages/admin/StrikeSystem\";\nimport AdminRestrictedWords from \"@/pages/admin/restricted-words\";\nimport AdminSupportAgents from \"@/pages/admin/support-agents\";\nimport AdminFAQManagement from \"./pages/admin/faq-management\";\nimport BlogPost from \"@/pages/blog-post\";\nimport Messages from \"@/pages/Messages\";\nimport ConversationDetail from \"@/pages/ConversationDetail\";\nimport FinderPublicProfile from \"@/pages/finder-profile\";\nimport FinderProfile from \"@/pages/finder/profile\";\nimport FinderTokens from \"@/pages/finder/tokens\";\nimport FinderTokenPurchase from \"@/pages/finder/token-purchase\";\nimport FinderPaymentSuccess from \"@/pages/finder/payment-success\";\nimport ClientTokens from \"@/pages/client/tokens\";\nimport FinderWithdrawals from \"@/pages/finder/withdrawals\";\nimport FinderSecurity from \"@/pages/finder/security\";\nimport FinderContracts from \"@/pages/finder/contracts\";\nimport FinderContractDetails from \"@/pages/finder/contract-details\";\nimport MobileLanding from \"@/pages/mobile-landing\";\nimport ClientMobileDashboard from \"@/pages/client/mobile-dashboard\";\nimport OrderSubmission from \"@/pages/order-submission\";\nimport OrderReview from \"@/pages/order-review\";\nimport SupportIndex from \"@/pages/support/index\";\nimport HelpCenter from \"@/pages/support/help-center\";\nimport ContactSupport from \"@/pages/support/contact\";\nimport BrowseRequests from \"@/pages/BrowseRequests\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport \"./lib/i18n\"; // Initialize i18n\nimport { lazy } from \"react\";\nimport TermsAndConditions from \"@/pages/terms-and-conditions\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport AdminVerificationManagement from \"./pages/admin/verification-management\";\nimport Verification from \"./pages/verification\";\nimport AgentDashboard from \"@/pages/agent/dashboard\";\nimport AgentTickets from \"@/pages/agent/tickets\";\nimport AgentTicketDetails from \"@/pages/agent/ticket-details\";\nimport AdminContactSettings from \"./pages/admin/contact-settings\";\nimport { \n  AdminRoute, \n  FinderRoute, \n  ClientRoute, \n  AuthenticatedRoute, \n  AgentRoute \n} from \"@/components/ProtectedRoute\";\n\n// Dynamically import ResetPassword component\nconst ResetPassword = lazy(() => import(\"@/pages/auth/reset-password\"));\n// Dynamically import AdminFAQCategories component\nconst AdminFAQCategories = lazy(() => import(\"./pages/admin/faq-categories\"));\n\n// Component to guard auth pages from logged in users\nfunction AuthGuard({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, user, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto mb-4\"></div>\n          <p>Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated && user) {\n    // Redirect authenticated users to their dashboard\n    if (user.role === 'admin') {\n      navigate('/admin/dashboard');\n    } else if (user.role === 'finder') {\n      navigate('/finder/dashboard');\n    } else if (user.role === 'client') {\n      navigate('/client/dashboard');\n    }\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/mobile\" component={MobileLanding} />\n      <Route path=\"/browse-requests\" component={BrowseRequests} />\n      <Route path=\"/client/mobile-dashboard\" component={ClientMobileDashboard} />\n      <Route path=\"/login\" component={() => <AuthGuard><Login /></AuthGuard>} />\n      <Route path=\"/register\" component={() => <AuthGuard><Register /></AuthGuard>} />\n      <Route path=\"/register/finder\" component={() => <AuthGuard><RegisterFinder /></AuthGuard>} />\n      {/* Add reset password route */}\n      <Route path=\"/reset-password\" component={ResetPassword} />\n      <Route path=\"/client/dashboard\" component={() => <ClientRoute><ClientDashboard /></ClientRoute>} />\n      <Route path=\"/client/create-find\" component={() => <ClientRoute><CreateRequest /></ClientRoute>} />\n      <Route path=\"/client/finds/:id\" component={() => <ClientRoute><RequestDetails /></ClientRoute>} />\n      <Route path=\"/client/proposals\" component={() => <ClientRoute><ViewProposals /></ClientRoute>} />\n      <Route path=\"/client/proposals/:id\" component={() => <ClientRoute><ProposalDetail /></ClientRoute>} />\n      <Route path=\"/client/contracts\" component={() => <ClientRoute><ClientContracts /></ClientRoute>} />\n      <Route path=\"/client/contracts/:contractId\" component={() => <ClientRoute><ContractDetails /></ClientRoute>} />\n      <Route path=\"/client/browse-finds\" component={() => <ClientRoute><ClientBrowseRequests /></ClientRoute>} />\n      <Route path=\"/client/browse-requests\" component={() => <ClientRoute><ClientBrowseRequests /></ClientRoute>} />\n      <Route path=\"/client/finds\" component={() => <ClientRoute><ClientBrowseRequests /></ClientRoute>} />\n      <Route path=\"/client/profile\" component={() => <ClientRoute><ClientProfile /></ClientRoute>} />\n      <Route path=\"/client/profile/:userId\" component={() => <ClientRoute><ClientProfile /></ClientRoute>} />\n      <Route path=\"/client/tokens\" component={() => <ClientRoute><ClientTokens /></ClientRoute>} />\n      <Route path=\"/client/change-password\" component={() => <ClientRoute><ChangePassword /></ClientRoute>} />\n      <Route path=\"/finder/dashboard\" component={() => <FinderRoute><FinderDashboard /></FinderRoute>} />\n      <Route path=\"/finder/browse-finds\" component={() => <FinderRoute><FinderBrowseRequests /></FinderRoute>} />\n      <Route path=\"/finder/browse-requests\" component={() => <FinderRoute><FinderBrowseRequests /></FinderRoute>} />\n      <Route path=\"/finder/finds/:id\" component={() => <FinderRoute><FinderRequestDetails /></FinderRoute>} />\n      <Route path=\"/finder/requests/:id\" component={() => <FinderRoute><FinderRequestDetails /></FinderRoute>} />\n      <Route path=\"/finder/proposals\" component={() => <FinderRoute><FinderProposals /></FinderRoute>} />\n      <Route path=\"/finder/proposals/:id\" component={() => <FinderRoute><FinderProposalDetails /></FinderRoute>} />\n      <Route path=\"/finder/contracts\" component={() => <FinderRoute><FinderContracts /></FinderRoute>} />\n      <Route path=\"/finder/contracts/:contractId\" component={() => <FinderRoute><FinderContractDetails /></FinderRoute>} />\n      <Route path=\"/finder/profile\" component={() => <FinderRoute><FinderProfile /></FinderRoute>} />\n      <Route path=\"/finder-profile/:userId\" component={FinderPublicProfile} />\n      <Route path=\"/finder/tokens\" component={() => <FinderRoute><FinderTokens /></FinderRoute>} />\n      <Route path=\"/finder/token-purchase\" component={() => <FinderRoute><FinderTokenPurchase /></FinderRoute>} />\n      <Route path=\"/finder/payment-success\" component={() => <FinderRoute><FinderPaymentSuccess /></FinderRoute>} />\n      <Route path=\"/finder/withdrawals\" component={() => <FinderRoute><FinderWithdrawals /></FinderRoute>} />\n      <Route path=\"/finder/security\" component={() => <FinderRoute><FinderSecurity /></FinderRoute>} />\n      <Route path=\"/orders/submit/:contractId\" component={() => <AuthenticatedRoute><OrderSubmission /></AuthenticatedRoute>} />\n      <Route path=\"/orders/review/:contractId\" component={() => <AuthenticatedRoute><OrderReview /></AuthenticatedRoute>} />\n      <Route path=\"/support\" component={SupportIndex} />\n      <Route path=\"/support/help-center\" component={HelpCenter} />\n      <Route path=\"/support/contact\" component={ContactSupport} />\n      <Route path=\"/terms-and-conditions\" component={TermsAndConditions} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/admin/dashboard\" component={() => <AdminRoute><AdminDashboard /></AdminRoute>} />\n      <Route path=\"/admin/users\" component={() => <AdminRoute><AdminUsers /></AdminRoute>} />\n      <Route path=\"/admin/requests\" component={() => <AdminRoute><AdminRequests /></AdminRoute>} />\n      <Route path=\"/admin/categories\" component={() => <AdminRoute><AdminCategories /></AdminRoute>} />\n      <Route path=\"/admin/settings\" component={() => <AdminRoute><AdminSettings /></AdminRoute>} />\n      <Route path=\"/admin/withdrawals\" component={() => <AdminRoute><AdminWithdrawals /></AdminRoute>} />\n      <Route path=\"/admin/token-packages\" component={() => <AdminRoute><AdminTokenPackages /></AdminRoute>} />\n      <Route path=\"/admin/token-management\" component={() => <AdminRoute><AdminTokenManagement /></AdminRoute>} />\n      <Route path=\"/admin/finder-levels\" component={() => <AdminRoute><AdminFinderLevels /></AdminRoute>} />\n      <Route path=\"/admin/restricted-words\" component={() => <AdminRoute><AdminRestrictedWords /></AdminRoute>} />\n      <Route path=\"/admin/support-agents\" component={() => <AdminRoute><AdminSupportAgents /></AdminRoute>} />\n      <Route path=\"/admin/faq-management\" component={() => <AdminRoute><AdminFAQManagement /></AdminRoute>} />\n      <Route path=\"/admin/faq-categories\" component={() => <AdminRoute><AdminFAQCategories /></AdminRoute>} />\n      <Route path=\"/admin/contact-settings\" component={() => <AdminRoute><AdminContactSettings /></AdminRoute>} />\n      <Route path=\"/admin/verification-management\" component={() => <AdminRoute><AdminVerificationManagement /></AdminRoute>} />\n      <Route path=\"/verification\" component={Verification} />\n\n      {/* Agent Routes */}\n      <Route path=\"/agent/dashboard\" component={() => <AgentRoute><AgentDashboard /></AgentRoute>} />\n      <Route path=\"/agent/tickets\" component={() => <AgentRoute><AgentTickets /></AgentRoute>} />\n      <Route path=\"/agent/tickets/:id\" component={() => <AgentRoute><AgentTicketDetails /></AgentRoute>} />\n\n      {/* Blog Routes */}\n      <Route path=\"/admin/blog-posts\" component={() => <AdminRoute><AdminBlogPosts /></AdminRoute>} />\n      <Route path=\"/admin/blog-posts/create\" component={() => <AdminRoute><AdminBlogPostCreate /></AdminRoute>} />\n      <Route path=\"/admin/blog-posts/edit/:id\" component={() => <AdminRoute><AdminBlogPostEdit /></AdminRoute>} />\n      <Route path=\"/admin/strike-system\" component={() => <AdminRoute><AdminStrikeSystem /></AdminRoute>} />\n      <Route path=\"/admin/financial-dashboard\" component={() => {\n        const FinancialDashboard = lazy(() => import(\"@/pages/admin/financial-dashboard\"));\n        return <AdminRoute><FinancialDashboard /></AdminRoute>;\n      }} />\n      <Route path=\"/blog/:slug\" component={BlogPost} />\n      <Route path=\"/messages\" component={() => <AuthenticatedRoute><Messages /></AuthenticatedRoute>} />\n      <Route path=\"/messages/:conversationId\" component={() => <AuthenticatedRoute><ConversationDetail /></AuthenticatedRoute>} />\n      <Route path=\"/finder-profile/:finderId\" component={FinderPublicProfile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":13415},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@keyframes blob {\n  0% {\n    transform: translate(0px, 0px) scale(1);\n  }\n  33% {\n    transform: translate(30px, -50px) scale(1.1);\n  }\n  66% {\n    transform: translate(-20px, 20px) scale(0.9);\n  }\n  100% {\n    transform: translate(0px, 0px) scale(1);\n  }\n}\n\n.animate-blob {\n  animation: blob 7s infinite;\n}\n\n.animation-delay-2000 {\n  animation-delay: 2s;\n}\n\n.animation-delay-4000 {\n  animation-delay: 4s;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(1, 81%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(1, 81%, 53%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(1, 81%, 53%);\n  --chart-1: hsl(1, 81%, 53%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(1, 81%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(1, 81%, 53%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(1, 81%, 53%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 1px 2px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 1px 2px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 2px 4px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 4px 6px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 8px 10px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* FinderMeister specific colors */\n  --finder-red: hsl(1, 81%, 53%);\n  --finder-red-dark: hsl(1, 71%, 43%);\n  --finder-gray: hsl(210, 20%, 98%);\n  --finder-text: hsl(213, 27%, 16%);\n  --finder-text-light: hsl(215, 16%, 47%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(1, 81%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(0, 74%, 57%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(0, 74%, 57%);\n  --chart-1: hsl(0, 74%, 57%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(0, 74%, 57%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(0, 74%, 57%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(0, 74%, 57%);\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 1px 2px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 1px 2px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 2px 4px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 4px 6px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00), 0px 8px 10px -1px hsl(0, 74%, 57% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0, 74%, 57% / 0.00);\n\n  /* FinderMeister specific colors for dark mode */\n  --finder-red: hsl(0, 74%, 57%);\n  --finder-red-dark: hsl(0, 64%, 47%);\n  --finder-gray: hsl(228, 9.8039%, 10%);\n  --finder-text: hsl(200, 6.6667%, 91.1765%);\n  --finder-text-light: hsl(210, 3.3898%, 46.2745%);\n}\n\n/* Custom utility classes */\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .finder-red {\n    color: var(--finder-red);\n  }\n  \n  .bg-finder-red {\n    background-color: var(--finder-red);\n  }\n  \n  .border-finder-red {\n    border-color: var(--finder-red);\n  }\n  \n  .hover\\:bg-finder-red-dark:hover {\n    background-color: var(--finder-red-dark);\n  }\n  \n  .bg-finder-gray {\n    background-color: var(--finder-gray);\n  }\n  \n  .text-finder-text {\n    color: var(--finder-text);\n  }\n  \n  .text-finder-text-light {\n    color: var(--finder-text-light);\n  }\n}\n","size_bytes":6216},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/setupTests.ts":{"content":"\nimport '@testing-library/jest-dom';\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock ResizeObserver\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n});\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock TextEncoder and TextDecoder for Node.js environment\nglobal.TextEncoder = global.TextEncoder || require('util').TextEncoder;\nglobal.TextDecoder = global.TextDecoder || require('util').TextDecoder;\n","size_bytes":1243},"tests/frontend/components.test.tsx":{"content":"\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { AuthProvider } from '@/hooks/use-auth';\nimport Login from '@/pages/auth/login';\nimport Landing from '@/pages/landing';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\n// Mock wouter\njest.mock('wouter', () => ({\n  useLocation: () => ['/login', jest.fn()],\n  useRoute: () => [true, {}],\n  Router: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  Route: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  Link: ({ children, href }: { children: React.ReactNode; href: string }) => (\n    <a href={href}>{children}</a>\n  ),\n}));\n\n// Test wrapper component\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        {children}\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n};\n\ndescribe('UI Component Tests', () => {\n  describe('Button Component', () => {\n    it('renders button with text', () => {\n      render(<Button>Click me</Button>);\n      expect(screen.getByRole('button')).toHaveTextContent('Click me');\n    });\n\n    it('handles click events', async () => {\n      const handleClick = jest.fn();\n      render(<Button onClick={handleClick}>Click me</Button>);\n      \n      await userEvent.click(screen.getByRole('button'));\n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('can be disabled', () => {\n      render(<Button disabled>Disabled button</Button>);\n      expect(screen.getByRole('button')).toBeDisabled();\n    });\n  });\n\n  describe('Input Component', () => {\n    it('renders input field', () => {\n      render(<Input placeholder=\"Enter text\" />);\n      expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();\n    });\n\n    it('handles input changes', async () => {\n      const handleChange = jest.fn();\n      render(<Input onChange={handleChange} />);\n      \n      const input = screen.getByRole('textbox');\n      await userEvent.type(input, 'test input');\n      \n      expect(handleChange).toHaveBeenCalled();\n    });\n\n    it('shows error state', () => {\n      render(<Input className=\"border-red-500\" />);\n      expect(screen.getByRole('textbox')).toHaveClass('border-red-500');\n    });\n  });\n\n  describe('Landing Page', () => {\n    it('renders landing page elements', () => {\n      render(\n        <TestWrapper>\n          <Landing />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(/FinderMeister/i)).toBeInTheDocument();\n    });\n\n    it('has navigation links', () => {\n      render(\n        <TestWrapper>\n          <Landing />\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(/Get Started/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Login Page', () => {\n    it('renders login form', () => {\n      render(\n        <TestWrapper>\n          <Login />\n        </TestWrapper>\n      );\n\n      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n    });\n\n    it('shows validation errors for empty fields', async () => {\n      render(\n        <TestWrapper>\n          <Login />\n        </TestWrapper>\n      );\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/email is required/i)).toBeInTheDocument();\n      });\n    });\n\n    it('validates email format', async () => {\n      render(\n        <TestWrapper>\n          <Login />\n        </TestWrapper>\n      );\n\n      const emailInput = screen.getByLabelText(/email/i);\n      await userEvent.type(emailInput, 'invalid-email');\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/invalid email format/i)).toBeInTheDocument();\n      });\n    });\n  });\n});\n","size_bytes":4385},"tests/frontend/hooks.test.tsx":{"content":"\nimport React from 'react';\nimport { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/use-auth';\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('React Hooks Tests', () => {\n  beforeEach(() => {\n    // Clear localStorage\n    localStorage.clear();\n    // Reset fetch mock\n    (fetch as jest.Mock).mockClear();\n  });\n\n  describe('useAuth Hook', () => {\n    it('initializes with no user', () => {\n      const wrapper = createWrapper();\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      expect(result.current.user).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('loads user from token in localStorage', async () => {\n      // Mock token in localStorage\n      localStorage.setItem('token', 'mock-token');\n\n      // Mock successful API response\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          user: {\n            id: '1',\n            email: 'test@example.com',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'client'\n          }\n        })\n      });\n\n      const wrapper = createWrapper();\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      await waitFor(() => {\n        expect(result.current.user).not.toBeNull();\n      });\n\n      expect(result.current.user?.email).toBe('test@example.com');\n    });\n\n    it('handles login correctly', async () => {\n      // Mock successful login response\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          user: {\n            id: '1',\n            email: 'test@example.com',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'client'\n          },\n          token: 'mock-token'\n        })\n      });\n\n      const wrapper = createWrapper();\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      await waitFor(() => {\n        result.current.login('test@example.com', 'password123');\n      });\n\n      await waitFor(() => {\n        expect(result.current.user).not.toBeNull();\n      });\n\n      expect(localStorage.getItem('token')).toBe('mock-token');\n    });\n\n    it('handles logout correctly', () => {\n      // Set initial token\n      localStorage.setItem('token', 'mock-token');\n\n      const wrapper = createWrapper();\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      result.current.logout();\n\n      expect(result.current.user).toBeNull();\n      expect(localStorage.getItem('token')).toBeNull();\n    });\n\n    it('handles failed login', async () => {\n      // Mock failed login response\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          message: 'Invalid credentials'\n        })\n      });\n\n      const wrapper = createWrapper();\n      const { result } = renderHook(() => useAuth(), { wrapper });\n\n      try {\n        await result.current.login('wrong@example.com', 'wrongpassword');\n      } catch (error) {\n        expect(error).toBeDefined();\n      }\n\n      expect(result.current.user).toBeNull();\n    });\n  });\n});\n","size_bytes":3550},"tests/integration/user-flows.test.ts":{"content":"\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\n\ndescribe('Integration Tests - User Flows', () => {\n  let app: express.Application;\n  let server: any;\n\n  beforeAll(async () => {\n    app = express();\n    app.use(express.json());\n    server = await registerRoutes(app as any);\n  });\n\n  afterAll(() => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  describe('Complete Client Flow', () => {\n    let clientToken: string;\n    let findId: string;\n\n    it('should complete full client journey', async () => {\n      // 1. Register as client\n      const registerResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'integration-client@example.com',\n          password: 'password123',\n          firstName: 'Integration',\n          lastName: 'Client',\n          role: 'client'\n        })\n        .expect(201);\n\n      clientToken = registerResponse.body.token;\n      expect(registerResponse.body.user.role).toBe('client');\n\n      // 2. Create a find request\n      const findResponse = await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({\n          title: 'Integration Test Find',\n          description: 'Complete integration test find request',\n          category: 'Technology',\n          budgetMin: '1000',\n          budgetMax: '2000',\n          duration: '1 week',\n          location: 'Lagos, Nigeria'\n        })\n        .expect(201);\n\n      findId = findResponse.body.id;\n      expect(findResponse.body.status).toBe('open');\n\n      // 3. View own finds\n      const findsResponse = await request(app)\n        .get('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(findsResponse.body.some((f: any) => f.id === findId)).toBe(true);\n\n      // 4. Check proposals (should be empty initially)\n      const proposalsResponse = await request(app)\n        .get('/api/client/proposals')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(Array.isArray(proposalsResponse.body)).toBe(true);\n    });\n  });\n\n  describe('Complete Finder Flow', () => {\n    let finderToken: string;\n    let clientToken: string;\n    let findId: string;\n    let proposalId: string;\n\n    it('should complete full finder journey', async () => {\n      // 1. Register as finder\n      const finderRegisterResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'integration-finder@example.com',\n          password: 'password123',\n          firstName: 'Integration',\n          lastName: 'Finder',\n          role: 'finder'\n        })\n        .expect(201);\n\n      finderToken = finderRegisterResponse.body.token;\n      expect(finderRegisterResponse.body.user.role).toBe('finder');\n\n      // 2. Register client and create find\n      const clientRegisterResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'integration-client2@example.com',\n          password: 'password123',\n          firstName: 'Integration',\n          lastName: 'Client2',\n          role: 'client'\n        });\n\n      clientToken = clientRegisterResponse.body.token;\n\n      const findResponse = await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({\n          title: 'Find for Finder Integration',\n          description: 'Find for testing finder flow',\n          category: 'Technology',\n          budgetMin: '1500',\n          budgetMax: '2500',\n          duration: '2 weeks'\n        });\n\n      findId = findResponse.body.id;\n\n      // 3. Finder views available finds\n      const availableFindsResponse = await request(app)\n        .get('/api/finder/finds')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(availableFindsResponse.body.some((f: any) => f.id === findId)).toBe(true);\n\n      // 4. Finder submits proposal\n      const proposalResponse = await request(app)\n        .post('/api/proposals')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send({\n          findId: findId,\n          coverLetter: 'I am very interested in this project and have the necessary skills.',\n          price: '2000',\n          timeline: '10 days'\n        })\n        .expect(201);\n\n      proposalId = proposalResponse.body.id;\n      expect(proposalResponse.body.findId).toBe(findId);\n\n      // 5. Finder views own proposals\n      const myProposalsResponse = await request(app)\n        .get('/api/proposals/my')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .expect(200);\n\n      expect(myProposalsResponse.body.some((p: any) => p.id === proposalId)).toBe(true);\n\n      // 6. Client accepts proposal\n      const acceptResponse = await request(app)\n        .post(`/api/proposals/${proposalId}/accept`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(acceptResponse.body.success).toBe(true);\n      expect(acceptResponse.body.contract).toBeDefined();\n    });\n  });\n\n  describe('Complete Messaging Flow', () => {\n    let clientToken: string;\n    let finderToken: string;\n    let proposalId: string;\n    let conversationId: string;\n\n    it('should complete messaging flow', async () => {\n      // Setup users and proposal\n      const clientResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'msg-client@example.com',\n          password: 'password123',\n          firstName: 'Msg',\n          lastName: 'Client',\n          role: 'client'\n        });\n      clientToken = clientResponse.body.token;\n\n      const finderResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'msg-finder@example.com',\n          password: 'password123',\n          firstName: 'Msg',\n          lastName: 'Finder',\n          role: 'finder'\n        });\n      finderToken = finderResponse.body.token;\n\n      // Create find and proposal\n      const findResponse = await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({\n          title: 'Messaging Test Find',\n          description: 'For testing messaging flow',\n          category: 'Technology',\n          budgetMin: '1000',\n          budgetMax: '2000'\n        });\n\n      const proposalResponse = await request(app)\n        .post('/api/proposals')\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send({\n          findId: findResponse.body.id,\n          coverLetter: 'Proposal for messaging test',\n          price: '1500',\n          timeline: '1 week'\n        });\n      proposalId = proposalResponse.body.id;\n\n      // 1. Client starts conversation\n      const conversationResponse = await request(app)\n        .post('/api/messages/conversations')\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({ proposalId })\n        .expect(200);\n\n      conversationId = conversationResponse.body.id;\n\n      // 2. Client sends message\n      const messageResponse = await request(app)\n        .post(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .send({\n          content: 'Hello, I would like to discuss this project further.',\n          attachmentPaths: [],\n          attachmentNames: []\n        })\n        .expect(200);\n\n      expect(messageResponse.body.content).toBe('Hello, I would like to discuss this project further.');\n\n      // 3. Finder replies\n      await request(app)\n        .post(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${finderToken}`)\n        .send({\n          content: 'Thank you for your interest. I would be happy to discuss the details.',\n          attachmentPaths: [],\n          attachmentNames: []\n        })\n        .expect(200);\n\n      // 4. View conversation messages\n      const messagesResponse = await request(app)\n        .get(`/api/messages/conversations/${conversationId}/messages`)\n        .set('Authorization', `Bearer ${clientToken}`)\n        .expect(200);\n\n      expect(messagesResponse.body).toHaveLength(2);\n    });\n  });\n\n  describe('Error Handling Flow', () => {\n    it('should handle various error scenarios gracefully', async () => {\n      // 1. Invalid registration data\n      await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'invalid-email',\n          password: '123', // Too short\n          firstName: '',\n          lastName: '',\n          role: 'invalid-role'\n        })\n        .expect(400);\n\n      // 2. Unauthorized access\n      await request(app)\n        .get('/api/finds')\n        .expect(401);\n\n      // 3. Invalid find creation\n      const userResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'error-test@example.com',\n          password: 'password123',\n          firstName: 'Error',\n          lastName: 'Test',\n          role: 'client'\n        });\n\n      await request(app)\n        .post('/api/client/finds')\n        .set('Authorization', `Bearer ${userResponse.body.token}`)\n        .send({\n          title: '',\n          description: '',\n          category: ''\n        })\n        .expect(400);\n\n      // 4. Access denied scenarios\n      const finderResponse = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'error-finder@example.com',\n          password: 'password123',\n          firstName: 'Error',\n          lastName: 'Finder',\n          role: 'finder'\n        });\n\n      // Finder trying to access client endpoints\n      await request(app)\n        .get('/api/client/finds')\n        .set('Authorization', `Bearer ${finderResponse.body.token}`)\n        .expect(403);\n    });\n  });\n});\n","size_bytes":9872},"client/src/components/AuthHeader.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Handshake, Menu, X } from \"lucide-react\";\n\ninterface AuthHeaderProps {\n  currentPage: 'login' | 'register' | 'browse';\n}\n\nexport function AuthHeader({ currentPage }: AuthHeaderProps) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"bg-finder-red text-white px-4 sm:px-6 py-4\">\n      <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2 mr-8\">\n          <Handshake className=\"w-6 h-6\" />\n          <span className=\"text-xl font-bold\">FinderMeister</span>\n        </Link>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden md:flex items-center space-x-6\">\n          <Link \n            href=\"/browse-requests\" \n            className={`hover:underline transition-all duration-200 ${\n              currentPage === 'browse' ? 'bg-white text-finder-red px-3 py-1 rounded font-medium' : ''\n            }`}\n          >\n            Browse Requests\n          </Link>\n          <Link \n            href=\"/login\" \n            className={`hover:underline transition-all duration-200 ${\n              currentPage === 'login' ? 'bg-white text-finder-red px-3 py-1 rounded font-medium' : ''\n            }`}\n          >\n            Log In\n          </Link>\n          <Link \n            href=\"/register\" \n            className={`hover:underline transition-all duration-200 ${\n              currentPage === 'register' ? 'bg-white text-finder-red px-3 py-1 rounded font-medium' : ''\n            }`}\n          >\n            Sign Up\n          </Link>\n        </nav>\n\n        {/* Mobile Menu Button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"md:hidden text-white hover:bg-finder-red-dark\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n        </Button>\n      </div>\n\n      {/* Mobile Dropdown Menu */}\n      {isMenuOpen && (\n        <div className=\"md:hidden mt-4 pb-4 border-t border-finder-red/70\">\n          <nav className=\"flex flex-col space-y-3 pt-4\">\n            <Link \n              href=\"/browse-requests\" \n              className={`hover:bg-finder-red-dark px-3 py-2 rounded transition-colors duration-200 ${\n                currentPage === 'browse' ? 'bg-white text-finder-red font-medium' : ''\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Browse Requests\n            </Link>\n            <Link \n              href=\"/login\" \n              className={`hover:bg-finder-red-dark px-3 py-2 rounded transition-colors duration-200 ${\n                currentPage === 'login' ? 'bg-white text-finder-red font-medium' : ''\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Log In\n            </Link>\n            <Link \n              href=\"/register\" \n              className={`hover:bg-finder-red-dark px-3 py-2 rounded transition-colors duration-200 ${\n                currentPage === 'register' ? 'bg-white text-finder-red font-medium' : ''\n              }`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Sign Up\n            </Link>\n          </nav>\n        </div>\n      )}\n    </header>\n  );\n}","size_bytes":3408},"client/src/components/ContractDisputeModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertTriangle, Loader2 } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ContractDisputeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  contractId: string;\n  contractTitle?: string;\n}\n\nexport function ContractDisputeModal({\n  isOpen,\n  onClose,\n  contractId,\n  contractTitle\n}: ContractDisputeModalProps) {\n  const { t } = useTranslation();\n  const [disputeType, setDisputeType] = useState<string>(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [evidence, setEvidence] = useState(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const submitDisputeMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/contracts/${contractId}/dispute`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          type: disputeType,\n          description,\n          evidence: evidence || null\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: t('dispute.dispute_submitted'),\n        description: t('dispute.dispute_submitted_desc'),\n      });\n      onClose();\n      resetForm();\n      // Invalidate contract queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/client/contracts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finder/contracts\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit dispute. Please try again.\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setDisputeType(\"\");\n    setDescription(\"\");\n    setEvidence(\"\");\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!disputeType || !description.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please select a dispute type and provide a description.\",\n      });\n      return;\n    }\n    submitDisputeMutation.mutate();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-red-100 rounded-lg\">\n              <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-xl font-semibold\">{t('dispute.submit_dispute')}</DialogTitle>\n              {contractTitle && (\n                <p className=\"text-sm text-gray-500 mt-1\">For: {contractTitle}</p>\n              )}\n            </div>\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"disputeType\" className=\"text-sm font-medium mb-2 block\">\n              {t('dispute.dispute_type')} *\n            </Label>\n            <Select value={disputeType} onValueChange={setDisputeType}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('dispute.dispute_type')} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"contract_dispute\">{t('dispute.contract_issue')}</SelectItem>\n                <SelectItem value=\"payment_dispute\">{t('dispute.payment_issue')}</SelectItem>\n                <SelectItem value=\"quality_dispute\">{t('dispute.quality_issue')}</SelectItem>\n                <SelectItem value=\"delivery_dispute\">{t('dispute.delivery_issue')}</SelectItem>\n                <SelectItem value=\"communication_dispute\">{t('dispute.communication_issue')}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\" className=\"text-sm font-medium mb-2 block\">\n              {t('dispute.description')} *\n            </Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Please describe the issue in detail...\"\n              rows={4}\n              className=\"resize-none\"\n              required\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Provide a clear and detailed explanation of the issue you're experiencing.\n            </p>\n          </div>\n\n          <div>\n            <Label htmlFor=\"evidence\" className=\"text-sm font-medium mb-2 block\">\n              {t('dispute.evidence')}\n            </Label>\n            <Textarea\n              id=\"evidence\"\n              value={evidence}\n              onChange={(e) => setEvidence(e.target.value)}\n              placeholder=\"Any supporting evidence, links, or additional context...\"\n              rows={3}\n              className=\"resize-none\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Include any relevant screenshots, messages, or documentation that supports your case.\n            </p>\n          </div>\n\n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <AlertTriangle className=\"w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm\">\n                <p className=\"font-medium text-amber-800 mb-1\">Important Notes:</p>\n                <ul className=\"text-amber-700 space-y-1 list-disc list-inside\">\n                  <li>Disputes will be reviewed by our support team within 24-48 hours</li>\n                  <li>Provide accurate and honest information</li>\n                  <li>Both parties will be contacted during the review process</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter className=\"gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={submitDisputeMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={submitDisputeMutation.isPending || !disputeType || !description.trim()}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              {submitDisputeMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Submitting...\n                </>\n              ) : (\n                \"Submit Dispute\"\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7231},"client/src/components/EscrowStatusTracker.tsx":{"content":"import { DollarSign, Clock, CheckCircle, HandCoins } from \"lucide-react\";\n\ninterface EscrowStatusTrackerProps {\n  escrowStatus: string;\n  isCompleted: boolean;\n  hasSubmission: boolean;\n}\n\nexport default function EscrowStatusTracker({ escrowStatus, isCompleted, hasSubmission }: EscrowStatusTrackerProps) {\n  const getStepStatus = (step: number) => {\n    if (step === 1) return true; // Always held in escrow\n    if (step === 2) return hasSubmission || isCompleted; // In progress when submission exists\n    if (step === 3) return isCompleted; // Marked complete when finished\n    if (step === 4) return escrowStatus === 'released' || isCompleted; // Payment released\n    return false;\n  };\n\n  const getStepColor = (step: number) => {\n    return getStepStatus(step) ? \"text-finder-red bg-finder-red/20\" : \"text-gray-400 bg-gray-100\";\n  };\n\n  const getConnectorColor = (step: number) => {\n    return getStepStatus(step + 1) ? \"bg-finder-red\" : \"bg-gray-300\";\n  };\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-6 text-center\">Escrow Status</h3>\n      \n      <div className=\"flex items-center justify-between max-w-lg mx-auto\">\n        {/* Step 1: Held in Escrow */}\n        <div className=\"flex flex-col items-center\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getStepColor(1)}`}>\n            <DollarSign className=\"w-6 h-6\" />\n          </div>\n          <div className=\"mt-2 text-center\">\n            <p className=\"text-sm font-medium text-gray-900\">Held in</p>\n            <p className=\"text-sm font-medium text-gray-900\">Escrow</p>\n          </div>\n        </div>\n\n        {/* Connector 1 */}\n        <div className={`flex-1 h-1 mx-3 ${getConnectorColor(1)}`}></div>\n\n        {/* Step 2: In Progress */}\n        <div className=\"flex flex-col items-center\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getStepColor(2)}`}>\n            <Clock className=\"w-6 h-6\" />\n          </div>\n          <div className=\"mt-2 text-center\">\n            <p className=\"text-sm font-medium text-gray-900\">In</p>\n            <p className=\"text-sm font-medium text-gray-900\">Progress</p>\n          </div>\n        </div>\n\n        {/* Connector 2 */}\n        <div className={`flex-1 h-1 mx-3 ${getConnectorColor(2)}`}></div>\n\n        {/* Step 3: Marked Complete */}\n        <div className=\"flex flex-col items-center\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getStepColor(3)}`}>\n            <CheckCircle className=\"w-6 h-6\" />\n          </div>\n          <div className=\"mt-2 text-center\">\n            <p className=\"text-sm font-medium text-gray-900\">Marked</p>\n            <p className=\"text-sm font-medium text-gray-900\">Complete</p>\n          </div>\n        </div>\n\n        {/* Connector 3 */}\n        <div className={`flex-1 h-1 mx-3 ${getConnectorColor(3)}`}></div>\n\n        {/* Step 4: Payment Released */}\n        <div className=\"flex flex-col items-center\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getStepColor(4)}`}>\n            <HandCoins className=\"w-6 h-6\" />\n          </div>\n          <div className=\"mt-2 text-center\">\n            <p className=\"text-sm font-medium text-gray-900\">Payment</p>\n            <p className=\"text-sm font-medium text-gray-900\">Released</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Status description */}\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-sm text-gray-600\">\n          {!hasSubmission && !isCompleted && \"Waiting for finder to submit work\"}\n          {hasSubmission && !isCompleted && \"Work submitted, awaiting review\"}\n          {isCompleted && escrowStatus !== 'released' && \"Work completed, payment processing\"}\n          {isCompleted && escrowStatus === 'released' && \"Project completed and payment released\"}\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":3985},"client/src/components/FileUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FileUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  disabled?: boolean;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n */\nexport function FileUploader({\n  maxNumberOfFiles = 5,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n  disabled = false,\n}: FileUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: null, // Allow all file types\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        disabled={disabled}\n        type=\"button\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        showProgressDetails={true}\n        showRemoveButtonAfterComplete={true}\n        note=\"Upload files to share in your conversation\"\n      />\n    </div>\n  );\n}\n\nexport default FileUploader;","size_bytes":2500},"client/src/components/FlutterwavePaymentModal.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { CheckCircle, CreditCard, Loader2, AlertCircle, ExternalLink } from 'lucide-react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface FlutterwavePaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  packageId: string;\n  packageName: string;\n  packagePrice: number;\n  tokenCount: number;\n  onPaymentSuccess: () => void;\n}\n\nfunction FlutterwavePaymentModal({\n  isOpen,\n  onClose,\n  packageId,\n  packageName,\n  packagePrice,\n  tokenCount,\n  onPaymentSuccess\n}: FlutterwavePaymentModalProps) {\n  const [phone, setPhone] = useState('');\n  const [customerName, setCustomerName] = useState('');\n  const [paymentStatus, setPaymentStatus] = useState<'form' | 'processing' | 'verifying' | 'success' | 'failed'>('form');\n  const [paymentUrl, setPaymentUrl] = useState('');\n  const [reference, setReference] = useState('');\n\n  // Payment verification mutation\n  const verifyPayment = useMutation({\n    mutationFn: async (reference: string) => {\n      // Use role-specific endpoint based on current path\n      let endpoint = `/api/payments/flutterwave/verify/${reference}`; // fallback\n      \n      if (window.location.pathname.includes('/client/')) {\n        endpoint = `/api/client/tokens/flutterwave/verify/${reference}`;\n      } else if (window.location.pathname.includes('/finder/')) {\n        endpoint = `/api/finder/tokens/flutterwave/verify/${reference}`;\n      }\n        \n      const response = await apiRequest(endpoint);\n      return response;\n    },\n    onSuccess: (data) => {\n      if (data.status === 'success') {\n        setPaymentStatus('success');\n        onPaymentSuccess();\n        setTimeout(() => {\n          onClose();\n          resetForm();\n        }, 2000);\n      } else {\n        setPaymentStatus('failed');\n      }\n    },\n    onError: () => {\n      setPaymentStatus('failed');\n    }\n  });\n\n  // Payment initialization mutation\n  const initializePayment = useMutation({\n    mutationFn: async ({ packageId, phone, customerName }: { packageId: string; phone: string; customerName: string }) => {\n      // Use role-specific endpoint based on current path\n      let endpoint = '/api/payments/flutterwave/initialize'; // fallback\n      \n      if (window.location.pathname.includes('/client/')) {\n        endpoint = '/api/client/tokens/flutterwave/initialize';\n      } else if (window.location.pathname.includes('/finder/')) {\n        endpoint = '/api/finder/tokens/flutterwave/initialize';\n      }\n      \n      console.log('Using endpoint:', endpoint, 'for path:', window.location.pathname);\n        \n      const response = await apiRequest(endpoint, {\n        method: 'POST',\n        body: JSON.stringify({ packageId, phone, customerName })\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      setPaymentUrl(data.authorization_url);\n      setReference(data.reference);\n      setPaymentStatus('processing');\n      \n      // Open Flutterwave payment page\n      const paymentWindow = window.open(data.authorization_url, '_blank', 'width=600,height=600');\n      \n      if (paymentWindow) {\n        // Poll for window closure\n        const checkClosed = setInterval(() => {\n          if (paymentWindow.closed) {\n            clearInterval(checkClosed);\n            setPaymentStatus('verifying');\n            verifyPayment.mutate(data.reference);\n          }\n        }, 1000);\n      }\n    },\n    onError: () => {\n      setPaymentStatus('failed');\n    }\n  });\n\n  const resetForm = () => {\n    setPhone('');\n    setCustomerName('');\n    setPaymentStatus('form');\n    setPaymentUrl('');\n    setReference('');\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!customerName.trim()) {\n      return;\n    }\n    initializePayment.mutate({ packageId, phone, customerName });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-5 h-5 text-orange-600\" />\n            Pay with Flutterwave\n          </DialogTitle>\n          <DialogDescription>\n            {packageName} - {tokenCount} FinderTokens for {formatCurrency(packagePrice)}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {paymentStatus === 'form' && (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"customerName\">Full Name *</Label>\n                <Input\n                  id=\"customerName\"\n                  type=\"text\"\n                  placeholder=\"Enter your full name\"\n                  value={customerName}\n                  onChange={(e) => setCustomerName(e.target.value)}\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"e.g., +2348012345678\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                />\n              </div>\n\n              <div className=\"bg-orange-50 p-3 rounded-lg\">\n                <p className=\"text-sm text-orange-700\">\n                  <strong>Payment Summary:</strong><br />\n                  Package: {packageName}<br />\n                  Tokens: {tokenCount} FinderTokens<br />\n                  Amount: {formatCurrency(packagePrice)}\n                </p>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={onClose}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={!customerName.trim() || initializePayment.isPending}\n                  className=\"flex-1 bg-orange-600 hover:bg-orange-700 text-white\"\n                >\n                  {initializePayment.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      Continue to Flutterwave\n                      <ExternalLink className=\"w-4 h-4 ml-2\" />\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          )}\n\n          {paymentStatus === 'processing' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto\">\n                <CreditCard className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Complete Payment</h3>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  A payment window has been opened. Complete your payment and we'll automatically verify it.\n                </p>\n                {paymentUrl && (\n                  <Button \n                    onClick={() => window.open(paymentUrl, '_blank')}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    Reopen Payment Window\n                    <ExternalLink className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n\n          {paymentStatus === 'verifying' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n                <Loader2 className=\"w-8 h-8 text-blue-600 animate-spin\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Verifying Payment</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Please wait while we confirm your payment...\n                </p>\n              </div>\n            </div>\n          )}\n\n          {paymentStatus === 'success' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-green-900 mb-2\">Payment Successful!</h3>\n                <p className=\"text-sm text-gray-600\">\n                  {tokenCount} FinderTokens have been added to your account.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {paymentStatus === 'failed' && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto\">\n                <AlertCircle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-red-900 mb-2\">Payment Failed</h3>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  There was an issue processing your payment. Please try again.\n                </p>\n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={() => {\n                      setPaymentStatus('verifying');\n                      verifyPayment.mutate(reference);\n                    }}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    disabled={!reference || verifyPayment.isPending}\n                  >\n                    {verifyPayment.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Verifying...\n                      </>\n                    ) : (\n                      'Verify Payment'\n                    )}\n                  </Button>\n                  <Button \n                    onClick={() => {\n                      resetForm();\n                    }}\n                    className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                  >\n                    Try Again\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport { FlutterwavePaymentModal };\nexport default FlutterwavePaymentModal;\n","size_bytes":11108},"client/src/components/LanguageSwitcher.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Globe } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\n\nconst languages = [\n  { code: 'en', name: 'language.english', flag: 'üá∫üá∏' },\n  { code: 'pidgin', name: 'language.pidgin', flag: 'üá≥üá¨' },\n  { code: 'yo', name: 'language.yoruba', flag: 'üá≥üá¨' },\n  { code: 'ha', name: 'language.hausa', flag: 'üá≥üá¨' },\n  { code: 'ig', name: 'language.igbo', flag: 'üá≥üá¨' },\n  { code: 'fr', name: 'language.french', flag: 'üá´üá∑' },\n  { code: 'de', name: 'language.german', flag: 'üá©üá™' },\n  { code: 'es', name: 'language.spanish', flag: 'üá™üá∏' },\n  { code: 'pt', name: 'language.portuguese', flag: 'üáµüáπ' },\n  { code: 'ar', name: 'language.arabic', flag: 'üá∏üá¶' },\n];\n\ninterface LanguageSwitcherProps {\n  variant?: 'default' | 'mobile';\n  className?: string;\n}\n\nexport function LanguageSwitcher({ variant = 'default', className = '' }: LanguageSwitcherProps) {\n  const { i18n, t } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  const changeLanguage = (langCode: string) => {\n    i18n.changeLanguage(langCode);\n    setIsOpen(false);\n  };\n\n  if (variant === 'mobile') {\n    return (\n      <div className={`space-y-2 ${className}`}>\n        <div className=\"flex items-center space-x-2 text-sm font-medium text-gray-700 mb-2\">\n          <Globe className=\"w-4 h-4\" />\n          <span>{t('language.select_language')}</span>\n        </div>\n        <div className=\"grid grid-cols-2 gap-2\">\n          {languages.map((language) => (\n            <button\n              key={language.code}\n              onClick={() => changeLanguage(language.code)}\n              className={`flex items-center space-x-2 p-2 text-sm rounded-lg transition-colors ${\n                i18n.language === language.code\n                  ? 'bg-finder-red text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              <span>{language.flag}</span>\n              <span className=\"truncate\">{t(language.name)}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className={`flex items-center space-x-2 text-white hover:bg-white/10 border border-white/20 ${className}`}\n          data-testid=\"language-switcher\"\n        >\n          <Globe className=\"w-4 h-4\" />\n          <span>{currentLanguage.flag}</span>\n          <span className=\"hidden sm:inline text-xs\">{t(currentLanguage.name).split(' ')[0]}</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {languages.map((language) => (\n          <DropdownMenuItem\n            key={language.code}\n            onClick={() => changeLanguage(language.code)}\n            className={`flex items-center justify-between cursor-pointer ${\n              i18n.language === language.code ? 'bg-finder-red/10' : ''\n            }`}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <span>{language.flag}</span>\n              <span className=\"font-medium\">{t(language.name)}</span>\n            </div>\n            {i18n.language === language.code && (\n              <div className=\"w-2 h-2 bg-finder-red rounded-full\" />\n            )}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":3786},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['image/*'], // Only allow images for icons\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        type=\"button\"\n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2282},"client/src/components/StartConversationButton.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype StartConversationButtonProps = {\n  proposalId: string;\n  finderName?: string;\n  className?: string;\n  variant?: \"default\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\" | \"destructive\";\n  children?: ReactNode;\n};\n\nexport default function StartConversationButton({ \n  proposalId, \n  finderName = \"Finder\", \n  className = \"\",\n  variant = \"default\",\n  children \n}: StartConversationButtonProps) {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const createConversationMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/messages/conversations\", {\n        method: \"POST\",\n        body: JSON.stringify({ proposalId }),\n      });\n    },\n    onSuccess: (conversation) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/messages/conversations'] });\n      setLocation(`/messages/${conversation.id}`);\n      toast({\n        title: \"Success!\",\n        description: \"Conversation started successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Conversation creation error:', error);\n      const errorMessage = error?.message || \"Failed to start conversation. Please try again.\";\n      console.log('Error message to show user:', errorMessage);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: errorMessage,\n      });\n    }\n  });\n\n  if (user?.role !== 'client') {\n    return null;\n  }\n\n  return (\n    <Button\n      onClick={() => createConversationMutation.mutate()}\n      disabled={createConversationMutation.isPending}\n      className={className}\n      variant={variant}\n      size=\"sm\"\n    >\n      {children || (\n        <>\n          <MessageCircle className=\"w-4 h-4 mr-2\" />\n          <span>\n            {createConversationMutation.isPending \n              ? \"Starting...\" \n              : `Message ${finderName}`\n            }\n          </span>\n        </>\n      )}\n    </Button>\n  );\n}","size_bytes":2375},"client/src/components/admin-header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { User, Users, Settings, FileText, LogOut, BarChart3, MessageSquare, Banknote, Tags, Edit, Menu, ChevronDown, TrendingUp, Coins, Shield, Package, HeadphonesIcon, HelpCircle, List, Tag } from \"lucide-react\";\nimport logoImage from \"@assets/Findermeister logo_1755186313310.jpg\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface AdminHeaderProps {\n  currentPage?: string;\n}\n\nexport default function AdminHeader({ currentPage }: AdminHeaderProps) {\n  const { logout } = useAuth();\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const navItems = [\n    { path: \"/admin/dashboard\", label: \"Dashboard\", icon: BarChart3, id: \"dashboard\" },\n    { \n      path: \"/admin/users\", \n      label: \"Users\", \n      icon: Users, \n      id: \"users\",\n      hasDropdown: true,\n      subItems: [\n        { path: \"/admin/users\", label: \"Manage Users\", icon: Users, id: \"users\" },\n        { path: \"/admin/withdrawals\", label: \"Withdrawals\", icon: Banknote, id: \"withdrawals\" },\n        { path: \"/admin/strike-system\", label: \"Strike System\", icon: Shield, id: \"strike-system\" },\n        { path: \"/admin/finder-levels\", label: \"Finder Levels\", icon: TrendingUp, id: \"finder-levels\" },\n        { path: \"/admin/categories\", label: \"Categories\", icon: Tags, id: \"categories\" },\n        { path: \"/admin/requests\", label: \"Finds\", icon: FileText, id: \"finds\" },\n        { path: \"/admin/token-packages\", label: \"Token Packages\", icon: Package, id: \"token-packages\" },\n        { path: \"/admin/token-management\", label: \"Token Management\", icon: Coins, id: \"token-management\" }\n      ]\n    },\n    { path: \"/admin/restricted-words\", label: \"Restricted Words\", icon: Shield, id: \"restricted-words\" },\n    { path: \"/admin/verification-management\", label: \"Verification\", icon: Shield, id: \"verification\" },\n    { path: \"/admin/blog-posts\", label: \"Blog Posts\", icon: FileText, id: \"blog-posts\" },\n    { path: \"/admin/categories\", label: \"Categories\", icon: Tags, id: \"categories\" },\n    { \n      path: \"/admin/faq-management\", \n      icon: HelpCircle, \n      label: \"FAQs\", \n      id: \"faq-management\",\n      hasDropdown: true,\n      subItems: [\n        { path: \"/admin/faq-management\", label: \"FAQ Management\", icon: HelpCircle, id: \"faq-management\" },\n        { path: \"/admin/faq-categories\", label: \"FAQ Categories\", icon: Tag, id: \"faq-categories\" },\n        { path: \"/admin/contact-settings\", label: \"Contact Settings\", icon: MessageSquare, id: \"contact-settings\" }\n      ]\n    },\n    { path: \"/admin/settings\", label: \"Settings\", icon: Settings, id: \"settings\" },\n    { path: \"/admin/support-agents\", label: \"Support Agents\", icon: HeadphonesIcon, id: \"support-agents\" },\n  ];\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center h-16 px-4 sm:px-6\">\n          {/* Logo */}\n          <Link href=\"/admin/dashboard\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <img \n                src={logoImage} \n                alt=\"FinderMeister Logo\" \n                className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full object-contain\" \n              />\n              <div>\n                <span className=\"text-lg sm:text-xl font-bold text-gray-900\">FinderMeister</span>\n                <span className=\"text-xs sm:text-sm text-gray-500 ml-1 sm:ml-2 hidden sm:inline\">Admin</span>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex space-x-1\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = currentPage === item.id || (item.hasDropdown && item.subItems && item.subItems.some(sub => currentPage === sub.id));\n\n              if (item.hasDropdown && item.subItems) {\n                return (\n                  <DropdownMenu key={item.id}>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant={isActive ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        className={`flex items-center space-x-2 ${\n                          isActive \n                            ? \"bg-finder-red hover:bg-finder-red-dark text-white\" \n                            : \"text-gray-700 hover:text-gray-900\"\n                        }`}\n                      >\n                        <Icon className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">{item.label}</span>\n                        <ChevronDown className=\"w-3 h-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"start\" className=\"w-48\">\n                      {item.subItems.map((subItem) => {\n                        const SubIcon = subItem.icon;\n                        return (\n                          <DropdownMenuItem key={subItem.id} asChild>\n                            <Link href={subItem.path}>\n                              <div className=\"flex items-center space-x-2 w-full cursor-pointer\">\n                                <SubIcon className=\"w-4 h-4\" />\n                                <span>{subItem.label}</span>\n                              </div>\n                            </Link>\n                          </DropdownMenuItem>\n                        );\n                      })}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                );\n              }\n\n              return (\n                <Link key={item.id} href={item.path}>\n                  <Button\n                    variant={currentPage === item.id ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    className={`flex items-center space-x-2 ${\n                      currentPage === item.id \n                        ? \"bg-finder-red hover:bg-finder-red-dark text-white\" \n                        : \"text-gray-700 hover:text-gray-900\"\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">{item.label}</span>\n                  </Button>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Mobile Navigation & Actions */}\n          <div className=\"flex items-center space-x-2\">\n            {/* Desktop Logout */}\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"hidden sm:flex items-center space-x-2\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              <span className=\"hidden md:inline\">Logout</span>\n            </Button>\n\n            {/* Mobile Menu */}\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"lg:hidden\">\n                  <Menu className=\"w-4 h-4\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] max-w-[85vw] flex flex-col\">\n                <div className=\"flex-shrink-0 pt-6 pb-4\">\n                  <div className=\"text-lg font-semibold text-gray-900 px-2\">Admin Panel</div>\n                </div>\n\n                <div className=\"flex-1 overflow-y-auto min-h-0\">\n                  <div className=\"space-y-1 px-2\">\n                    {navItems.map((item) => {\n                      const Icon = item.icon;\n                      const isActive = currentPage === item.id || (item.hasDropdown && item.subItems && item.subItems.some(sub => currentPage === sub.id));\n\n                      if (item.hasDropdown && item.subItems) {\n                        return (\n                          <div key={item.id} className=\"space-y-1\">\n                            <div className=\"text-xs font-medium text-gray-600 px-3 py-2 border-b border-gray-200 bg-gray-50\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Icon className=\"w-4 h-4\" />\n                                <span className=\"truncate\">{item.label}</span>\n                              </div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              {item.subItems.map((subItem) => {\n                                const SubIcon = subItem.icon;\n                                return (\n                                  <Link key={subItem.id} href={subItem.path}>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className={`w-full justify-start h-10 pl-8 pr-2 text-sm ${\n                                        currentPage === subItem.id \n                                          ? \"bg-finder-red hover:bg-finder-red-dark text-white\" \n                                          : \"text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n                                      }`}\n                                      onClick={() => setIsOpen(false)}\n                                    >\n                                      <SubIcon className=\"w-4 h-4 mr-3 flex-shrink-0\" />\n                                      <span className=\"truncate\">{subItem.label}</span>\n                                    </Button>\n                                  </Link>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        );\n                      }\n\n                      return (\n                        <Link key={item.id} href={item.path}>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className={`w-full justify-start h-10 px-3 text-sm ${\n                              currentPage === item.id \n                                ? \"bg-finder-red hover:bg-finder-red-dark text-white\" \n                                : \"text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n                            }`}\n                            onClick={() => setIsOpen(false)}\n                          >\n                            <Icon className=\"w-4 h-4 mr-3 flex-shrink-0\" />\n                            <span className=\"truncate\">{item.label}</span>\n                          </Button>\n                        </Link>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                <div className=\"flex-shrink-0 border-t border-gray-200 pt-4 pb-4\">\n                  <div className=\"px-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={handleLogout}\n                      className=\"w-full justify-start h-10 px-3 text-sm\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-3\" />\n                      <span>Logout</span>\n                    </Button>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":11771},"client/src/components/admin-issue-strike.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SeverityBadge } from \"@/components/severity-badge\";\n\ninterface AdminIssueStrikeProps {\n  userId: string;\n  userRole: 'client' | 'finder';\n  userName?: string;\n  contextId?: string; // Contract ID or Find ID for reference\n  contextType?: 'contract' | 'find';\n  trigger?: React.ReactNode;\n  onStrikeIssued?: () => void;\n}\n\ninterface OffenseDefinition {\n  offense: string;\n  strikeLevel: number;\n  applicableRoles: string[];\n  resolution: string;\n}\n\nexport default function AdminIssueStrike({ \n  userId, \n  userRole, \n  userName, \n  contextId, \n  contextType,\n  trigger,\n  onStrikeIssued \n}: AdminIssueStrikeProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedOffense, setSelectedOffense] = useState(\"\");\n  const [evidence, setEvidence] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Fetch offense types for the user's role\n  const { data: offenseTypes } = useQuery({\n    queryKey: ['/api/offenses', userRole],\n    enabled: !!userRole && isDialogOpen,\n  });\n\n  // Issue strike mutation\n  const issueStrikeMutation = useMutation({\n    mutationFn: async (data: { userId: string; offenseType: string; evidence: string; userRole: string; contextId?: string }) => {\n      return await apiRequest('/api/admin/strikes', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: (data) => {\n      console.log(\"Strike issued successfully:\", data);\n      toast({\n        title: \"Strike Issued\",\n        description: `Strike has been successfully issued to ${userName || 'the user'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/strike-stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/disputes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', userId, 'strikes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setIsDialogOpen(false);\n      setSelectedOffense(\"\");\n      setEvidence(\"\");\n      onStrikeIssued?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleIssueStrike = () => {\n    console.log(\"Handle issue strike called\");\n    if (!selectedOffense || !evidence.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select an offense type and provide evidence.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"Issuing strike with data:\", {\n      userId,\n      offenseType: selectedOffense,\n      evidence: evidence.trim(),\n      userRole,\n      contextId,\n    });\n\n    issueStrikeMutation.mutate({\n      userId,\n      offenseType: selectedOffense,\n      evidence: evidence.trim(),\n      userRole,\n      contextId,\n    });\n  };\n\n  const defaultTrigger = (\n    <Button variant=\"outline\" size=\"sm\">\n      <AlertTriangle className=\"h-4 w-4 mr-2\" />\n      Issue Strike\n    </Button>\n  );\n\n  const handleTriggerClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log(\"Strike dialog trigger clicked\");\n    setIsDialogOpen(true);\n  };\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogTrigger asChild>\n        <div onClick={handleTriggerClick}>\n          {trigger || defaultTrigger}\n        </div>\n      </DialogTrigger>\n      <DialogContent \n        className=\"sm:max-w-[500px]\"\n        onPointerDownOutside={(e) => {\n          // Prevent dialog from closing when clicking on dropdown trigger\n          e.preventDefault();\n        }}\n      >\n        <DialogHeader>\n          <DialogTitle>Issue Strike</DialogTitle>\n          <DialogDescription>\n            Issue a strike to {userName || `this ${userRole}`} for policy violations or inappropriate behavior.\n            {contextId && contextType && (\n              <span className=\"block mt-1 text-sm text-blue-600\">\n                Context: {contextType.charAt(0).toUpperCase() + contextType.slice(1)} #{contextId.slice(0, 8)}\n              </span>\n            )}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label>User Information</Label>\n            <div className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n              <div>Name: {userName || 'Unknown'}</div>\n              <div>Role: {userRole.charAt(0).toUpperCase() + userRole.slice(1)}</div>\n              <div>ID: {userId.slice(0, 8)}...</div>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"offense\">Offense Type</Label>\n            <Select value={selectedOffense} onValueChange={setSelectedOffense}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select offense type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(offenseTypes || []).map((offense: OffenseDefinition) => (\n                  <SelectItem key={offense.offense} value={offense.offense}>\n                    <div className=\"flex items-center gap-2 py-1\">\n                      <span>{offense.offense}</span>\n                      <SeverityBadge level={offense.strikeLevel} variant=\"compact\" />\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"evidence\">Evidence & Details</Label>\n            <Textarea \n              id=\"evidence\"\n              value={evidence}\n              onChange={(e) => setEvidence(e.target.value)}\n              onFocus={(e) => {\n                e.stopPropagation();\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n              placeholder=\"Provide detailed evidence, reasoning, and any relevant information about the violation...\"\n              rows={4}\n              className=\"resize-none\"\n            />\n          </div>\n\n          {selectedOffense && (\n            <div className=\"text-sm text-amber-600 bg-amber-50 p-3 rounded border border-amber-200\">\n              <strong>Warning:</strong> This action will issue a strike that may result in automatic restrictions, suspensions, or other consequences based on the user's strike history.\n            </div>\n          )}\n        </div>\n        \n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleIssueStrike}\n            disabled={issueStrikeMutation.isPending}\n            className=\"bg-red-600 hover:bg-red-700\"\n          >\n            {issueStrikeMutation.isPending ? \"Issuing...\" : \"Issue Strike\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7509},"client/src/components/client-header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Handshake, User, Settings, Lock, LogOut, Menu, X, FileText, MessageSquare, Search, HelpCircle, Plus, Coins } from \"lucide-react\";\nimport logoImage from \"@assets/findermeister logo real_1756395091374.jpg\";\nimport { LanguageSwitcher } from \"@/components/LanguageSwitcher\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ClientHeaderProps {\n  currentPage?: string;\n}\n\nexport default function ClientHeader({ currentPage }: ClientHeaderProps) {\n  const { user, logout } = useAuth();\n  const { t } = useTranslation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <header className=\"bg-finder-red text-white px-4 sm:px-6 py-4\">\n      <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <img\n            src={logoImage}\n            alt=\"FinderMeister Logo\"\n            className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full object-contain bg-white p-1\"\n          />\n          <span className=\"text-lg sm:text-xl font-bold\">FinderMeister</span>\n        </Link>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden lg:flex items-center space-x-1 xl:space-x-2\">\n          {user ? (\n            <>\n              <Link\n                href=\"/client/dashboard\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'dashboard' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <Handshake className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">{t('navigation.dashboard')}</span>\n              </Link>\n              <Link\n                href=\"/client/create-find\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'create-find' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <Plus className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">{t('navigation.create_find')}</span>\n              </Link>\n              <Link\n                href=\"/client/finds\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'finds' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <FileText className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">{t('navigation.my_finds')}</span>\n              </Link>\n              <Link\n                href=\"/client/browse-finds\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'browse-finds' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <Search className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">Browse Finds</span>\n              </Link>\n              <Link\n                href=\"/client/contracts\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'contracts' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <Handshake className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">Contracts</span>\n              </Link>\n              <Link\n                href=\"/client/tokens\"\n                className={`flex items-center space-x-1 hover:underline px-2 py-1 rounded transition-colors text-sm ${currentPage === 'tokens' ? 'bg-white text-finder-red font-medium' : 'hover:bg-finder-red-dark'}`}\n              >\n                <Coins className=\"w-3 h-3 lg:w-4 lg:h-4\" />\n                <span className=\"text-xs lg:text-sm\">Findertokens</span>\n              </Link>\n\n              {/* Language Switcher */}\n              <LanguageSwitcher />\n\n              {/* Profile Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"text-white hover:bg-finder-red-dark p-2\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    {user.firstName || 'Profile'}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/messages\" className=\"flex items-center w-full cursor-pointer\">\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Messages\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/client/profile\" className=\"flex items-center w-full cursor-pointer\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Edit Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/client/change-password\" className=\"flex items-center w-full cursor-pointer\">\n                      <Lock className=\"w-4 h-4 mr-2\" />\n                      Change Password\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/support\" className=\"flex items-center w-full cursor-pointer\">\n                      <HelpCircle className=\"w-4 h-4 mr-2\" />\n                      Help Center\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} className=\"flex items-center cursor-pointer\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Log Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <>\n              <Link href=\"/login\" className=\"text-white hover:underline cursor-pointer\">How it Works</Link>\n              <Link href=\"/login\" className=\"text-white hover:underline cursor-pointer\">Log In</Link>\n              <Link href=\"/register\" className=\"text-white hover:underline cursor-pointer\">Sign Up</Link>\n            </>\n          )}\n        </nav>\n\n        {/* Mobile User Actions - visible when authenticated */}\n        {user && (\n          <div className=\"lg:hidden flex items-center space-x-3\">\n            {/* User Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <button className=\"text-white hover:bg-white/10 p-2 rounded-full\">\n                  <User className=\"w-5 h-5\" />\n                </button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/client/profile\" className=\"flex items-center w-full cursor-pointer\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/client/change-password\" className=\"flex items-center w-full cursor-pointer\">\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    Change Password\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/support\" className=\"flex items-center w-full cursor-pointer\">\n                    <HelpCircle className=\"w-4 h-4 mr-2\" />\n                    Help Center\n                  </Link>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Logout Button */}\n            <button\n              onClick={handleLogout}\n              className=\"text-white hover:bg-white/10 p-2 rounded-full\"\n              title=\"Log Out\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n            </button>\n          </div>\n        )}\n\n        {/* Mobile Menu Button */}\n        <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n          <SheetTrigger asChild>\n            <button className=\"lg:hidden text-white\">\n              <Menu className=\"w-6 h-6\" />\n            </button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"w-80 bg-finder-red text-white\">\n            <nav className=\"flex flex-col space-y-3 mt-6\">\n            {user ? (\n              <>\n                <Link\n                  href=\"/client/dashboard\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'dashboard' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <Handshake className=\"w-4 h-4\" />\n                  <span>Dashboard</span>\n                </Link>\n                <Link\n                  href=\"/client/create-find\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'create-find' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Post Find</span>\n                </Link>\n                <Link\n                  href=\"/client/finds\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'finds' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <FileText className=\"w-4 h-4\" />\n                  <span>My Finds</span>\n                </Link>\n                <Link\n                  href=\"/client/browse-finds\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'browse-finds' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <Search className=\"w-4 h-4\" />\n                  <span>Browse Finds</span>\n                </Link>\n                <Link\n                  href=\"/client/contracts\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'contracts' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <Handshake className=\"w-4 h-4\" />\n                  <span>Contracts</span>\n                </Link>\n                <Link\n                  href=\"/client/tokens\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'tokens' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <Coins className=\"w-4 h-4\" />\n                  <span>Findertokens</span>\n                </Link>\n                <Link\n                  href=\"/messages\"\n                  className={`flex items-center space-x-2 py-2 px-3 rounded ${currentPage === 'messages' ? 'bg-white text-finder-red font-medium' : 'hover:bg-white/10'}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <MessageSquare className=\"w-4 h-4\" />\n                  <span>Messages</span>\n                </Link>\n                <div className=\"border-t border-white/20 pt-3 mt-3\">\n                  <div className=\"flex items-center py-2 px-3 text-white font-medium\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    {user.firstName || 'Profile'}\n                  </div>\n                  <Link\n                    href=\"/client/profile\"\n                    className=\"block py-2 px-6 hover:bg-white/10 rounded\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <Settings className=\"w-4 h-4 mr-2 inline\" />\n                    Edit Profile\n                  </Link>\n                  <Link\n                    href=\"/client/change-password\"\n                    className=\"block py-2 px-6 hover:bg-white/10 rounded\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <Lock className=\"w-4 h-4 mr-2 inline\" />\n                    Change Password\n                  </Link>\n                  <Link\n                    href=\"/support\"\n                    className=\"block py-2 px-6 hover:bg-white/10 rounded\"\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    <HelpCircle className=\"w-4 h-4 mr-2 inline\" />\n                    Help Center\n                  </Link>\n                  <button\n                    onClick={() => { handleLogout(); setMobileMenuOpen(false); }}\n                    className=\"flex items-center w-full py-2 px-6 hover:bg-white/10 rounded text-left\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Log Out\n                  </button>\n\n                  {/* Mobile Language Switcher */}\n                  <div className=\"border-t border-white/20 pt-4 mt-4\">\n                    <LanguageSwitcher variant=\"mobile\" className=\"px-6\" />\n                  </div>\n                </div>\n              </>\n            ) : (\n              <>\n                <Link href=\"/login\" className=\"block py-2 px-3 hover:bg-white/10 rounded\" onClick={() => setMobileMenuOpen(false)}>How it Works</Link>\n                <Link href=\"/login\" className=\"block py-2 px-3 hover:bg-white/10 rounded\" onClick={() => setMobileMenuOpen(false)}>Log In</Link>\n                <Link href=\"/register\" className=\"block py-2 px-3 hover:bg-white/10 rounded\" onClick={() => setMobileMenuOpen(false)}>Sign Up</Link>\n              </>\n            )}\n            </nav>\n          </SheetContent>\n        </Sheet>\n      </div>\n    </header>\n  );\n}","size_bytes":14826},"client/src/components/escrow-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DollarSign, Clock, Check, HandCoins } from \"lucide-react\";\n\ninterface EscrowStatusProps {\n  status: 'held' | 'in_progress' | 'completed' | 'released';\n  contractId?: string;\n  amount?: number;\n  className?: string;\n}\n\nexport default function EscrowStatus({ status, contractId, amount, className = \"\" }: EscrowStatusProps) {\n  const steps = [\n    {\n      key: 'held',\n      title: 'Held in Escrow',\n      description: 'Payment secured',\n      icon: DollarSign,\n    },\n    {\n      key: 'in_progress',\n      title: 'In Progress',\n      description: 'Finder working',\n      icon: Clock,\n    },\n    {\n      key: 'completed',\n      title: 'Marked Complete',\n      description: 'Awaiting approval',\n      icon: Check,\n    },\n    {\n      key: 'released',\n      title: 'Payment Released',\n      description: 'Transaction complete',\n      icon: HandCoins,\n    },\n  ];\n\n  const currentStepIndex = steps.findIndex(step => step.key === status);\n\n  return (\n    <div className={`py-20 bg-finder-gray ${className}`}>\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h2 className=\"text-3xl font-bold text-center text-finder-text mb-12\">\n          Escrow Status\n        </h2>\n        \n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-xl font-semibold text-finder-text\">\n                Payment Protection Process\n              </CardTitle>\n              {contractId && (\n                <span className=\"text-finder-text-light text-sm\">\n                  Contract #{contractId.slice(-8)}\n                </span>\n              )}\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-8\">\n            {/* Progress Indicator */}\n            <div className=\"relative\">\n              {/* Progress Line */}\n              <div className=\"absolute top-6 left-8 right-8 h-0.5 bg-gray-300\"></div>\n              <div \n                className=\"absolute top-6 left-8 h-0.5 bg-finder-red transition-all duration-500\"\n                style={{ \n                  width: currentStepIndex >= 0 ? `${(currentStepIndex / (steps.length - 1)) * 100}%` : '0%' \n                }}\n              ></div>\n              \n              {/* Status Steps */}\n              <div className=\"relative flex justify-between\">\n                {steps.map((step, index) => {\n                  const Icon = step.icon;\n                  const isActive = index <= currentStepIndex;\n                  const isCurrent = index === currentStepIndex;\n                  \n                  return (\n                    <div key={step.key} className=\"flex flex-col items-center\">\n                      <div \n                        className={`w-12 h-12 rounded-full flex items-center justify-center transition-all duration-300 ${\n                          isActive \n                            ? 'bg-finder-red text-white' \n                            : 'bg-gray-300 text-gray-600'\n                        } ${isCurrent ? 'ring-4 ring-red-100' : ''}`}\n                      >\n                        <Icon className=\"w-5 h-5\" />\n                      </div>\n                      <div className=\"mt-4 text-center\">\n                        <p className={`font-semibold ${\n                          isActive ? 'text-finder-text' : 'text-finder-text-light'\n                        }`}>\n                          {step.title}\n                        </p>\n                        <p className=\"text-sm text-finder-text-light\">\n                          {step.description}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Information Box */}\n            <div className=\"mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <Check className=\"w-4 h-4 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-blue-800 font-medium\">\n                    Your payment is safely held in escrow until the request is completed to your satisfaction.\n                  </p>\n                  {amount && (\n                    <p className=\"text-blue-700 text-sm mt-1\">\n                      Escrow amount: ${amount.toFixed(2)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Status Description */}\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-finder-text-light\">\n                {status === 'held' && \"Payment has been secured in escrow. The finder can now begin working on your request.\"}\n                {status === 'in_progress' && \"The finder is actively working on your request. You will be notified when they mark it as complete.\"}\n                {status === 'completed' && \"The finder has marked the request as complete. Please review and approve to release payment.\"}\n                {status === 'released' && \"Payment has been released to the finder. The transaction is now complete.\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5534},"client/src/components/file-display.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Image, Download, ExternalLink } from \"lucide-react\";\n\ninterface FileDisplayProps {\n  files: string[];\n  title?: string;\n  className?: string;\n}\n\nexport default function FileDisplay({ files, title = \"Attached Files\", className = \"\" }: FileDisplayProps) {\n  if (!files || files.length === 0) {\n    return null;\n  }\n\n  const getFileIcon = (filePath: string) => {\n    const extension = filePath.split('.').pop()?.toLowerCase();\n    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];\n    \n    if (imageExtensions.includes(extension || '')) {\n      return <Image className=\"w-5 h-5 text-blue-600\" />;\n    }\n    return <FileText className=\"w-5 h-5 text-gray-600\" />;\n  };\n\n  const getFileName = (filePath: string) => {\n    return filePath.split('/').pop() || filePath;\n  };\n\n  const getFileType = (filePath: string) => {\n    const extension = filePath.split('.').pop()?.toLowerCase();\n    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];\n    \n    if (imageExtensions.includes(extension || '')) {\n      return 'Image';\n    }\n    if (extension === 'pdf') {\n      return 'PDF';\n    }\n    if (['doc', 'docx'].includes(extension || '')) {\n      return 'Document';\n    }\n    if (extension === 'txt') {\n      return 'Text';\n    }\n    return 'File';\n  };\n\n  const isImage = (filePath: string) => {\n    const extension = filePath.split('.').pop()?.toLowerCase();\n    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];\n    return imageExtensions.includes(extension || '');\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <FileText className=\"w-5 h-5\" />\n          {title} ({files.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Image Gallery */}\n          {files.some(isImage) && (\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Images</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {files.filter(isImage).map((file, index) => (\n                  <div key={index} className=\"group relative\">\n                    <div className=\"aspect-square rounded-lg overflow-hidden bg-gray-100\">\n                      <img \n                        src={file} \n                        alt={getFileName(file)}\n                        className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                        onError={(e) => {\n                          // Fallback if image fails to load\n                          e.currentTarget.style.display = 'none';\n                        }}\n                      />\n                    </div>\n                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded-lg flex items-center justify-center\">\n                      <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => window.open(file, '_blank')}\n                        >\n                          <ExternalLink className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => {\n                            const link = document.createElement('a');\n                            link.href = file;\n                            link.download = getFileName(file);\n                            link.click();\n                          }}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <p className=\"text-xs text-gray-600 mt-2 truncate\">{getFileName(file)}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Other Files */}\n          {files.some(file => !isImage(file)) && (\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Documents</h4>\n              <div className=\"space-y-2\">\n                {files.filter(file => !isImage(file)).map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getFileIcon(file)}\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 truncate max-w-xs\">\n                          {getFileName(file)}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {getFileType(file)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(file, '_blank')}\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-1\" />\n                        View\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const link = document.createElement('a');\n                          link.href = file;\n                          link.download = getFileName(file);\n                          link.click();\n                        }}\n                      >\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        Download\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6378},"client/src/components/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Upload, File, Image } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FileUploadProps {\n  onFilesChange: (files: File[]) => void;\n  maxFiles?: number;\n  maxSizeInMB?: number;\n  acceptedTypes?: string[];\n  label?: string;\n  description?: string;\n}\n\nexport default function FileUpload({\n  onFilesChange,\n  maxFiles = 5,\n  maxSizeInMB = 10,\n  acceptedTypes = [\"image/*\", \"application/pdf\", \".doc\", \".docx\", \".txt\"],\n  label = \"Upload Files\",\n  description = \"Upload images, documents, or other files to help describe your request\"\n}: FileUploadProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const validateFile = (file: File): boolean => {\n    // Check file size\n    if (file.size > maxSizeInMB * 1024 * 1024) {\n      toast({\n        variant: \"destructive\",\n        title: \"File too large\",\n        description: `${file.name} exceeds ${maxSizeInMB}MB limit`,\n      });\n      return false;\n    }\n\n    // Check file type\n    const isValidType = acceptedTypes.some(type => {\n      if (type.includes(\"/*\")) {\n        return file.type.startsWith(type.replace(\"/*\", \"\"));\n      }\n      return file.type === type || file.name.toLowerCase().endsWith(type);\n    });\n\n    if (!isValidType) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid file type\",\n        description: `${file.name} is not an accepted file type`,\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const addFiles = (newFiles: FileList | File[]) => {\n    const filesArray = Array.from(newFiles);\n    const validFiles = filesArray.filter(validateFile);\n\n    if (selectedFiles.length + validFiles.length > maxFiles) {\n      toast({\n        variant: \"destructive\",\n        title: \"Too many files\",\n        description: `You can only upload up to ${maxFiles} files`,\n      });\n      return;\n    }\n\n    const updatedFiles = [...selectedFiles, ...validFiles];\n    setSelectedFiles(updatedFiles);\n    onFilesChange(updatedFiles);\n  };\n\n  const removeFile = (index: number) => {\n    const updatedFiles = selectedFiles.filter((_, i) => i !== index);\n    setSelectedFiles(updatedFiles);\n    onFilesChange(updatedFiles);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      addFiles(e.dataTransfer.files);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n  };\n\n  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      addFiles(e.target.files);\n    }\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith(\"image/\")) {\n      return <Image className=\"w-4 h-4\" />;\n    }\n    return <File className=\"w-4 h-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 B\";\n    const k = 1024;\n    const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium text-gray-700\">{label}</label>\n        <p className=\"text-sm text-gray-500\">{description}</p>\n      </div>\n\n      {/* Drop Zone */}\n      <Card \n        className={`border-2 border-dashed transition-colors ${\n          dragActive \n            ? \"border-finder-red/60 bg-finder-red/10\" \n            : \"border-gray-300 hover:border-gray-400\"\n        }`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <CardContent className=\"py-8\">\n          <div className=\"text-center space-y-4\">\n            <Upload className=\"w-12 h-12 text-gray-400 mx-auto\" />\n            <div>\n              <p className=\"text-lg font-medium text-gray-700\">\n                Drag and drop files here\n              </p>\n              <p className=\"text-gray-500\">or</p>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"mt-2\"\n                onClick={() => fileInputRef.current?.click()}\n              >\n                Browse Files\n              </Button>\n            </div>\n            <p className=\"text-sm text-gray-500\">\n              Max {maxFiles} files, up to {maxSizeInMB}MB each\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Hidden File Input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={acceptedTypes.join(\",\")}\n        onChange={handleFileInput}\n        className=\"hidden\"\n      />\n\n      {/* Selected Files List */}\n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700\">\n            Selected Files ({selectedFiles.length}/{maxFiles})\n          </h4>\n          <div className=\"space-y-2\">\n            {selectedFiles.map((file, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg border\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {getFileIcon(file)}\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 truncate max-w-xs\">\n                      {file.name}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  className=\"text-finder-red hover:text-finder-red-dark hover:bg-finder-red/10\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6657},"client/src/components/finder-header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Handshake, \n  User, \n  Wallet, \n  CreditCard, \n  Shield, \n  Settings, \n  LogOut,\n  ChevronDown,\n  Menu,\n  FileText,\n  Search,\n  Home,\n  MessageCircle,\n  Clock\n} from \"lucide-react\";\nimport logoImage from \"@assets/Findermeister logo_1755186313310.jpg\";\nimport { LanguageSwitcher } from \"@/components/LanguageSwitcher\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface FinderHeaderProps {\n  currentPage?: string;\n}\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  // Convert from kobo to naira (divide by 100) if the amount seems to be in kobo\n  const nairaAmount = numAmount > 1000 ? numAmount / 100 : numAmount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(nairaAmount);\n};\n\nexport function FinderHeader({ currentPage }: FinderHeaderProps) {\n  const { user, logout } = useAuth();\n  const { t } = useTranslation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Fetch finder profile and pending earnings\n  const { data: finder } = useQuery({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user && user.role === 'finder'\n  });\n\n  const { data: pendingEarnings } = useQuery({\n    queryKey: ['/api/finder/pending-earnings'],\n    enabled: !!user && user.role === 'finder'\n  });\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <header className=\"bg-finder-red text-white px-4 sm:px-6 py-4\">\n      <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <img \n            src={logoImage} \n            alt=\"FinderMeister Logo\" \n            className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full object-contain bg-white p-1\" \n          />\n          <span className=\"text-lg sm:text-xl font-bold\">FinderMeister</span>\n        </Link>\n        \n        <nav className=\"flex items-center space-x-2 md:space-x-4\">\n          {/* Desktop Navigation */}\n          <Link \n            href=\"/finder/dashboard\" \n            className={`hidden md:inline hover:underline text-sm ${currentPage === 'dashboard' ? 'font-semibold' : ''}`}\n          >\n            Dashboard\n          </Link>\n          <Link \n            href=\"/finder/browse-finds\" \n            className={`hidden md:inline hover:underline text-sm ${currentPage === 'browse' ? 'font-semibold' : ''}`}\n          >\n            Browse Finds\n          </Link>\n          <Link \n            href=\"/finder/contracts\" \n            className={`hidden md:inline hover:underline text-sm ${currentPage === 'contracts' ? 'font-semibold' : ''}`}\n          >\n            My Contracts\n          </Link>\n\n          {/* Mobile Navigation Menu */}\n          <DropdownMenu open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className=\"md:hidden text-white hover:bg-white/10 p-2\"\n              >\n                <Menu className=\"w-5 h-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/dashboard\" className=\"flex items-center cursor-pointer\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  Dashboard\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/browse-finds\" className=\"flex items-center cursor-pointer\">\n                  <Search className=\"mr-2 h-4 w-4\" />\n                  Browse Finds\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/contracts\" className=\"flex items-center cursor-pointer\">\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  My Contracts\n                </Link>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Language Switcher */}\n          <LanguageSwitcher />\n\n          {/* User Dropdown Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className=\"flex items-center space-x-2 text-white hover:bg-white/10 px-2 sm:px-3\"\n              >\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback className=\"bg-white text-finder-red text-sm font-semibold\">\n                    {user?.firstName ? getInitials(`${user.firstName} ${user.lastName}`) : 'U'}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"hidden sm:inline text-sm font-medium\">{user?.firstName ? `${user.firstName} ${user.lastName}` : 'User'}</span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-64\">\n              {/* Balance Information at Top */}\n              <div className=\"p-3 bg-gradient-to-r from-green-50 to-blue-50 border-b\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-xs font-medium text-gray-600\">Available Balance</span>\n                  <span className=\"text-lg font-bold text-green-600\">\n                    {formatCurrency(finder?.availableBalance || '0.00')}\n                  </span>\n                </div>\n                {pendingEarnings && pendingEarnings.contractCount > 0 && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-orange-600 flex items-center\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      Pending ({pendingEarnings.contractCount})\n                    </span>\n                    <span className=\"text-sm font-semibold text-orange-700\">\n                      {formatCurrency(pendingEarnings.netAmount)}\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              <DropdownMenuLabel className=\"font-normal px-3 py-2\">\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm font-medium leading-none\">{user?.firstName} {user?.lastName}</p>\n                  <p className=\"text-xs leading-none text-muted-foreground\">{user?.email}</p>\n                </div>\n              </DropdownMenuLabel>\n              \n              <DropdownMenuSeparator />\n              \n              <DropdownMenuItem asChild>\n                <Link href=\"/messages\" className=\"flex items-center cursor-pointer px-3 py-2\">\n                  <MessageCircle className=\"mr-2 h-4 w-4\" />\n                  Messages\n                </Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/tokens\" className=\"flex items-center cursor-pointer px-3 py-2\">\n                  <Wallet className=\"mr-2 h-4 w-4\" />\n                  Findertokens\n                </Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator />\n              \n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/profile\" className=\"flex items-center cursor-pointer px-3 py-2\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Profile\n                </Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/withdrawals\" className=\"flex items-center cursor-pointer px-3 py-2\">\n                  <CreditCard className=\"mr-2 h-4 w-4\" />\n                  Withdrawals\n                </Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem asChild>\n                <Link href=\"/finder/security\" className=\"flex items-center cursor-pointer px-3 py-2\">\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Security\n                </Link>\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator />\n              \n              <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer px-3 py-2 text-red-600 focus:text-red-600\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log Out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </nav>\n      </div>\n    </header>\n  );\n}","size_bytes":9225},"client/src/components/finder-level-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface FinderLevelBadgeProps {\n  completedJobs: number;\n  className?: string;\n}\n\nexport function FinderLevelBadge({ completedJobs, className }: FinderLevelBadgeProps) {\n  const getFinderLevel = (jobs: number) => {\n    if (jobs >= 100) return { level: \"Grandmeister\", color: \"bg-black text-white\" };\n    if (jobs >= 50) return { level: \"Meister\", color: \"bg-purple-600 text-white\" };\n    if (jobs >= 15) return { level: \"Seeker\", color: \"bg-blue-600 text-white\" };\n    if (jobs >= 5) return { level: \"Pathfinder\", color: \"bg-yellow-500 text-black\" };\n    return { level: \"Novice\", color: \"bg-green-600 text-white\" };\n  };\n\n  const { level, color } = getFinderLevel(completedJobs);\n\n  return (\n    <Badge className={`${color} font-semibold px-3 py-1 ${className}`}>\n      {level}\n    </Badge>\n  );\n}","size_bytes":848},"client/src/components/severity-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface SeverityBadgeProps {\n  level: number;\n  showIcon?: boolean;\n  showName?: boolean;\n  variant?: 'default' | 'compact' | 'detailed';\n  className?: string;\n}\n\nexport function SeverityBadge({ \n  level, \n  showIcon = true, \n  showName = true, \n  variant = 'default',\n  className = \"\" \n}: SeverityBadgeProps) {\n  \n  const getSeverityConfig = (level: number) => {\n    switch (level) {\n      case 1:\n        return {\n          color: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n          icon: \"‚ö†Ô∏è\",\n          name: \"Minor Warning\",\n          description: \"First-time or minor policy violations\"\n        };\n      case 2:\n        return {\n          color: \"bg-orange-100 text-orange-800 border-orange-200\",\n          icon: \"üî∂\",\n          name: \"Serious Violation\",\n          description: \"Repeated violations or moderate policy breaches\"\n        };\n      case 3:\n        return {\n          color: \"bg-red-100 text-red-800 border-red-200\",\n          icon: \"üî¥\",\n          name: \"Major Offense\",\n          description: \"Serious misconduct that threatens platform integrity\"\n        };\n      case 4:\n        return {\n          color: \"bg-gray-900 text-white border-gray-800\",\n          icon: \"‚ö´\",\n          name: \"Critical Violation\",\n          description: \"Severe violations requiring immediate action\"\n        };\n      default:\n        return {\n          color: \"bg-gray-100 text-gray-800 border-gray-200\",\n          icon: \"‚ùì\",\n          name: \"Unknown\",\n          description: \"Severity level not determined\"\n        };\n    }\n  };\n\n  const config = getSeverityConfig(level);\n\n  if (variant === 'compact') {\n    return (\n      <Badge className={`${config.color} ${className}`}>\n        {showIcon && <span className=\"mr-1\">{config.icon}</span>}\n        Level {level}\n      </Badge>\n    );\n  }\n\n  if (variant === 'detailed') {\n    return (\n      <div className={`flex items-center gap-2 p-2 rounded-lg ${config.color} ${className}`}>\n        {showIcon && <span className=\"text-lg\">{config.icon}</span>}\n        <div className=\"flex flex-col\">\n          <Badge className={`mb-1 ${config.color} border-0`}>\n            Level {level}\n          </Badge>\n          {showName && (\n            <span className=\"text-sm font-medium\">{config.name}</span>\n          )}\n          <span className=\"text-xs opacity-80\">{config.description}</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Badge className={`${config.color} ${className}`}>\n      {showIcon && <span className=\"mr-1\">{config.icon}</span>}\n      {showName ? config.name : `Level ${level}`}\n    </Badge>\n  );\n}\n\nexport function SeverityIndicator({ level, className = \"\" }: { level: number; className?: string }) {\n  const config = getSeverityConfig(level);\n  \n  return (\n    <div className={`inline-flex items-center gap-1 ${className}`}>\n      <span>{config.icon}</span>\n      <span className=\"text-sm font-medium\">{config.name}</span>\n    </div>\n  );\n}\n\n// Helper function to get severity configuration (can be used elsewhere)\nexport function getSeverityConfig(level: number) {\n  switch (level) {\n    case 1:\n      return {\n        color: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n        icon: \"‚ö†Ô∏è\",\n        name: \"Minor Warning\",\n        description: \"First-time or minor policy violations requiring attention\"\n      };\n    case 2:\n      return {\n        color: \"bg-orange-100 text-orange-800 border-orange-200\",\n        icon: \"üî∂\",\n        name: \"Serious Violation\",\n        description: \"Repeated violations or moderate policy breaches\"\n      };\n    case 3:\n      return {\n        color: \"bg-red-100 text-red-800 border-red-200\",\n        icon: \"üî¥\",\n        name: \"Major Offense\",\n        description: \"Serious misconduct that threatens platform integrity\"\n      };\n    case 4:\n      return {\n        color: \"bg-gray-900 text-white border-gray-800\",\n        icon: \"‚ö´\",\n        name: \"Critical Violation\",\n        description: \"Severe violations requiring immediate action\"\n      };\n    default:\n      return {\n        color: \"bg-gray-100 text-gray-800 border-gray-200\",\n        icon: \"‚ùì\",\n        name: \"Unknown\",\n        description: \"Severity level not determined\"\n      };\n  }\n}","size_bytes":4237},"client/src/components/support-widget.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  HelpCircle, \n  MessageSquare, \n  FileText, \n  X,\n  ChevronRight,\n  Search\n} from \"lucide-react\";\n\ninterface SupportWidgetProps {\n  context?: 'dashboard' | 'contracts' | 'proposals' | 'messages' | 'profile' | 'tokens';\n}\n\nconst contextualHelp = {\n  dashboard: {\n    title: \"Dashboard Help\",\n    tips: [\n      \"Your dashboard shows active contracts and recent activity\",\n      \"Use the sidebar to navigate between different sections\",\n      \"Check notifications for important updates\"\n    ],\n    faqs: [\n      { q: \"How do I view my active contracts?\", a: \"Active contracts are displayed in the main dashboard area\" },\n      { q: \"What does the completed jobs counter show?\", a: \"This shows the total number of contracts you've successfully completed\" }\n    ]\n  },\n  contracts: {\n    title: \"Contracts Help\",\n    tips: [\n      \"Click on any contract to view detailed information\",\n      \"Submit your work when ready for client review\",\n      \"Track escrow status to see payment progress\"\n    ],\n    faqs: [\n      { q: \"How do I submit completed work?\", a: \"Click the 'Submit Work' button on your contract and upload your deliverables\" },\n      { q: \"When will I get paid?\", a: \"Payment is released from escrow once the client approves your work\" }\n    ]\n  },\n  proposals: {\n    title: \"Proposals Help\",\n    tips: [\n      \"Each proposal costs 1 token to submit\",\n      \"Write detailed proposals to increase your chances\",\n      \"Include relevant portfolio items\"\n    ],\n    faqs: [\n      { q: \"How many proposals can I submit?\", a: \"You can submit as many proposals as you have tokens for\" },\n      { q: \"Can I edit a proposal after submitting?\", a: \"No, proposals cannot be edited once submitted\" }\n    ]\n  },\n  messages: {\n    title: \"Messaging Help\",\n    tips: [\n      \"Only clients can initiate conversations\",\n      \"All messages are linked to specific proposals\",\n      \"Be professional in all communications\"\n    ],\n    faqs: [\n      { q: \"Why can't I message this user?\", a: \"Finders can only respond to messages from clients who have their proposals\" },\n      { q: \"Are messages private?\", a: \"Yes, only you and the other party can see your conversation\" }\n    ]\n  },\n  tokens: {\n    title: \"Tokens Help\",\n    tips: [\n      \"Tokens are required to submit proposals\",\n      \"Purchase tokens in bundles for better value\",\n      \"Your token balance is shown in your dashboard\"\n    ],\n    faqs: [\n      { q: \"How much do tokens cost?\", a: \"Token packages start at ‚Ç¶10 for 10 tokens\" },\n      { q: \"Do tokens expire?\", a: \"No, tokens never expire and remain in your account\" }\n    ]\n  },\n  profile: {\n    title: \"Profile Help\",\n    tips: [\n      \"Complete your profile to attract more clients\",\n      \"Add portfolio items to showcase your work\",\n      \"Set competitive but fair rates\"\n    ],\n    faqs: [\n      { q: \"How important is my profile?\", a: \"A complete profile significantly increases your chances of winning contracts\" },\n      { q: \"Can I change my specialization?\", a: \"Yes, you can update your skills and specialization anytime\" }\n    ]\n  }\n};\n\nexport function SupportWidget({ context }: SupportWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showChat, setShowChat] = useState(false);\n\n  const currentHelp = context ? contextualHelp[context] : null;\n\n  if (!isOpen) {\n    return (\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"bg-finder-red hover:bg-finder-red-dark text-white rounded-full p-4 shadow-lg\"\n        >\n          <HelpCircle className=\"w-6 h-6\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50 w-80\">\n      <Card className=\"shadow-xl border-2\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">\n              {currentHelp ? currentHelp.title : \"Help & Support\"}\n            </CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsOpen(false)}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Quick Actions */}\n          <div className=\"space-y-2\">\n            <Link href=\"/support/help-center\">\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Browse Help Center\n              </Button>\n            </Link>\n            <Link href=\"/support/contact\">\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Contact Support\n              </Button>\n            </Link>\n          </div>\n\n          {/* Contextual Help */}\n          {currentHelp && (\n            <>\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-medium text-sm text-gray-900 mb-2\">Quick Tips</h4>\n                <ul className=\"space-y-1 text-xs text-gray-600\">\n                  {currentHelp.tips.map((tip, index) => (\n                    <li key={index}>‚Ä¢ {tip}</li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-medium text-sm text-gray-900 mb-2\">Common Questions</h4>\n                <div className=\"space-y-2\">\n                  {currentHelp.faqs.map((faq, index) => (\n                    <details key={index} className=\"text-xs\">\n                      <summary className=\"cursor-pointer text-gray-700 hover:text-gray-900\">\n                        {faq.q}\n                      </summary>\n                      <p className=\"mt-1 text-gray-600 pl-4\">{faq.a}</p>\n                    </details>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Live Status */}\n          <div className=\"border-t pt-4\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-gray-600\">Support Status</span>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-green-600\">Online</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6677},"client/src/components/user-strikes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, FileText, Shield, Info } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface Strike {\n  id: string;\n  userId: string;\n  strikeLevel: number;\n  offense: string;\n  offenseType: string;\n  evidence: string;\n  issuedBy: string;\n  status: string;\n  createdAt: Date;\n  expiresAt: Date;\n  notes?: string;\n}\n\ninterface UserRestriction {\n  id: string;\n  userId: string;\n  restrictionType: string;\n  reason: string;\n  createdBy: string;\n  createdAt: Date;\n  endDate?: Date;\n  isActive: boolean;\n}\n\ninterface StrikeRestrictions {\n  restrictions: UserRestriction[];\n  activeStrikes: Strike[];\n  strikeLevel: number;\n  canPost: boolean;\n  canApply: boolean;\n  canMessage: boolean;\n  isSuspended: boolean;\n  isBanned: boolean;\n}\n\ninterface UserStrikesProps {\n  userId?: string;\n  showTitle?: boolean;\n}\n\nexport default function UserStrikes({ userId, showTitle = true }: UserStrikesProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedStrike, setSelectedStrike] = useState<Strike | null>(null);\n  const [disputeDescription, setDisputeDescription] = useState(\"\");\n  const [disputeEvidence, setDisputeEvidence] = useState(\"\");\n  const [isDisputeDialogOpen, setIsDisputeDialogOpen] = useState(false);\n\n  const targetUserId = userId || user?.id;\n\n  // Fetch user strikes and restrictions\n  const { data: strikeData, isLoading } = useQuery({\n    queryKey: ['/api/users', targetUserId, 'strikes'],\n    enabled: !!targetUserId,\n  });\n\n  const strikes: Strike[] = strikeData?.strikes || [];\n  const restrictions: StrikeRestrictions = strikeData?.restrictions || {\n    restrictions: [],\n    activeStrikes: [],\n    strikeLevel: 0,\n    canPost: true,\n    canApply: true,\n    canMessage: true,\n    isSuspended: false,\n    isBanned: false\n  };\n\n  // Submit dispute mutation\n  const submitDisputeMutation = useMutation({\n    mutationFn: async (data: { strikeId: string; description: string; evidence?: string }) => {\n      return await apiRequest(`/api/strikes/${data.strikeId}/dispute`, 'POST', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Dispute Submitted\",\n        description: \"Your dispute has been submitted for review. We'll respond within 2-3 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', targetUserId, 'strikes'] });\n      setIsDisputeDialogOpen(false);\n      setDisputeDescription(\"\");\n      setDisputeEvidence(\"\");\n      setSelectedStrike(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStrikeLevelColor = (level: number) => {\n    switch (level) {\n      case 1: return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case 2: return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case 3: return \"bg-red-100 text-red-800 border-red-200\";\n      case 4: return \"bg-gray-900 text-white border-gray-900\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getStrikeLevelLabel = (level: number) => {\n    switch (level) {\n      case 1: return \"Warning\";\n      case 2: return \"System Restrictions\";\n      case 3: return \"Temporary Suspension\";\n      case 4: return \"Permanent Ban\";\n      default: return \"Unknown\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return \"bg-red-100 text-red-800\";\n      case 'expired': return \"bg-gray-100 text-gray-600\";\n      case 'disputed': return \"bg-blue-100 text-blue-800\";\n      case 'withdrawn': return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getRestrictionColor = (type: string) => {\n    switch (type) {\n      case 'posting': return \"bg-yellow-100 text-yellow-800\";\n      case 'applications': return \"bg-orange-100 text-orange-800\";\n      case 'messaging': return \"bg-blue-100 text-blue-800\";\n      case 'limited_features': return \"bg-purple-100 text-purple-800\";\n      case 'suspended': return \"bg-red-100 text-red-800\";\n      case 'banned': return \"bg-gray-900 text-white\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const handleSubmitDispute = () => {\n    if (!selectedStrike) return;\n    \n    if (!disputeDescription.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide a description for your dispute.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitDisputeMutation.mutate({\n      strikeId: selectedStrike.id,\n      description: disputeDescription,\n      evidence: disputeEvidence || undefined,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center p-6\">Loading strike information...</div>;\n  }\n\n  const activeStrikes = strikes.filter(s => s.status === 'active');\n  const hasActiveRestrictions = restrictions.restrictions.length > 0;\n\n  return (\n    <div className=\"space-y-4\">\n      {showTitle && (\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"h-5 w-5 text-gray-600\" />\n          <h2 className=\"text-xl font-semibold\">Community Standing</h2>\n        </div>\n      )}\n\n      {/* Current Status Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center space-x-2\">\n            <Info className=\"h-5 w-5\" />\n            <span>Account Status</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className={`text-2xl font-bold ${restrictions.strikeLevel > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                {restrictions.strikeLevel}\n              </div>\n              <div className=\"text-sm text-gray-600\">Active Strikes</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={`text-sm font-medium ${restrictions.canPost ? 'text-green-600' : 'text-red-600'}`}>\n                {restrictions.canPost ? '‚úì' : '‚úó'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Can Post</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={`text-sm font-medium ${restrictions.canApply ? 'text-green-600' : 'text-red-600'}`}>\n                {restrictions.canApply ? '‚úì' : '‚úó'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Can Apply</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={`text-sm font-medium ${restrictions.canMessage ? 'text-green-600' : 'text-red-600'}`}>\n                {restrictions.canMessage ? '‚úì' : '‚úó'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Can Message</div>\n            </div>\n          </div>\n\n          {restrictions.isBanned && (\n            <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <span className=\"text-red-800 font-medium\">Account Banned</span>\n              </div>\n              <p className=\"text-red-700 text-sm mt-1\">\n                Your account has been permanently banned from the platform.\n              </p>\n            </div>\n          )}\n\n          {restrictions.isSuspended && (\n            <div className=\"mt-4 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                <span className=\"text-orange-800 font-medium\">Account Suspended</span>\n              </div>\n              <p className=\"text-orange-700 text-sm mt-1\">\n                Your account is temporarily suspended.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Active Restrictions */}\n      {hasActiveRestrictions && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Active Restrictions</CardTitle>\n            <CardDescription>Current limitations on your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {restrictions.restrictions.map((restriction) => (\n                <div key={restriction.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <Badge className={getRestrictionColor(restriction.restrictionType)}>\n                        {restriction.restrictionType.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      {restriction.endDate && (\n                        <span className=\"text-sm text-gray-600\">\n                          Until {new Date(restriction.endDate).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-700\">{restriction.reason}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Strikes History */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Strike History</CardTitle>\n          <CardDescription>\n            {strikes.length === 0 \n              ? \"You have a clean record with no strikes.\" \n              : `You have ${activeStrikes.length} active strike${activeStrikes.length !== 1 ? 's' : ''} out of ${strikes.length} total.`\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {strikes.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Shield className=\"h-12 w-12 mx-auto mb-2 text-green-500\" />\n              <p>Great job! You have no strikes on your account.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {strikes.map((strike) => (\n                <div key={strike.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getStrikeLevelColor(strike.strikeLevel)}>\n                        Level {strike.strikeLevel}: {getStrikeLevelLabel(strike.strikeLevel)}\n                      </Badge>\n                      <Badge className={getStatusColor(strike.status)}>\n                        {strike.status.charAt(0).toUpperCase() + strike.status.slice(1)}\n                      </Badge>\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {new Date(strike.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Offense:</span> {strike.offense}\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Evidence:</span> {strike.evidence}\n                    </div>\n                    {strike.expiresAt && (\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Expires:</span> {new Date(strike.expiresAt).toLocaleDateString()}\n                      </div>\n                    )}\n                    {strike.notes && (\n                      <div>\n                        <span className=\"font-medium text-gray-700\">Notes:</span> {strike.notes}\n                      </div>\n                    )}\n                  </div>\n\n                  {strike.status === 'active' && (\n                    <div className=\"mt-3 pt-3 border-t\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedStrike(strike);\n                          setIsDisputeDialogOpen(true);\n                        }}\n                      >\n                        <FileText className=\"h-4 w-4 mr-2\" />\n                        Dispute Strike\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Dispute Dialog */}\n      <Dialog open={isDisputeDialogOpen} onOpenChange={setIsDisputeDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Dispute Strike</DialogTitle>\n            <DialogDescription>\n              If you believe this strike was issued in error, you can submit a dispute for review.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedStrike && (\n            <div className=\"space-y-4\">\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium\">Strike Details:</div>\n                  <div>Level {selectedStrike.strikeLevel}: {selectedStrike.offense}</div>\n                  <div className=\"text-gray-600 mt-1\">{selectedStrike.evidence}</div>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={disputeDescription}\n                  onChange={(e) => setDisputeDescription(e.target.value)}\n                  placeholder=\"Explain why you believe this strike was issued in error...\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"evidence\">Supporting Evidence (Optional)</Label>\n                <Textarea\n                  id=\"evidence\"\n                  value={disputeEvidence}\n                  onChange={(e) => setDisputeEvidence(e.target.value)}\n                  placeholder=\"Provide any additional evidence or context...\"\n                />\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button \n              onClick={handleSubmitDispute}\n              disabled={submitDisputeMutation.isPending}\n            >\n              {submitDisputeMutation.isPending ? \"Submitting...\" : \"Submit Dispute\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15389},"client/src/hooks/use-auth.ts":{"content":"import { createContext, useContext, useState, useEffect, ReactNode, createElement } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\n\ninterface User {\n  id: number;\n  email: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  profile: any | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: any) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst TOKEN_KEY = 'findermeister_token';\n\nconst AuthService = {\n  getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n\n  setToken(token: string): void {\n    localStorage.setItem(TOKEN_KEY, token);\n  },\n\n  clearToken(): void {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  },\n\n  async register(data: any) {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Registration failed');\n    }\n    \n    const result = await response.json();\n    this.setToken(result.token);\n    return result;\n  },\n\n  async login(data: any) {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Login failed');\n    }\n    \n    const result = await response.json();\n    this.setToken(result.token);\n    return result;\n  },\n\n  async getCurrentUser() {\n    const response = await fetch('/api/auth/me', {\n      headers: this.getAuthHeaders(),\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to get current user');\n    }\n    \n    return response.json();\n  },\n\n  logout(): void {\n    this.clearToken();\n    // Force immediate redirect to prevent any flash of content\n    window.location.replace('/');\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n};\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<any>(null);\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: () => AuthService.getCurrentUser(),\n    enabled: AuthService.isAuthenticated(),\n    retry: false,\n  });\n\n  useEffect(() => {\n    console.log('Auth effect triggered:', { data, error, isLoading });\n    if (data) {\n      console.log('Setting user from auth data:', data.user);\n      setUser(data.user);\n      setProfile(data.profile);\n    } else if (error) {\n      console.error('Auth error, clearing token:', error);\n      AuthService.clearToken();\n      setUser(null);\n      setProfile(null);\n    }\n  }, [data, error]);\n\n  const login = async (email: string, password: string) => {\n    const response = await AuthService.login({ email, password });\n    setUser(response.user);\n    queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n  };\n\n  const register = async (data: any) => {\n    const response = await AuthService.register(data);\n    setUser(response.user);\n    queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n  };\n\n  const logout = () => {\n    // Clear state immediately\n    setUser(null);\n    setProfile(null);\n    queryClient.clear();\n    // Clear token and redirect\n    AuthService.logout();\n  };\n\n  const authValue = {\n    user,\n    profile,\n    isLoading: isLoading && AuthService.isAuthenticated(),\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n  };\n\n  return createElement(AuthContext.Provider, { value: authValue }, children);\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":4374},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'client' | 'finder' | 'admin';\n  isVerified: boolean;\n  isBanned: boolean;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: 'client' | 'finder';\n  phone?: string;\n}\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nexport class AuthService {\n  private static TOKEN_KEY = 'findermeister_token';\n\n  static getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  static setToken(token: string): void {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  static clearToken(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n  }\n\n  static getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n\n  static async register(data: RegisterData): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/register', data);\n    const result = await response.json();\n    \n    this.setToken(result.token);\n    return result;\n  }\n\n  static async login(data: LoginData): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/login', data);\n    const result = await response.json();\n    \n    this.setToken(result.token);\n    return result;\n  }\n\n  static async getCurrentUser(): Promise<{ user: User; profile?: any }> {\n    const response = await fetch('/api/auth/me', {\n      headers: this.getAuthHeaders(),\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to get current user');\n    }\n    \n    return response.json();\n  }\n\n  static logout(): void {\n    this.clearToken();\n    window.location.href = '/';\n  }\n\n  static isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n}\n","size_bytes":1996},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\n// Import translation resources\nimport en from '../locales/en.json';\nimport pidgin from '../locales/pidgin.json';\nimport yo from '../locales/yo.json';\nimport ha from '../locales/ha.json';\nimport ig from '../locales/ig.json';\nimport fr from '../locales/fr.json';\nimport de from '../locales/de.json';\nimport es from '../locales/es.json';\nimport pt from '../locales/pt.json';\nimport ar from '../locales/ar.json';\n\nconst resources = {\n  en: { translation: en },\n  pidgin: { translation: pidgin },\n  yo: { translation: yo },\n  ha: { translation: ha },\n  ig: { translation: ig },\n  fr: { translation: fr },\n  de: { translation: de },\n  es: { translation: es },\n  pt: { translation: pt },\n  ar: { translation: ar },\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'en',\n    debug: false,\n\n    interpolation: {\n      escapeValue: false,\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator', 'htmlTag'],\n      caches: ['localStorage'],\n    },\n  });\n\nexport default i18n;","size_bytes":1172},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    try {\n      const responseText = await res.text();\n      if (responseText) {\n        try {\n          const errorData = JSON.parse(responseText);\n          errorMessage = errorData.message || responseText;\n        } catch {\n          errorMessage = responseText;\n        }\n      }\n    } catch (e) {\n      // Use statusText if we can't read the response\n    }\n    throw new Error(`${res.status}: ${errorMessage}`);\n  }\n}\n\nfunction getAuthToken() {\n  return localStorage.getItem('findermeister_token') || localStorage.getItem('token');\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = getAuthToken();\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: {\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      },\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\nexport const apiRequest = async (url: string, options: RequestInit = {}): Promise<any> => {\n  const token = getAuthToken();\n\n  const defaultHeaders: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n\n  if (token) {\n    defaultHeaders.Authorization = `Bearer ${token}`;\n  }\n\n  const config: RequestInit = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers,\n    },\n  };\n\n  const response = await fetch(url, config);\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('findermeister_token');\n      window.location.href = '/login';\n      throw new Error('Unauthorized');\n    }\n\n    // Try to parse error response as JSON, fallback to status text\n    let errorMessage = `Request failed: ${response.status}`;\n    try {\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorMessage;\n      } else {\n        // For non-JSON responses (like multipart errors), use status text\n        errorMessage = response.statusText || errorMessage;\n      }\n    } catch (parseError) {\n      // If we can't parse the response, use the default message\n      console.warn('Failed to parse error response:', parseError);\n    }\n    \n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n};","size_bytes":3066},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/BrowseRequests.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AuthHeader } from \"@/components/AuthHeader\";\nimport { Search, MapPin, Clock, DollarSign } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Request {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  budget: number;\n  location?: string;\n  createdAt: string;\n  client: {\n    firstName: string;\n    lastName: string;\n  };\n  proposalCount: number;\n  status: string;\n}\n\nexport default function BrowseRequests() {\n  const [requests, setRequests] = useState<Request[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    fetchRequests();\n  }, []);\n\n  const fetchRequests = async () => {\n    try {\n      const response = await fetch('/api/requests');\n      if (response.ok) {\n        const data = await response.json();\n        setRequests(data.filter((req: Request) => req.status === 'open'));\n      }\n    } catch (error) {\n      console.error('Failed to fetch requests:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredRequests = requests.filter(request =>\n    request.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    request.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    request.category.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AuthHeader currentPage=\"browse\" />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-gray-500\">Loading requests...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AuthHeader currentPage=\"browse\" />\n      \n      {/* Hero Section */}\n      <section className=\"bg-white border-b\">\n        <div className=\"container mx-auto px-4 py-8 sm:py-12\">\n          <div className=\"text-center max-w-3xl mx-auto\">\n            <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-4\">\n              Browse Open Requests\n            </h1>\n            <p className=\"text-lg text-gray-600 mb-8\">\n              Discover opportunities to help clients find what they need. Join as a finder to start earning.\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"relative max-w-md mx-auto\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search requests...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Requests Grid */}\n      <section className=\"container mx-auto px-4 py-8\">\n        {filteredRequests.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-500 mb-4\">\n              {searchTerm ? 'No requests match your search.' : 'No open requests available.'}\n            </div>\n            <Link href=\"/register?type=client\">\n              <Button className=\"bg-finder-red hover:bg-finder-red-dark\">\n                Post a Request\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredRequests.map((request) => (\n              <Card key={request.id} className=\"hover:shadow-lg transition-shadow duration-200\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <Badge variant=\"secondary\" className=\"bg-finder-red/20 text-finder-red-dark\">\n                      {request.category}\n                    </Badge>\n                    <div className=\"text-sm text-gray-500 flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      {formatDistanceToNow(new Date(request.createdAt), { addSuffix: true })}\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-lg font-semibold line-clamp-2\">\n                    {request.title}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                    {request.description}\n                  </p>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <DollarSign className=\"w-4 h-4 mr-2 text-green-600\" />\n                      Budget: ‚Ç¶{request.budget.toLocaleString()}\n                    </div>\n                    \n                    {request.location && (\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <MapPin className=\"w-4 h-4 mr-2 text-blue-600\" />\n                        {request.location}\n                      </div>\n                    )}\n                    \n                    <div className=\"text-sm text-gray-600\">\n                      Posted by: {request.client.firstName} {request.client.lastName}\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600\">\n                      {request.proposalCount} proposal{request.proposalCount !== 1 ? 's' : ''} received\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Link href=\"/register?type=finder\" className=\"flex-1\">\n                      <Button className=\"w-full bg-finder-red hover:bg-finder-red-dark\">\n                        Sign Up to Bid\n                      </Button>\n                    </Link>\n                    <Link href=\"/login\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Login\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"bg-finder-red text-white py-12 mt-12\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold mb-4\">\n            Ready to Start Finding?\n          </h2>\n          <p className=\"text-lg mb-8 opacity-90\">\n            Join our community of skilled finders and start earning today.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/register?type=finder\">\n              <Button size=\"lg\" className=\"bg-white text-finder-red hover:bg-gray-100\">\n                Sign Up as Finder\n              </Button>\n            </Link>\n            <Link href=\"/register?type=client\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-finder-red\">\n                Post a Request\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":7609},"client/src/pages/ConversationDetail.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Send, \n  User, \n  Paperclip, \n  Download, \n  FileIcon,\n  MessageCircle,\n  CheckCircle2,\n  Loader2,\n  ExternalLink,\n  Bell,\n  Reply\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTranslation } from \"react-i18next\";\nimport { LanguageSwitcher } from \"@/components/LanguageSwitcher\";\nimport ClientHeader from \"@/components/client-header\";\nimport { FinderHeader } from \"@/components/finder-header\";\n\ntype Message = {\n  id: string;\n  conversationId: string;\n  senderId: string;\n  content: string;\n  attachmentPaths?: string[];\n  attachmentNames?: string[];\n  isRead: boolean;\n  createdAt: Date;\n  sender: { \n    firstName: string; \n    lastName: string; \n  };\n  quotedMessageId?: string;\n  quotedMessage?: {\n    sender: {\n      firstName: string;\n      lastName: string;\n    };\n    content: string;\n  };\n};\n\ntype ConversationDetail = {\n  id: string;\n  clientId: string;\n  finderId: string;\n  proposalId: string;\n  proposal: { \n    request: { \n      title: string; \n    }; \n  };\n  finder?: { \n    user: { \n      firstName: string; \n      lastName: string; \n    }; \n  };\n  client?: { \n    firstName: string; \n    lastName: string; \n  };\n};\n\nexport default function ConversationDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { t } = useTranslation();\n  const queryClient = useQueryClient();\n  const conversationId = params.conversationId as string;\n  const { toast } = useToast();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [quotedMessage, setQuotedMessage] = useState<Message | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: conversation } = useQuery<ConversationDetail>({\n    queryKey: ['/api/messages/conversations', conversationId],\n    enabled: !!conversationId && !!user,\n  });\n\n  const { data: messages = [], isLoading } = useQuery<Message[]>({\n    queryKey: ['/api/messages/conversations', conversationId, 'messages'],\n    enabled: !!conversationId && !!user,\n    refetchInterval: 3000,\n    staleTime: 1000,\n    refetchOnWindowFocus: true\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, quotedMessageId }: { content: string, quotedMessageId?: string }) => {\n      const response = await apiRequest(`/api/messages/conversations/${conversationId}/messages`, {\n        method: 'POST',\n        body: JSON.stringify({ content: content.trim(), quotedMessageId }),\n      });\n      return response;\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      setQuotedMessage(null); // Clear quoted message after sending\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/messages/conversations', conversationId, 'messages'] \n      });\n      toast({\n        title: \"Message sent!\",\n        description: \"Your message has been delivered successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to send message\",\n        description: \"Please try again later.\",\n      });\n    }\n  });\n\n  const handleSend = () => {\n    const content = newMessage.trim();\n    if (!content) return;\n    sendMessageMutation.mutate({ content, quotedMessageId: quotedMessage?.id });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Function to handle quoting a message\n  const handleQuoteMessage = (messageToQuote: Message) => {\n    setQuotedMessage(messageToQuote);\n  };\n\n  // Function to cancel quoting\n  const cancelQuote = () => {\n    setQuotedMessage(null);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-96 p-8 text-center\">\n          <User className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Sign in Required</h3>\n          <p className=\"text-gray-600\">Please log in to view messages.</p>\n        </Card>\n      </div>\n    );\n  }\n\n  const otherParticipant = user?.role === 'client' \n    ? conversation?.finder?.user \n    : conversation?.client;\n\n  const participantName = otherParticipant \n    ? `${otherParticipant.firstName} ${otherParticipant.lastName}`\n    : 'Client A';\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {user?.role === 'client' ? (\n        <ClientHeader currentPage=\"messages\" />\n      ) : (\n        <FinderHeader currentPage=\"messages\" />\n      )}\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Back button for mobile - hidden on desktop */}\n        <div className=\"md:hidden w-full\">\n          <div className=\"bg-white border-b border-gray-200 p-4\">\n            <button \n              onClick={() => navigate(\"/messages\")} \n              className=\"flex items-center text-gray-600 hover:text-gray-900\"\n            >\n              <ArrowLeft className=\"w-5 h-5 mr-2\" />\n              Back to Messages\n            </button>\n          </div>\n        </div>\n\n        {/* Full width chat on mobile, right panel on desktop */}\n        <div className=\"flex-1 bg-white flex flex-col\">\n          {/* Chat Header */}\n          <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarFallback className=\"bg-gray-500 text-white font-semibold\">\n                    {otherParticipant ? `${otherParticipant.firstName.charAt(0)}${otherParticipant.lastName.charAt(0)}` : 'CA'}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-lg font-semibold text-gray-900\">{participantName}</h2>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button size=\"sm\" variant=\"ghost\" className=\"p-2\">\n                  <ExternalLink className=\"w-4 h-4 text-gray-500\" />\n                </Button>\n                <div className=\"relative\">\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2\">\n                    <Bell className=\"w-4 h-4 text-gray-500\" />\n                  </Button>\n                  <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs text-white font-medium\">3</span>\n                  </div>\n                </div>\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback className=\"bg-orange-500 text-white text-sm font-semibold\">\n                    {user.firstName?.charAt(0)}{user.lastName?.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n            </div>\n          </div>\n\n          {/* Messages Area */}\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-4 bg-gray-50\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-gray-400\" />\n              </div>\n            ) : messages.length === 0 ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center\">\n                  <MessageCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No messages yet. Start the conversation!</p>\n                </div>\n              </div>\n            ) : (\n              messages.map((message: any, index: number) => {\n                const isOwnMessage = message.senderId === user.id;\n                const messageTime = format(new Date(message.createdAt), 'HH:mm');\n\n                return (\n                  <div key={message.id} className=\"flex items-start space-x-3\">\n                    {!isOwnMessage && (\n                      <Avatar className=\"w-10 h-10 flex-shrink-0\">\n                        <AvatarFallback className=\"bg-gray-500 text-white font-semibold\">\n                          {otherParticipant ? `${otherParticipant.firstName.charAt(0)}${otherParticipant.lastName.charAt(0)}` : 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n\n                    <div className={`flex-1 ${isOwnMessage ? 'flex justify-end' : ''}`}>\n                      <div \n                        className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl cursor-pointer group relative ${\n                          isOwnMessage \n                            ? 'bg-blue-500 text-white rounded-br-md' \n                            : 'bg-white border border-gray-200 rounded-bl-md'\n                        }`}\n                        onClick={() => handleQuoteMessage(message)}\n                      >\n                        {/* Quote indicator */}\n                        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <Reply className=\"w-4 h-4 text-gray-400\" />\n                        </div>\n\n                        {/* Quoted message display */}\n                        {message.quotedMessageId && (\n                          <div className={`mb-2 p-2 rounded-lg border-l-4 ${\n                            isOwnMessage \n                              ? 'bg-blue-600 border-blue-300' \n                              : 'bg-gray-50 border-gray-300'\n                          }`}>\n                            <p className={`text-xs ${isOwnMessage ? 'text-blue-100' : 'text-gray-600'}`}>\n                              {message.quotedMessage?.sender?.firstName} {message.quotedMessage?.sender?.lastName}\n                            </p>\n                            <p className={`text-sm truncate ${isOwnMessage ? 'text-blue-50' : 'text-gray-700'}`}>\n                              {message.quotedMessage?.content || 'Message not found'}\n                            </p>\n                          </div>\n                        )}\n\n                        <p className=\"text-sm leading-relaxed\">{message.content}</p>\n\n                        {/* Sample emoji reactions for the last message */}\n                        {index === messages.length - 1 && !isOwnMessage && (\n                          <div className=\"flex items-center space-x-1 mt-2\">\n                            <span className=\"text-lg\">üòä</span>\n                            <span className=\"text-lg\">üòä</span>\n                            <span className=\"text-lg\">üôå</span>\n                            <span className=\"text-lg\">üôè</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"text-xs text-gray-500 mt-1 px-1\">\n                        {messageTime}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Message Input */}\n          <div className=\"bg-white border-t border-gray-200 p-4\">\n            {quotedMessage && (\n              <div className=\"flex items-center justify-between p-2 mb-2 border rounded-lg bg-gray-100\">\n                <div>\n                  <p className=\"text-xs text-gray-600\">Replying to {quotedMessage.sender?.firstName} {quotedMessage.sender?.lastName}</p>\n                  <p className=\"text-sm text-gray-800 truncate max-w-md\">{quotedMessage.content}</p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={cancelQuote}>\n                  <X className=\"w-4 h-4 text-gray-500\" />\n                </Button>\n              </div>\n            )}\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"w-10 h-10\">\n                <AvatarFallback className=\"bg-gray-400 text-white\">\n                  <User className=\"w-5 h-5\" />\n                </AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex-1 flex items-center space-x-2\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type a message...\"\n                  className=\"flex-1 border-gray-200 rounded-full px-4 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n                  disabled={sendMessageMutation.isPending}\n                />\n\n                <div className=\"flex items-center space-x-1\">\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2 rounded-full\">\n                    <span className=\"text-lg\">üòä</span>\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2 rounded-full\">\n                    <span className=\"text-lg\">üòä</span>\n                  </Button>\n                </div>\n\n                <Button \n                  onClick={handleSend}\n                  disabled={sendMessageMutation.isPending || (!newMessage.trim() && !quotedMessage)}\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 rounded-full\"\n                >\n                  {sendMessageMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    \"Send\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14190},"client/src/pages/Messages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageCircle, Clock, User, Search, Filter, MoreVertical, CheckCircle2, Circle, Star, ExternalLink, Bell, Reply, X, Loader2 } from \"lucide-react\";\nimport { format, formatDistanceToNow } from \"date-fns\";\nimport ClientHeader from \"@/components/client-header\";\nimport { AuthService } from \"@/lib/auth\";\n\ntype ConversationListItem = {\n  id: string;\n  clientId: string;\n  finderId: string;\n  proposalId: string;\n  lastMessageAt: Date;\n  createdAt: Date;\n  proposal: { request: { title: string; }; };\n  finder?: { user: { firstName: string; lastName: string; }; };\n  client?: { firstName: string; lastName: string; };\n  lastMessage?: { content: string; createdAt: Date; senderId: string; };\n  unreadCount: number;\n};\n\ntype Message = {\n  id: string;\n  conversationId: string;\n  senderId: string;\n  content: string;\n  createdAt: Date;\n  sender?: { firstName: string; lastName: string; };\n};\n\nexport default function Messages() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n\n  const { data: conversations = [], isLoading } = useQuery<ConversationListItem[]>({\n    queryKey: ['/api/messages/conversations'],\n    enabled: !!user\n  });\n\n  // Filter conversations based on search\n  const filteredConversations = conversations.filter(conversation => {\n    if (!searchTerm.trim()) return true;\n\n    const otherUser = user?.role === 'client'\n      ? conversation.finder?.user\n      : conversation.client;\n    const userName = otherUser ? `${otherUser.firstName} ${otherUser.lastName}` : '';\n    const projectTitle = conversation.proposal?.request?.title || '';\n    const lastMessageContent = conversation.lastMessage?.content || '';\n\n    const searchLower = searchTerm.toLowerCase().trim();\n\n    return userName.toLowerCase().includes(searchLower) ||\n           projectTitle.toLowerCase().includes(searchLower) ||\n           lastMessageContent.toLowerCase().includes(searchLower);\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-96 p-8 text-center\">\n          <MessageCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Sign in Required</h3>\n          <p className=\"text-gray-600\">Please log in to view your messages.</p>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader currentPage=\"messages\" />\n        <div className=\"flex h-[calc(100vh-80px)]\">\n          {/* Left Panel Skeleton */}\n          <div className=\"w-1/3 bg-white border-r border-gray-200\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"h-8 bg-gray-200 rounded-lg w-48 animate-pulse mb-4\"></div>\n              <div className=\"h-10 bg-gray-200 rounded-lg w-full animate-pulse\"></div>\n            </div>\n            <div className=\"divide-y divide-gray-100\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"p-4 flex items-center space-x-3 animate-pulse\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* Right Panel Skeleton */}\n          <div className=\"flex-1 bg-gray-50 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gray-200 rounded-full mx-auto mb-4 animate-pulse\"></div>\n              <div className=\"h-6 bg-gray-200 rounded w-48 mx-auto animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader currentPage=\"messages\" />\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Left Panel - Conversation List */}\n        <div className=\"w-1/3 bg-white border-r border-gray-200 flex flex-col\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">Message & System</h1>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"relative\">\n                  <Button size=\"sm\" variant=\"ghost\" className=\"p-2\">\n                    <Bell className=\"w-4 h-4 text-gray-500\" />\n                  </Button>\n                  {conversations.filter(c => c.unreadCount > 0).length > 0 && (\n                    <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-medium\">\n                        {conversations.filter(c => c.unreadCount > 0).length}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback className=\"bg-orange-500 text-white text-sm font-semibold\">\n                    {user.firstName?.charAt(0)}{user.lastName?.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search Conversations\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2.5 w-full border-gray-200 rounded-lg focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n\n          {/* Conversations List */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {filteredConversations.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <MessageCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No conversations</h3>\n                <p className=\"text-gray-600\">Start a conversation to see it here.</p>\n              </div>\n            ) : (\n              <div>\n                {filteredConversations.map((conversation) => {\n                  const otherUser = user?.role === 'client'\n                    ? conversation.finder?.user\n                    : conversation.client;\n                  const displayName = otherUser\n                    ? `${otherUser.firstName} ${otherUser.lastName}`\n                    : 'Unknown User';\n                  const initials = otherUser\n                    ? `${otherUser.firstName.charAt(0)}${otherUser.lastName.charAt(0)}`.toUpperCase()\n                    : 'U';\n                  const lastMessageTime = conversation.lastMessage?.createdAt\n                    ? format(new Date(conversation.lastMessage.createdAt), 'HH:mm')\n                    : format(new Date(conversation.lastMessageAt), 'HH:mm');\n                  const isUnread = conversation.unreadCount > 0;\n                  const isSelected = selectedConversation === conversation.id;\n\n                  return (\n                    <div\n                      key={conversation.id}\n                      onClick={() => setSelectedConversation(conversation.id)}\n                      className={`\n                        p-4 cursor-pointer border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150\n                        ${isSelected ? 'bg-blue-50 border-r-4 border-r-blue-500' : ''}\n                      `}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        {/* Avatar with online indicator */}\n                        <div className=\"relative\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarFallback className=\"bg-gray-500 text-white font-semibold\">\n                              {initials}\n                            </AvatarFallback>\n                          </Avatar>\n                          {/* Dynamic online indicator */}\n                          <div className={`absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-white ${\n                            Math.random() > 0.5 ? 'bg-green-500' : 'bg-gray-400'\n                          }`}></div>\n                        </div>\n\n                        {/* Content */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <h3 className={`font-medium text-sm truncate ${\n                              isUnread ? 'text-gray-900' : 'text-gray-800'\n                            }`}>\n                              {displayName}\n                            </h3>\n                            <span className=\"text-xs text-gray-500 flex-shrink-0 ml-2\">\n                              {lastMessageTime}\n                            </span>\n                          </div>\n\n                          <p className={`text-sm truncate ${\n                            isUnread ? 'font-medium text-gray-900' : 'text-gray-600'\n                          }`}>\n                            {conversation.lastMessage?.content || 'No messages yet'}\n                          </p>\n                        </div>\n\n                        {isUnread && (\n                          <div className=\"w-2 h-2 bg-red-500 rounded-full flex-shrink-0\"></div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Right Panel - Chat Interface */}\n        <div className=\"flex-1 bg-gray-50 flex flex-col\">\n          {selectedConversation ? (\n            <ConversationView conversationId={selectedConversation} />\n          ) : (\n            /* Empty State */\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <MessageCircle className=\"w-10 h-10 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Select a conversation</h3>\n                <p className=\"text-gray-600\">Choose a conversation from the left to start messaging.</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Conversation View Component\nfunction ConversationView({ conversationId }: { conversationId: string }) {\n  const { user } = useAuth();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [quotedMessage, setQuotedMessage] = useState<Message | null>(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Popular emojis for quick access\n  const popularEmojis = [\"üòä\", \"üëç\", \"‚ù§Ô∏è\", \"üòÇ\", \"üò¢\", \"üòÆ\", \"üò°\", \"üôè\", \"üëè\", \"üî•\", \"üíØ\", \"‚úÖ\", \"‚ùå\", \"‚≠ê\", \"üéâ\", \"üí™\"];\n\n  // Extended emoji collection\n  const emojiCategories = {\n    \"Faces\": [\"üòä\", \"üòÇ\", \"ü•∞\", \"üòç\", \"ü§ó\", \"ü§î\", \"üòé\", \"üò¥\", \"ü§Ø\", \"üòá\", \"ü•∫\", \"üò≠\", \"üò§\", \"üôÑ\", \"üò¨\", \"ü§ê\"],\n    \"Gestures\": [\"üëç\", \"üëé\", \"üëè\", \"üôå\", \"üëå\", \"‚úåÔ∏è\", \"ü§û\", \"ü§ü\", \"ü§ò\", \"üëä\", \"‚úä\", \"üôè\", \"üëê\", \"ü§≤\", \"üí™\", \"ü¶æ\"],\n    \"Hearts\": [\"‚ù§Ô∏è\", \"üß°\", \"üíõ\", \"üíö\", \"üíô\", \"üíú\", \"üñ§\", \"ü§ç\", \"ü§é\", \"üíî\", \"‚ù£Ô∏è\", \"üíï\", \"üíû\", \"üíì\", \"üíó\", \"üíñ\"],\n    \"Objects\": [\"üî•\", \"üíØ\", \"‚≠ê\", \"‚ú®\", \"üéâ\", \"üéä\", \"üí•\", \"üí´\", \"‚ö°\", \"üí¶\", \"‚òÄÔ∏è\", \"üåô\", \"‚≠ê\", \"üåü\", \"‚úÖ\", \"‚ùå\"]\n  };\n\n  const { data: conversation } = useQuery({\n    queryKey: ['/api/messages/conversations', conversationId],\n    enabled: !!conversationId && !!user,\n  });\n\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: ['/api/messages/conversations', conversationId, 'messages'],\n    enabled: !!conversationId && !!user,\n    refetchInterval: 3000,\n  });\n\n  const otherUser = user?.role === 'client'\n    ? conversation?.finder?.user\n    : conversation?.client;\n  const participantName = otherUser\n    ? `${otherUser.firstName} ${otherUser.lastName}`\n    : 'Client A';\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, quotedMessageId }: { content: string, quotedMessageId?: string }) => {\n      const token = localStorage.getItem('findermeister_token');\n      const response = await fetch(`/api/messages/conversations/${conversationId}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? { Authorization: `Bearer ${token}` } : {}),\n        },\n        body: JSON.stringify({ content: content.trim(), quotedMessageId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send message: ${response.statusText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      setQuotedMessage(null);\n      queryClient.invalidateQueries({\n        queryKey: ['/api/messages/conversations', conversationId, 'messages']\n      });\n    },\n    onError: (error) => {\n      console.error('Error sending message:', error);\n    }\n  });\n\n  const handleSendMessage = () => {\n    const content = newMessage.trim();\n    if (!content) return;\n    sendMessageMutation.mutate({ content, quotedMessageId: quotedMessage?.id });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleQuoteMessage = (message: Message) => {\n    setQuotedMessage(message);\n  };\n\n  // Close emoji picker when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element;\n      if (showEmojiPicker && !target.closest('.emoji-picker-container')) {\n        setShowEmojiPicker(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showEmojiPicker]);\n\n\n  return (\n    <>\n      {/* Chat Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Avatar className=\"w-10 h-10\">\n                <AvatarFallback className=\"bg-gray-500 text-white font-semibold\">\n                  {otherUser ? `${otherUser.firstName.charAt(0)}${otherUser.lastName.charAt(0)}` : 'CA'}\n                </AvatarFallback>\n              </Avatar>\n              {/* Online indicator */}\n              <div className={`absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-white ${\n                Math.random() > 0.5 ? 'bg-green-500' : 'bg-gray-400'\n              }`}></div>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">{participantName}</h2>\n              <p className={`text-xs ${Math.random() > 0.5 ? 'text-green-600' : 'text-gray-500'}`}>\n                {Math.random() > 0.5 ? 'Online' : 'Last seen recently'}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarFallback className=\"bg-orange-500 text-white text-sm font-semibold\">\n                {user.firstName?.charAt(0)}{user.lastName?.charAt(0)}\n              </AvatarFallback>\n            </Avatar>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center\">\n              <MessageCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">Start the conversation...</p>\n            </div>\n          </div>\n        ) : (\n          messages.map((message: Message, index: number) => {\n            const isOwnMessage = message.senderId === user.id;\n            const messageTime = format(new Date(message.createdAt), 'HH:mm');\n\n            return (\n              <div key={message.id} className=\"flex items-start space-x-3\">\n                {!isOwnMessage && (\n                  <Avatar className=\"w-10 h-10 flex-shrink-0\">\n                    <AvatarFallback className=\"bg-gray-500 text-white font-semibold\">\n                      {otherUser ? `${otherUser.firstName.charAt(0)}${otherUser.lastName.charAt(0)}` : 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n\n                <div className={`flex-1 ${isOwnMessage ? 'flex justify-end' : ''}`}>\n                  <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${\n                    isOwnMessage\n                      ? 'bg-blue-500 text-white rounded-br-md'\n                      : 'bg-white border border-gray-200 rounded-bl-md'\n                  }`}\n                    onDoubleClick={() => handleQuoteMessage(message)} // Quote on double click\n                  >\n                    <p className=\"text-sm leading-relaxed\">{message.content}</p>\n\n                    {/* Emoji reactions */}\n                    {index === messages.length - 1 && !isOwnMessage && (\n                      <div className=\"flex items-center space-x-1 mt-2\">\n                        <span className=\"text-lg\">üòä</span>\n                        <span className=\"text-lg\">üòä</span>\n                        <span className=\"text-lg\">üôå</span>\n                        <span className=\"text-lg\">üôè</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"text-xs text-gray-500 mt-1 px-1\">\n                    {messageTime}\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      {/* Message Input */}\n      <div className=\"bg-white border-t border-gray-200\">\n        {/* Quoted Message Preview */}\n        {quotedMessage && (\n          <div className=\"p-4 bg-gray-50 border-b border-gray-200\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Reply className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    Replying to {quotedMessage.sender?.firstName} {quotedMessage.sender?.lastName}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 bg-white p-2 rounded border-l-4 border-blue-500\">\n                  {quotedMessage.content}\n                </p>\n              </div>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setQuotedMessage(null)}\n                className=\"ml-2\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarFallback className=\"bg-gray-400 text-white\">\n                <User className=\"w-5 h-5\" />\n              </AvatarFallback>\n            </Avatar>\n\n            <div className=\"flex-1 flex items-center space-x-2\">\n              <Input\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={quotedMessage ? \"Type a reply...\" : \"Type a message...\"}\n                className=\"flex-1 border-gray-200 rounded-full px-4 py-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n              />\n\n              <div className=\"relative flex items-center space-x-1 emoji-picker-container\">\n                {/* Quick emoji buttons */}\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"p-2 rounded-full hover:bg-gray-100\"\n                  onClick={() => setNewMessage(prev => prev + \"üòä\")}\n                >\n                  <span className=\"text-lg\">üòä</span>\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"p-2 rounded-full hover:bg-gray-100\"\n                  onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                >\n                  <span className=\"text-lg\">üòÄ</span>\n                </Button>\n\n                {/* Emoji Picker Modal */}\n                {showEmojiPicker && (\n                  <div className=\"absolute bottom-12 right-0 w-80 bg-white rounded-lg shadow-lg border border-gray-200 p-4 z-50\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"text-sm font-medium text-gray-700\">Emojis</h3>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => setShowEmojiPicker(false)}\n                        className=\"p-1 h-6 w-6\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n\n                    {/* Popular/Recent Emojis */}\n                    <div className=\"mb-4\">\n                      <h4 className=\"text-xs font-medium text-gray-500 mb-2\">Popular</h4>\n                      <div className=\"grid grid-cols-8 gap-1\">\n                        {popularEmojis.map((emoji, index) => (\n                          <button\n                            key={index}\n                            onClick={() => {\n                              setNewMessage(prev => prev + emoji);\n                              setShowEmojiPicker(false);\n                            }}\n                            className=\"p-2 hover:bg-gray-100 rounded text-lg flex items-center justify-center\"\n                          >\n                            {emoji}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Emoji Categories */}\n                    <div className=\"max-h-48 overflow-y-auto\">\n                      {Object.entries(emojiCategories).map(([category, emojis]) => (\n                        <div key={category} className=\"mb-3\">\n                          <h4 className=\"text-xs font-medium text-gray-500 mb-2\">{category}</h4>\n                          <div className=\"grid grid-cols-8 gap-1\">\n                            {emojis.map((emoji, index) => (\n                              <button\n                                key={index}\n                                onClick={() => {\n                                  setNewMessage(prev => prev + emoji);\n                                  setShowEmojiPicker(false);\n                                }}\n                                className=\"p-2 hover:bg-gray-100 rounded text-lg flex items-center justify-center\"\n                              >\n                                {emoji}\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <Button\n                onClick={handleSendMessage}\n                disabled={sendMessageMutation.isPending || !newMessage.trim()}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 rounded-full\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                ) : (\n                  \"Send\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":25130},"client/src/pages/about-us.tsx":{"content":"\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Users, Target, Eye, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function AboutUs() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b\">\n        <div className=\"max-w-6xl mx-auto px-6 py-4\">\n          <Link href=\"/\" className=\"inline-flex items-center text-finder-red hover:underline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-finder-red to-red-600 text-white\">\n        <div className=\"max-w-6xl mx-auto px-6 py-16 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">About FinderMeister</h1>\n          <p className=\"text-xl md:text-2xl font-light max-w-4xl mx-auto leading-relaxed\">\n            At FinderMeister, we believe that every find request matters and every solution begins with a successful find.\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-6 py-12\">\n        {/* Introduction */}\n        <div className=\"mb-16\">\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardContent className=\"p-8 md:p-12\">\n              <p className=\"text-lg text-gray-700 leading-relaxed mb-6\">\n                We are building the world's first human-powered search platform, designed to connect people who are looking for a product or service with finders ‚Äî a trusted network of individuals ready to source what's needed.\n              </p>\n              <p className=\"text-lg text-gray-700 leading-relaxed\">\n                FinderMeister isn't just about locating what's missing ‚Äî it's about creating trust, building connections, and empowering communities to help one another.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Motto, Mission & Vision */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {/* Motto */}\n          <Card className=\"bg-white shadow-lg border-0 hover:shadow-xl transition-shadow duration-300\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-finder-red/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Heart className=\"w-8 h-8 text-finder-red\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Our Motto</h3>\n              <p className=\"text-lg text-finder-red font-semibold italic\">\n                \"One successful find at a time.\"\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Mission */}\n          <Card className=\"bg-white shadow-lg border-0 hover:shadow-xl transition-shadow duration-300\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Target className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Mission Statement</h3>\n              <p className=\"text-gray-700 leading-relaxed\">\n                Our mission is to empower people to find what they need through a trusted network of human searchers ‚Äî delivering solutions, one successful find at a time.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Vision */}\n          <Card className=\"bg-white shadow-lg border-0 hover:shadow-xl transition-shadow duration-300\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Eye className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Vision Statement</h3>\n              <p className=\"text-gray-700 leading-relaxed\">\n                We aim to become the world's most reliable human-powered search platform ‚Äî where every find request matters, and every solution begins with one successful find.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Our Values */}\n        <Card className=\"bg-gradient-to-r from-gray-50 to-white shadow-lg border-0 mb-16\">\n          <CardContent className=\"p-8 md:p-12\">\n            <div className=\"text-center mb-8\">\n              <Users className=\"w-12 h-12 text-finder-red mx-auto mb-4\" />\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">What We Stand For</h2>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Creating Trust</h4>\n                <p className=\"text-gray-600\">Building reliable connections between people who need something and those who can find it.</p>\n              </div>\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Building Connections</h4>\n                <p className=\"text-gray-600\">Fostering meaningful relationships within our community of finders and seekers.</p>\n              </div>\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold text-gray-900 mb-3\">Empowering Communities</h4>\n                <p className=\"text-gray-600\">Enabling people to help one another and create value through collaborative searching.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <Card className=\"bg-finder-red text-white shadow-lg border-0\">\n            <CardContent className=\"p-8 md:p-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Ready to Start Finding?</h2>\n              <p className=\"text-xl mb-8 opacity-90\">\n                Join our community of finders and clients today\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"/auth/register\">\n                  <Button size=\"lg\" className=\"bg-white text-finder-red hover:bg-gray-100 font-semibold px-8\">\n                    Become a Client\n                  </Button>\n                </Link>\n                <Link href=\"/auth/register-finder\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-finder-red font-semibold px-8\">\n                    Become a Finder\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6924},"client/src/pages/blog-post.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function BlogPost() {\n  const params = useParams();\n  const slug = params?.slug;\n\n  const { data: post, isLoading, error } = useQuery<BlogPost>({\n    queryKey: [`/api/blog/${slug}`],\n    enabled: !!slug,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded mb-8\"></div>\n            <div className=\"space-y-4\">\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Post Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The blog post you're looking for doesn't exist or has been removed.</p>\n            <Link href=\"/\">\n              <Button variant=\"outline\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Go Back Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" className=\"mb-6\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"overflow-hidden\">\n          <CardContent className=\"p-4 sm:p-6 lg:p-8\">\n            <div className=\"mb-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center gap-3 mb-4\">\n                <Badge variant=\"default\" className=\"bg-finder-red w-fit\">\n                  Blog Post\n                </Badge>\n                {post.publishedAt && (\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    <span className=\"hidden sm:inline\">\n                      {new Date(post.publishedAt).toLocaleDateString('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}\n                    </span>\n                    <span className=\"sm:hidden\">\n                      {new Date(post.publishedAt).toLocaleDateString('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                      })}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-4 leading-tight\">\n                {post.title}\n              </h1>\n              \n              {post.excerpt && (\n                <p className=\"text-lg sm:text-xl text-gray-600 leading-relaxed mb-6\">\n                  {post.excerpt}\n                </p>\n              )}\n            </div>\n\n            <div className=\"prose prose-sm sm:prose-lg max-w-none\">\n              <div \n                className=\"text-gray-800 leading-relaxed break-words\"\n                dangerouslySetInnerHTML={{ __html: post.content }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-8 text-center\">\n          <Link href=\"/\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4466},"client/src/pages/finder-profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FinderLevelBadge } from \"@/components/finder-level-badge\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { ArrowLeft, User, Star, Award, Clock, DollarSign, CheckCircle, XCircle } from \"lucide-react\";\nimport type { Finder } from \"@shared/schema\";\n\nexport default function FinderProfileView() {\n  const [match, params] = useRoute(\"/finder-profile/:userId\");\n  const userId = params?.userId;\n\n  // Always use the direct ID endpoint for simplicity\n  const apiEndpoint = `/api/admin/finder-profile/${userId}`;\n\n  const { data: finderData, isLoading, error } = useQuery<any>({\n    queryKey: [apiEndpoint],\n    enabled: !!userId\n  });\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!finderData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Finder not found</p>\n          <Link href=\"/admin/users\">\n            <Button className=\"mt-4\">Back to Users</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const fullName = `${finderData.user?.firstName || 'Unknown'} ${finderData.user?.lastName || 'User'}`.trim();\n\n  // Get star rating display\n  const getStarRating = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star \n        key={i} \n        className={`w-6 h-6 ${i < rating ? 'text-finder-red fill-current' : 'text-gray-300'}`} \n      />\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"users\" />\n\n      <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6\">\n        {/* Beautiful Profile Card - Like the Design */}\n        <div className=\"max-w-md mx-auto mb-8\">\n          <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden\">\n            {/* Red Header */}\n            <div className=\"bg-finder-red px-8 py-6 text-center\">\n              <h1 className=\"text-white text-2xl font-bold\">FinderMeister</h1>\n            </div>\n            \n            {/* Profile Content */}\n            <div className=\"px-8 py-8 text-center bg-white\">\n              {/* Profile Picture Placeholder */}\n              <div className=\"relative inline-block mb-6\">\n                <div className=\"w-32 h-32 bg-gray-200 rounded-full flex items-center justify-center\">\n                  <User className=\"w-16 h-16 text-gray-400\" />\n                </div>\n                {/* Level Badge */}\n                <div className=\"absolute -bottom-2 -right-2\">\n                  <FinderLevelBadge \n                    completedJobs={finderData.jobsCompleted || 0} \n                    className=\"text-sm px-3 py-1\"\n                  />\n                </div>\n              </div>\n              \n              {/* Name */}\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">{fullName}</h2>\n              \n              {/* Stars */}\n              <div className=\"flex justify-center mb-4\">\n                {getStarRating(Math.round(parseFloat(finderData.averageRating || \"5.0\")))}\n              </div>\n              \n              {/* Completed Jobs */}\n              <p className=\"text-lg text-gray-600 mb-4 font-medium\">\n                {finderData.jobsCompleted || 0} Completed Finds\n              </p>\n              \n              {/* Testimonials/Bio */}\n              <div className=\"space-y-2 mb-8\">\n                {finderData.bio && (\n                  <p className=\"text-gray-700 italic\">\"{finderData.bio}\"</p>\n                )}\n                {!finderData.bio && (\n                  <>\n                    <p className=\"text-gray-700 italic\">\"Extremely reliable and efficient\"</p>\n                    <p className=\"text-gray-700 italic\">\"Went above and beyond to help me out!\"</p>\n                  </>\n                )}\n              </div>\n              \n              {/* Admin View Badge */}\n              <Badge className=\"w-full bg-blue-600 text-white font-bold py-2 text-lg\">\n                Admin View\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Information Cards */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Profile Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Profile Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Email</p>\n                  <p className=\"text-gray-900\">{finderData.user?.email || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Phone</p>\n                  <p className=\"text-gray-900\">{finderData.user?.phone || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Verified Status</p>\n                  <div className=\"flex items-center gap-2\">\n                    {finderData.user?.isVerified ? (\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    ) : (\n                      <XCircle className=\"w-4 h-4 text-finder-red\" />\n                    )}\n                    <span className={finderData.user?.isVerified ? 'text-green-600' : 'text-finder-red'}>\n                      {finderData.user?.isVerified ? 'Verified' : 'Unverified'}\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Availability</p>\n                  <p className=\"text-gray-900 capitalize\">{finderData.availability || 'Not specified'}</p>\n                </div>\n              </div>\n\n              {finderData.skills && finderData.skills.length > 0 && (\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500 mb-2\">Skills</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {finderData.skills.map((skill: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Performance Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Award className=\"w-5 h-5\" />\n                Performance Stats\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-finder-red\">{finderData.jobsCompleted || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Jobs Completed</div>\n                </div>\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">${finderData.totalEarned || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Total Earnings</div>\n                </div>\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{parseFloat(finderData.averageRating || \"5.0\").toFixed(1)}/5</div>\n                  <div className=\"text-sm text-gray-600\">Average Rating</div>\n                </div>\n                <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">${finderData.hourlyRate || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Hourly Rate</div>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium text-gray-500 mb-2\">Member Since</p>\n                <p className=\"text-gray-900\">\n                  {finderData.user?.createdAt ? new Date(finderData.user.createdAt).toLocaleDateString() : 'N/A'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8980},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Search, Star, Handshake, CheckCircle, Shield, Users } from \"lucide-react\";\nimport logoImage from \"@assets/findermeister logo real_1756395091374.jpg\";\n\nexport default function Landing() {\n  const { isAuthenticated, user } = useAuth();\n\n  if (isAuthenticated && user) {\n    if (user.role === 'client') {\n      window.location.href = '/client/dashboard';\n      return null;\n    } else if (user.role === 'finder') {\n      window.location.href = '/finder/dashboard';\n      return null;\n    } else if (user.role === 'admin') {\n      window.location.href = '/admin/dashboard';\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16 lg:h-20\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-3\">\n              <img\n                src={logoImage}\n                alt=\"FinderMeister Logo\"\n                className=\"w-10 h-10 lg:w-12 lg:h-12 object-contain rounded-full\"\n              />\n              <span className=\"text-xl lg:text-2xl font-bold text-gray-900\">FinderMeister</span>\n            </div>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#how-it-works\" className=\"text-gray-600 hover:text-gray-900 font-medium transition-colors\">\n                How it Works\n              </a>\n              <a href=\"#finder-path\" className=\"text-gray-600 hover:text-gray-900 font-medium transition-colors\">\n                Finder Path\n              </a>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" className=\"text-gray-600 hover:text-gray-900\">\n                  Log In\n                </Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white px-6 py-2 font-medium\">\n                  Sign Up\n                </Button>\n              </Link>\n            </nav>\n\n            {/* Mobile Menu Button */}\n            <div className=\"md:hidden\">\n              <Link href=\"/register\">\n                <Button size=\"sm\" className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                  Sign Up\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative bg-white overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-12 lg:py-20\">\n            <div className=\"text-center max-w-4xl mx-auto\">\n              {/* Main Headline */}\n              <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-gray-900 leading-tight mb-6\">\n                Trouble Finding a<br className=\"hidden sm:block\" />\n                <span className=\"text-finder-red\"> Product or Service?</span>\n              </h1>\n\n              {/* Subtitle */}\n              <p className=\"text-xl lg:text-2xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed\">\n                Post your request. Finders will help you source what you need, safely and easily.\n              </p>\n\n              {/* CTA Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n                <Link href=\"/register\">\n                  <Button size=\"lg\" className=\"w-full sm:w-auto bg-finder-red hover:bg-finder-red-dark text-white px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all\">\n                    Post a Find\n                  </Button>\n                </Link>\n                <Link href=\"/register/finder\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"border-2 border-finder-red text-finder-red hover:bg-finder-red hover:text-white px-8 py-4 text-lg font-semibold transition-all\">\n                    Become a Finder\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Service Icons */}\n              <div className=\"flex justify-center space-x-8 lg:space-x-12 opacity-60\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-gray-100 rounded-full flex items-center justify-center mb-2\">\n                    <svg className=\"w-6 h-6 lg:w-8 lg:h-8 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\n                    </svg>\n                  </div>\n                  <span className=\"text-sm text-gray-500 hidden lg:block\">Home</span>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-gray-100 rounded-full flex items-center justify-center mb-2\">\n                    <svg className=\"w-6 h-6 lg:w-8 lg:h-8 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M7 4V2C7 1.45 7.45 1 8 1H16C16.55 1 17 1.45 17 2V4H20C20.55 4 21 4.45 21 5S20.55 6 20 6H19V19C19 20.1 18.1 21 17 21H7C5.9 21 5 20.1 5 19V6H4C3.45 6 3 5.55 3 5S3.45 4 4 4H7Z\"/>\n                    </svg>\n                  </div>\n                  <span className=\"text-sm text-gray-500 hidden lg:block\">Services</span>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-gray-100 rounded-full flex items-center justify-center mb-2\">\n                    <svg className=\"w-6 h-6 lg:w-8 lg:h-8 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/>\n                    </svg>\n                  </div>\n                  <span className=\"text-sm text-gray-500 hidden lg:block\">Shopping</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-16 lg:py-24 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n                How It Works\n              </h2>\n              <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n                Three simple steps to get what you need\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-8 lg:gap-12\">\n              {/* Step 1 */}\n              <div className=\"text-center group\">\n                <div className=\"relative mb-8\">\n                  <div className=\"w-20 h-20 lg:w-24 lg:h-24 bg-finder-red text-white rounded-2xl flex items-center justify-center mx-auto shadow-lg group-hover:shadow-xl transition-shadow\">\n                    <svg className=\"w-10 h-10 lg:w-12 lg:h-12\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  </div>\n                  <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md border-2 border-finder-red\">\n                    <span className=\"text-finder-red font-bold text-sm\">1</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl lg:text-2xl font-bold text-gray-900 mb-4\">\n                  Post a Request\n                </h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Clients describe what they need\n                </p>\n              </div>\n\n              {/* Step 2 */}\n              <div className=\"text-center group\">\n                <div className=\"relative mb-8\">\n                  <div className=\"w-20 h-20 lg:w-24 lg:h-24 bg-finder-red text-white rounded-2xl flex items-center justify-center mx-auto shadow-lg group-hover:shadow-xl transition-shadow\">\n                    <svg className=\"w-10 h-10 lg:w-12 lg:h-12\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                    </svg>\n                  </div>\n                  <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md border-2 border-finder-red\">\n                    <span className=\"text-finder-red font-bold text-sm\">2</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl lg:text-2xl font-bold text-gray-900 mb-4\">\n                  Get Proposals\n                </h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Finders suggest how they'll help\n                </p>\n              </div>\n\n              {/* Step 3 */}\n              <div className=\"text-center group\">\n                <div className=\"relative mb-8\">\n                  <div className=\"w-20 h-20 lg:w-24 lg:h-24 bg-finder-red text-white rounded-2xl flex items-center justify-center mx-auto shadow-lg group-hover:shadow-xl transition-shadow\">\n                    <Handshake className=\"w-10 h-10 lg:w-12 lg:h-12\" />\n                  </div>\n                  <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md border-2 border-finder-red\">\n                    <span className=\"text-finder-red font-bold text-sm\">3</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl lg:text-2xl font-bold text-gray-900 mb-4\">\n                  Choose a Finder<br />& Pay Safely\n                </h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Funds held in escrow until delivery\n                </p>\n              </div>\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"mt-16 grid md:grid-cols-3 gap-8 text-center\">\n              <div className=\"flex items-center justify-center space-x-3\">\n                <Shield className=\"w-6 h-6 text-finder-red\" />\n                <span className=\"text-gray-700 font-medium\">Your money is safe until you confirm delivery</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-3\">\n                <Star className=\"w-6 h-6 text-finder-red\" />\n                <span className=\"text-gray-700 font-medium\">Reviews & ratings build trust</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-3\">\n                <Users className=\"w-6 h-6 text-finder-red\" />\n                <span className=\"text-gray-700 font-medium\">No special skills needed to be a Finder</span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n      {/* Finder Path Section */}\n      <section id=\"finder-path\" className=\"py-16 lg:py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n                Finder Path\n              </h2>\n              <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n                Build your reputation and unlock new opportunities\n              </p>\n            </div>\n\n            <div className=\"flex flex-wrap justify-center gap-6 lg:gap-8\">\n              {[\n                { level: 'Novice', color: 'bg-gray-400' },\n                { level: 'Pathfinder', color: 'bg-blue-500' },\n                { level: 'Seeker', color: 'bg-green-500' },\n                { level: 'Meister', color: 'bg-purple-500' },\n                { level: 'GrandMeister', color: 'bg-finder-red' }\n              ].map((item, index) => (\n                <div key={item.level} className=\"text-center group\">\n                  <div className={`w-16 h-16 lg:w-20 lg:h-20 ${item.color} rounded-full flex items-center justify-center mx-auto mb-3 shadow-lg group-hover:shadow-xl transition-shadow`}>\n                    <Users className=\"w-8 h-8 lg:w-10 lg:h-10 text-white\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 text-sm lg:text-base\">\n                    {item.level}\n                  </h3>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"text-center mt-12\">\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Join our today and become part of Nigeria's fastest-growing finder community\n              </p>\n              <Link href=\"/register/finder\">\n                <Button size=\"lg\" className=\"bg-finder-red hover:bg-finder-red-dark text-white px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all\">\n                  Start Your Finder Journey\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n\n        {/* Footer */}\n        <footer className=\"bg-gray-900 text-white py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center space-x-3 mb-6\">\n                <img\n                  src={logoImage}\n                  alt=\"FinderMeister Logo\"\n                  className=\"w-10 h-10 object-contain rounded-full\"\n                />\n                <span className=\"text-xl font-bold\">FinderMeister</span>\n              </div>\n              <div className=\"flex flex-wrap justify-center gap-8 text-gray-400 mb-8\">\n                <a href=\"#\" className=\"hover:text-white transition-colors\">About</a>\n                <a href=\"/support/contact\" className=\"hover:text-white transition-colors\">Contact Us</a>\n                <a href=\"/support\" className=\"hover:text-white transition-colors\">Support</a>\n                <a href=\"/support/help-center\" className=\"hover:text-white transition-colors\">FAQ</a>\n                <a href=\"/privacy-policy\" className=\"hover:text-white transition-colors\">Privacy</a>\n                <a href=\"/terms-and-conditions\" className=\"hover:text-white transition-colors\">TOS</a>\n              </div>\n              <p className=\"text-gray-400\">\n                ¬© 2025 FinderMeister. All rights reserved.\n              </p>\n            </div>\n          </div>\n        </footer>\n\n      {/* Mobile Menu - Simple overlay for mobile */}\n      <div className=\"md:hidden fixed bottom-6 left-4 right-4 z-50\">\n        <div className=\"bg-white rounded-full shadow-lg p-4 flex justify-center space-x-4\">\n          <Link href=\"/login\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600\">\n              Log In\n            </Button>\n          </Link>\n          <Link href=\"#how-it-works\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600\">\n              How it Works\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15729},"client/src/pages/mobile-landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Search } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport logoImage from \"@assets/findermeister logo real_1756395091374.jpg\";\n\nexport default function MobileLanding() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile-First Layout */}\n      <div className=\"max-w-sm mx-auto min-h-screen bg-white shadow-xl relative\">\n        {/* Header with Logo */}\n        <div className=\"bg-finder-red px-6 py-4 flex items-center rounded-t-3xl\">\n          <img \n            src={logoImage} \n            alt=\"FinderMeister Logo\" \n            className=\"w-10 h-10 rounded-full object-contain bg-white p-1 mr-3\" \n          />\n          <h1 className=\"text-2xl font-bold text-white\">FinderMeister</h1>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"px-6 py-12 flex flex-col justify-center min-h-[calc(100vh-80px)]\">\n          {/* Title */}\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6 leading-tight\">\n              Trouble Finding<br />\n              a Product or<br />\n              Service?\n            </h2>\n            <p className=\"text-gray-600 text-lg mb-8 leading-relaxed\">\n              Connect with finders who can help you search for what you need.\n            </p>\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"mb-16\">\n            {user ? (\n              <Link href={user.role === 'client' ? '/client/dashboard' : user.role === 'finder' ? '/finder/dashboard' : '/admin/dashboard'}>\n                <Button className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-4 text-lg font-semibold rounded-xl shadow-lg\">\n                  Go to Dashboard\n                </Button>\n              </Link>\n            ) : (\n              <Link href=\"/auth/register\">\n                <Button className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-4 text-lg font-semibold rounded-xl shadow-lg\">\n                  Get Started\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          {/* Bottom Tagline */}\n          <div className=\"text-center mt-auto\">\n            <p className=\"text-gray-500 text-base font-medium\">\n              One successful find<br />\n              at a time\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2485},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AdminHeader from \"@/components/admin-header\";\nimport ClientHeader from \"@/components/client-header\";\nimport { FinderHeader } from \"@/components/finder-header\";\n\nexport default function NotFound() {\n  const { user } = useAuth();\n\n  const renderHeader = () => {\n    if (!user) return null;\n    \n    switch (user.role) {\n      case 'admin':\n        return <AdminHeader />;\n      case 'client':\n        return <ClientHeader />;\n      case 'finder':\n        return <FinderHeader />;\n      default:\n        return null;\n    }\n  };\n\n  const getHomeRoute = () => {\n    if (!user) return \"/\";\n    \n    switch (user.role) {\n      case 'admin':\n        return \"/admin/dashboard\";\n      case 'client':\n        return \"/client/dashboard\";\n      case 'finder':\n        return \"/finder/dashboard\";\n      default:\n        return \"/\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {renderHeader()}\n      \n      <div className=\"flex items-center justify-center min-h-[calc(100vh-4rem)] px-4\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <AlertCircle className=\"h-16 w-16 text-finder-red\" />\n            </div>\n            \n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">404 - Page Not Found</h1>\n            \n            <p className=\"text-gray-600 mb-6\">\n              The page you're looking for doesn't exist or has been moved.\n            </p>\n\n            <Link href={getHomeRoute()}>\n              <Button className=\"bg-finder-red hover:bg-finder-red-dark\">\n                <Home className=\"w-4 h-4 mr-2\" />\n                Go Home\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2049},"client/src/pages/order-review.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { FileText, Calendar, Clock, CheckCircle, XCircle, Download, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ClientHeader from \"@/components/client-header\";\n\ninterface Contract {\n  id: string;\n  requestId: string;\n  finderId: string;\n  amount: string;\n  hasSubmission: boolean;\n  isCompleted: boolean;\n  createdAt: string;\n  finder?: {\n    name: string;\n    email?: string;\n    rating?: string;\n  };\n  orderSubmission?: {\n    id: string;\n    submissionText?: string;\n    attachmentPaths: string[];\n    status: string;\n    clientFeedback?: string;\n    submittedAt: string;\n    reviewedAt?: string;\n    autoReleaseDate?: string;\n  };\n}\n\nexport default function OrderReviewPage() {\n  const { contractId } = useParams<{ contractId: string }>();\n  const [feedback, setFeedback] = useState(\"\");\n  const [rating, setRating] = useState(5);\n  const [hoverRating, setHoverRating] = useState(0);\n  const [showAcceptDialog, setShowAcceptDialog] = useState(false);\n  const [showRejectDialog, setShowRejectDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contract, isLoading } = useQuery<Contract>({\n    queryKey: [\"/api/orders/contract\", contractId],\n    enabled: !!contractId,\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always refetch to get latest submission\n  });\n\n  const reviewSubmissionMutation = useMutation({\n    mutationFn: async (data: { submissionId: string; status: string; clientFeedback?: string }) => {\n      return apiRequest(`/api/orders/submission/${data.submissionId}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          status: data.status,\n          clientFeedback: data.clientFeedback,\n        })\n      });\n    },\n    onSuccess: (_, variables) => {\n      toast({ \n        title: variables.status === 'accepted' \n          ? \"Order accepted successfully!\" \n          : \"Order rejected - finder can resubmit\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders/contract\", contractId] });\n      setFeedback(\"\");\n      setShowAcceptDialog(false);\n      setShowRejectDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to review submission\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAccept = async () => {\n    if (!contract?.orderSubmission?.id || !contract?.finder) return;\n    \n    // First accept the submission\n    reviewSubmissionMutation.mutate({\n      submissionId: contract.orderSubmission.id,\n      status: \"accepted\",\n      clientFeedback: feedback.trim() || undefined,\n    });\n    \n    // Then create the review/rating\n    try {\n      await apiRequest('/api/reviews', {\n        method: 'POST',\n        body: {\n          contractId: contract.id,\n          finderId: contract.finderId,\n          rating: rating,\n          comment: feedback.trim() || undefined\n        }\n      });\n    } catch (error) {\n      console.error('Failed to submit rating:', error);\n      toast({\n        title: \"Rating submission failed\",\n        description: \"Your order was accepted but rating could not be saved\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleReject = () => {\n    if (!contract?.orderSubmission?.id) return;\n    \n    if (!feedback.trim()) {\n      toast({\n        title: \"Please provide feedback for rejection\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    reviewSubmissionMutation.mutate({\n      submissionId: contract.orderSubmission.id,\n      status: \"rejected\",\n      clientFeedback: feedback.trim(),\n    });\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(numAmount);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"submitted\":\n        return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />Pending Review</Badge>;\n      case \"accepted\":\n        return <Badge variant=\"default\" className=\"bg-green-500\"><CheckCircle className=\"h-3 w-3 mr-1\" />Accepted</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getDaysUntilAutoRelease = (autoReleaseDate?: string) => {\n    if (!autoReleaseDate) return null;\n    \n    const now = new Date();\n    const releaseDate = new Date(autoReleaseDate);\n    const diffTime = releaseDate.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-gray-500\">Contract not found</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!contract.orderSubmission) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-gray-500\">No submission found for this contract</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const daysUntilRelease = getDaysUntilAutoRelease(contract.orderSubmission.autoReleaseDate);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader currentPage=\"contracts\" />\n      \n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <h1 className=\"text-3xl font-bold mb-8\">Review Order Submission</h1>\n\n        <div className=\"grid gap-6\">\n        {/* Contract Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Contract Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Contract Amount</Label>\n                <p className=\"text-lg font-semibold\">{formatCurrency(contract.amount)}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                <div className=\"mt-1\">\n                  {getStatusBadge(contract.orderSubmission.status)}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Finder</Label>\n                <p className=\"text-sm font-semibold\">{contract.finder?.name || \"Unknown Finder\"}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Contract Created</Label>\n                <p>{formatDate(contract.createdAt)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Auto-release Warning */}\n        {contract.orderSubmission.status === \"submitted\" && daysUntilRelease !== null && (\n          <Card className=\"border-amber-200 bg-amber-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start space-x-3\">\n                <Clock className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n                <div>\n                  <h3 className=\"font-medium text-amber-900\">Auto-release Notice</h3>\n                  <p className=\"text-sm text-amber-800 mt-1\">\n                    {daysUntilRelease > 0 \n                      ? `Funds will be automatically released to the finder in ${daysUntilRelease} day${daysUntilRelease > 1 ? 's' : ''} if no decision is made.`\n                      : \"Funds will be automatically released today if no decision is made.\"\n                    }\n                  </p>\n                  <p className=\"text-xs text-amber-700 mt-1\">\n                    Auto-release date: {formatDate(contract.orderSubmission.autoReleaseDate!)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Order Submission Details */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Submission Details</CardTitle>\n              <div className=\"text-sm text-gray-500\">\n                Submitted on {formatDate(contract.orderSubmission.submittedAt)}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {contract.orderSubmission.submissionText && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Submission Description</Label>\n                <div className=\"mt-2 p-4 bg-gray-50 rounded-md\">\n                  <p className=\"whitespace-pre-wrap\">{contract.orderSubmission.submissionText}</p>\n                </div>\n              </div>\n            )}\n\n            {contract.orderSubmission.attachmentPaths.length > 0 && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">\n                  Attachments ({contract.orderSubmission.attachmentPaths.length})\n                </Label>\n                <div className=\"mt-3 space-y-2\">\n                  {contract.orderSubmission.attachmentPaths.map((path, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md border\">\n                      <div className=\"flex items-center\">\n                        <FileText className=\"h-4 w-4 mr-3 text-gray-500\" />\n                        <span className=\"font-medium\">Attachment {index + 1}</span>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        asChild\n                      >\n                        <a \n                          href={path} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center\"\n                        >\n                          <Download className=\"h-3 w-3 mr-1\" />\n                          Download\n                        </a>\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {contract.orderSubmission.clientFeedback && (\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Previous Feedback</Label>\n                <div className=\"mt-2 p-4 bg-blue-50 rounded-md border border-blue-200\">\n                  <p className=\"whitespace-pre-wrap text-blue-900\">{contract.orderSubmission.clientFeedback}</p>\n                  {contract.orderSubmission.reviewedAt && (\n                    <p className=\"text-xs text-blue-700 mt-2\">\n                      Reviewed on {formatDate(contract.orderSubmission.reviewedAt)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Review Actions */}\n        {contract.orderSubmission.status === \"submitted\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Review Submission</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Rating Section */}\n              <div>\n                <Label>Rate {contract.finder?.name || \"the finder\"}'s work</Label>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      type=\"button\"\n                      onClick={() => setRating(star)}\n                      onMouseEnter={() => setHoverRating(star)}\n                      onMouseLeave={() => setHoverRating(0)}\n                      className=\"p-1 hover:scale-110 transition-transform\"\n                    >\n                      <Star\n                        className={`h-6 w-6 ${\n                          star <= (hoverRating || rating)\n                            ? \"fill-yellow-400 text-yellow-400\"\n                            : \"text-gray-300\"\n                        }`}\n                      />\n                    </button>\n                  ))}\n                  <span className=\"ml-2 text-sm text-gray-600\">\n                    {rating === 1 && \"Poor\"}\n                    {rating === 2 && \"Fair\"}\n                    {rating === 3 && \"Good\"}\n                    {rating === 4 && \"Very Good\"}\n                    {rating === 5 && \"Excellent\"}\n                  </span>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"feedback\">Feedback (Optional for acceptance, required for rejection)</Label>\n                <Textarea\n                  id=\"feedback\"\n                  placeholder=\"Provide feedback to the finder about their submission...\"\n                  value={feedback}\n                  onChange={(e) => setFeedback(e.target.value)}\n                  className=\"mt-2 min-h-[100px]\"\n                />\n              </div>\n\n              <div className=\"flex gap-4\">\n                {/* Accept Dialog */}\n                <AlertDialog open={showAcceptDialog} onOpenChange={setShowAcceptDialog}>\n                  <AlertDialogTrigger asChild>\n                    <Button className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Accept Submission\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Accept Order Submission</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <p className=\"font-medium mb-2\">Your rating for {contract.finder?.name || \"the finder\"}:</p>\n                            <div className=\"flex items-center gap-1\">\n                              {[1, 2, 3, 4, 5].map((star) => (\n                                <Star\n                                  key={star}\n                                  className={`h-5 w-5 ${\n                                    star <= rating\n                                      ? \"fill-yellow-400 text-yellow-400\"\n                                      : \"text-gray-300\"\n                                  }`}\n                                />\n                              ))}\n                              <span className=\"ml-2 text-sm font-medium\">\n                                {rating === 1 && \"Poor\"}\n                                {rating === 2 && \"Fair\"}\n                                {rating === 3 && \"Good\"}\n                                {rating === 4 && \"Very Good\"}\n                                {rating === 5 && \"Excellent\"}\n                              </span>\n                            </div>\n                          </div>\n                          <div>\n                            <p>Are you sure you want to accept this submission? This will:</p>\n                            <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                              <li>Mark the request as completed</li>\n                              <li>Release funds to the finder in 3 days</li>\n                              <li>Complete the contract</li>\n                              <li>Submit your {rating}-star rating</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction \n                        onClick={handleAccept}\n                        disabled={reviewSubmissionMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        {reviewSubmissionMutation.isPending ? \"Processing...\" : \"Accept Submission\"}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n\n                {/* Reject Dialog */}\n                <AlertDialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>\n                  <AlertDialogTrigger asChild>\n                    <Button variant=\"destructive\" className=\"flex-1\">\n                      <XCircle className=\"h-4 w-4 mr-2\" />\n                      Request Changes\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Request Changes</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This will reject the submission and allow the finder to resubmit with changes.\n                        Please make sure you've provided clear feedback above.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction \n                        onClick={handleReject}\n                        disabled={reviewSubmissionMutation.isPending || !feedback.trim()}\n                        className=\"bg-finder-red hover:bg-finder-red-dark\"\n                      >\n                        {reviewSubmissionMutation.isPending ? \"Processing...\" : \"Request Changes\"}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n\n              <div className=\"text-sm text-gray-600 bg-blue-50 p-3 rounded-md\">\n                <strong>Note:</strong> If you accept the submission, funds will be automatically released to the finder after 3 days.\n                If you don't make a decision, funds will be automatically released after 5 days from submission.\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Completed Status */}\n        {contract.orderSubmission.status === \"accepted\" && (\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <h3 className=\"font-medium text-green-900\">Order Completed</h3>\n                  <p className=\"text-sm text-green-800 mt-1\">\n                    This submission has been accepted and the request is now completed.\n                  </p>\n                  {contract.orderSubmission.reviewedAt && (\n                    <p className=\"text-xs text-green-700 mt-1\">\n                      Accepted on {formatDate(contract.orderSubmission.reviewedAt)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20642},"client/src/pages/order-submission.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { Upload, FileText, Calendar, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UploadResult } from \"@uppy/core\";\n\ninterface Contract {\n  id: string;\n  requestId: string;\n  amount: string;\n  hasSubmission: boolean;\n  isCompleted: boolean;\n  createdAt: string;\n  orderSubmission?: {\n    id: string;\n    submissionText?: string;\n    attachmentPaths: string[];\n    status: string;\n    clientFeedback?: string;\n    submittedAt: string;\n    reviewedAt?: string;\n    autoReleaseDate?: string;\n  };\n}\n\nexport default function OrderSubmissionPage() {\n  const { contractId } = useParams<{ contractId: string }>();\n  const [submissionText, setSubmissionText] = useState(\"\");\n  const [attachmentPaths, setAttachmentPaths] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contract, isLoading } = useQuery<Contract>({\n    queryKey: [\"/api/orders/contract\", contractId],\n    enabled: !!contractId,\n  });\n\n  const submitOrderMutation = useMutation({\n    mutationFn: async (data: { contractId: string; submissionText?: string; attachmentPaths: string[] }) => {\n      return apiRequest(\"/api/orders/submit\", {\n        method: \"POST\",\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Order submitted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders/contract\", contractId] });\n      setSubmissionText(\"\");\n      setAttachmentPaths([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to submit order\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    const data = await apiRequest(\"/api/objects/upload\", {\n      method: \"POST\"\n    });\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    for (const file of result.successful || []) {\n      if (file.uploadURL) {\n        // Set ACL for the uploaded file\n        try {\n          const aclData = await apiRequest(\"/api/objects/acl\", {\n            method: \"PUT\",\n            body: JSON.stringify({\n              objectURL: file.uploadURL,\n              visibility: \"private\"\n            })\n          });\n          setAttachmentPaths(prev => [...prev, aclData.objectPath]);\n          toast({ title: \"File uploaded successfully!\" });\n        } catch (error: any) {\n          toast({\n            title: \"Upload completed but failed to set permissions\",\n            description: error.message,\n            variant: \"destructive\",\n          });\n        }\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (!contractId) return;\n    \n    if (!submissionText?.trim() && attachmentPaths.length === 0) {\n      toast({\n        title: \"Please add submission text or upload files\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitOrderMutation.mutate({\n      contractId,\n      submissionText: submissionText.trim() || undefined,\n      attachmentPaths,\n    });\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"submitted\":\n        return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />Submitted</Badge>;\n      case \"accepted\":\n        return <Badge variant=\"default\" className=\"bg-green-500\"><CheckCircle className=\"h-3 w-3 mr-1\" />Accepted</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <p className=\"text-center text-gray-500\">Contract not found</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <h1 className=\"text-3xl font-bold mb-8\">Order Submission</h1>\n\n        <div className=\"grid gap-6\">\n        {/* Contract Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Contract Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Contract Amount</Label>\n                <p className=\"text-lg font-semibold\">‚Ç¶{new Intl.NumberFormat('en-NG').format(parseFloat(contract.amount))}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                <div className=\"mt-1\">\n                  {contract.hasSubmission ? (\n                    <Badge variant=\"secondary\">Has Submission</Badge>\n                  ) : (\n                    <Badge variant=\"outline\">No Submission</Badge>\n                  )}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Created</Label>\n                <p>{formatDate(contract.createdAt)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Existing Submission (if any) */}\n        {contract.orderSubmission && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Current Submission</CardTitle>\n                {getStatusBadge(contract.orderSubmission.status)}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Submitted At</Label>\n                <p className=\"flex items-center mt-1\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  {formatDate(contract.orderSubmission.submittedAt)}\n                </p>\n              </div>\n              \n              {contract.orderSubmission.submissionText && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Submission Text</Label>\n                  <div className=\"mt-2 p-3 bg-gray-50 rounded-md\">\n                    <p className=\"whitespace-pre-wrap\">{contract.orderSubmission.submissionText}</p>\n                  </div>\n                </div>\n              )}\n\n              {contract.orderSubmission.attachmentPaths.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Attachments</Label>\n                  <div className=\"mt-2 space-y-2\">\n                    {contract.orderSubmission.attachmentPaths.map((path, index) => (\n                      <div key={index} className=\"flex items-center p-2 bg-gray-50 rounded\">\n                        <FileText className=\"h-4 w-4 mr-2\" />\n                        <a \n                          href={path} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:underline\"\n                        >\n                          Attachment {index + 1}\n                        </a>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {contract.orderSubmission.clientFeedback && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Client Feedback</Label>\n                  <div className=\"mt-2 p-3 bg-blue-50 rounded-md\">\n                    <p className=\"whitespace-pre-wrap\">{contract.orderSubmission.clientFeedback}</p>\n                  </div>\n                </div>\n              )}\n\n              {contract.orderSubmission.autoReleaseDate && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Auto-release Date</Label>\n                  <p className=\"flex items-center mt-1 text-amber-600\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    {formatDate(contract.orderSubmission.autoReleaseDate)}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Submit New/Updated Order */}\n        {(!contract.orderSubmission || contract.orderSubmission.status === \"rejected\") && (\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {contract.orderSubmission ? \"Resubmit Order\" : \"Submit Order\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"submission-text\">Submission Description</Label>\n                <Textarea\n                  id=\"submission-text\"\n                  placeholder=\"Describe your completed work, provide instructions, or add any notes for the client...\"\n                  value={submissionText}\n                  onChange={(e) => setSubmissionText(e.target.value)}\n                  className=\"mt-2 min-h-[120px]\"\n                />\n              </div>\n\n              <div>\n                <Label>File Attachments (Optional)</Label>\n                <div className=\"mt-2 space-y-3\">\n                  <ObjectUploader\n                    maxNumberOfFiles={5}\n                    maxFileSize={10485760} // 10MB\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete}\n                    buttonClassName=\"w-full\"\n                  >\n                    <div className=\"flex items-center justify-center py-3\">\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Upload Files\n                    </div>\n                  </ObjectUploader>\n\n                  {attachmentPaths.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm font-medium text-gray-500\">\n                        Selected Files ({attachmentPaths.length})\n                      </Label>\n                      {attachmentPaths.map((path, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                          <div className=\"flex items-center\">\n                            <FileText className=\"h-4 w-4 mr-2\" />\n                            <span className=\"text-sm\">Attachment {index + 1}</span>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setAttachmentPaths(prev => prev.filter((_, i) => i !== index))}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <Button\n                onClick={handleSubmit}\n                disabled={submitOrderMutation.isPending}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {submitOrderMutation.isPending ? (\n                  \"Submitting...\"\n                ) : contract.orderSubmission ? (\n                  \"Resubmit Order\"\n                ) : (\n                  \"Submit Order\"\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13023},"client/src/pages/privacy-policy.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b\">\n        <div className=\"max-w-4xl mx-auto px-6 py-4\">\n          <Link href=\"/\" className=\"inline-flex items-center text-finder-red hover:underline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n        </div>\n      </header>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-6 py-8\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Privacy Policy</h1>\n          <p className=\"text-gray-600 mb-8\">Last updated: {new Date().toLocaleDateString()}</p>\n\n          <div className=\"prose max-w-none\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Introduction</h2>\n            <p className=\"mb-4\">\n              FinderMeister Innovations (\"we,\" \"our,\" or \"us\") is committed to protecting your privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our platform. This policy is legally binding under the laws of the Federal Republic of Nigeria and complies with the Nigeria Data Protection Regulation (NDPR).\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Information We Collect</h2>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Personal Information</h3>\n            <p className=\"mb-4\">When you register and use our services, we may collect:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Name (first and last name)</li>\n              <li>Email address</li>\n              <li>Phone number</li>\n              <li>Payment details and transaction information</li>\n              <li>Account activity and usage patterns</li>\n              <li>Communication records and messages</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Verification Documents</h3>\n            <p className=\"mb-4\">For verification and compliance purposes, we may collect:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Voter's Card</li>\n              <li>Driver's License</li>\n              <li>International Passport</li>\n              <li>National Identification Number (NIN)</li>\n              <li>Bank Verification Number (BVN) for payment processing</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Technical Information</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>IP address and device information</li>\n              <li>Browser type and version</li>\n              <li>Operating system information</li>\n              <li>Cookies and similar tracking technologies</li>\n              <li>Usage data and platform interactions</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">How We Use Your Information</h2>\n            <p className=\"mb-4\">We use the collected information for the following purposes:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li><strong>Account Management:</strong> Creating and maintaining your account, processing registrations</li>\n              <li><strong>Service Delivery:</strong> Facilitating connections between Clients and Finders</li>\n              <li><strong>Payment Processing:</strong> Managing escrow transactions, token purchases, and withdrawals</li>\n              <li><strong>Security and Fraud Prevention:</strong> Protecting against unauthorized access and fraudulent activities</li>\n              <li><strong>Dispute Resolution:</strong> Investigating and resolving conflicts between users</li>\n              <li><strong>Compliance:</strong> Meeting legal and regulatory requirements</li>\n              <li><strong>Communication:</strong> Sending important updates, notifications, and marketing materials</li>\n              <li><strong>Platform Improvement:</strong> Analyzing usage patterns to enhance user experience</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Data Security</h2>\n            <p className=\"mb-4\">We implement robust security measures to protect your information:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li><strong>Encryption:</strong> All sensitive data is encrypted both in transit and at rest</li>\n              <li><strong>Access Control:</strong> Restricted staff access on a need-to-know basis</li>\n              <li><strong>Regular Audits:</strong> Periodic security assessments and vulnerability testing</li>\n              <li><strong>Secure Infrastructure:</strong> Industry-standard hosting and database security</li>\n              <li><strong>Employee Training:</strong> Regular privacy and security training for all staff members</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Information Sharing</h2>\n            <p className=\"mb-4\">We do not sell your personal information. We may share your data only in the following circumstances:</p>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Licensed Payment Partners</h3>\n            <p className=\"mb-4\">\n              We share necessary payment information with our licensed payment processors (Flutterwave, Opay, Paystack) to facilitate secure transactions and comply with financial regulations.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Legal Requirements</h3>\n            <p className=\"mb-4\">We may disclose information when required by:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Nigerian law enforcement agencies</li>\n              <li>Court orders or legal processes</li>\n              <li>Regulatory authorities (CBN, NDPR, etc.)</li>\n              <li>Protection of our rights and property</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Service Providers</h3>\n            <p className=\"mb-4\">\n              We may share data with trusted third-party service providers who assist in platform operations, subject to strict confidentiality agreements.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Your Rights Under NDPR</h2>\n            <p className=\"mb-4\">As a Nigerian resident or user of our services, you have the following rights:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li><strong>Right to Access:</strong> Request copies of your personal data</li>\n              <li><strong>Right to Rectification:</strong> Request correction of inaccurate information</li>\n              <li><strong>Right to Erasure:</strong> Request deletion of your data (subject to legal obligations)</li>\n              <li><strong>Right to Restriction:</strong> Request limitation of data processing</li>\n              <li><strong>Right to Data Portability:</strong> Request transfer of your data to another service</li>\n              <li><strong>Right to Object:</strong> Object to certain types of data processing</li>\n              <li><strong>Right to Withdraw Consent:</strong> Withdraw previously given consent</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Data Retention</h2>\n            <p className=\"mb-4\">We retain your information for different periods depending on the type of data:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li><strong>Account Information:</strong> Until account deletion plus 7 years for legal compliance</li>\n              <li><strong>Transaction Records:</strong> 10 years as required by Nigerian financial regulations</li>\n              <li><strong>Communication Logs:</strong> 2 years for dispute resolution purposes</li>\n              <li><strong>Marketing Data:</strong> Until you opt out or withdraw consent</li>\n              <li><strong>Legal Documents:</strong> As required by applicable laws</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Cookies and Tracking</h2>\n            <p className=\"mb-4\">We use cookies and similar technologies to:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Maintain your login session</li>\n              <li>Remember your preferences</li>\n              <li>Analyze platform usage and performance</li>\n              <li>Provide personalized experiences</li>\n              <li>Enhance security measures</li>\n            </ul>\n            <p className=\"mb-4\">\n              You can control cookie settings through your browser, but disabling certain cookies may affect platform functionality.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">International Transfers</h2>\n            <p className=\"mb-4\">\n              While we primarily operate within Nigeria, some data may be transferred to other countries for cloud storage or processing. When this occurs, we ensure adequate protection through:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Data transfer agreements with international standards</li>\n              <li>Compliance with NDPR cross-border transfer requirements</li>\n              <li>Use of reputable international service providers with strong privacy protections</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Children's Privacy</h2>\n            <p className=\"mb-4\">\n              Our platform is not intended for individuals under 18 years of age. We do not knowingly collect personal information from children. If we discover that a child has provided personal information, we will delete it immediately.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Changes to This Policy</h2>\n            <p className=\"mb-4\">\n              We may update this Privacy Policy periodically to reflect changes in our practices or legal requirements. We will notify users of significant changes through email or platform notifications. Continued use of our services after policy updates constitutes acceptance of the revised terms.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Contact Information</h2>\n            <p className=\"mb-4\">For privacy-related questions, requests, or concerns, please contact us:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li><strong>Email:</strong> privacy@findermeister.com</li>\n              <li><strong>Phone:</strong> +2347039391065</li>\n              <li><strong>Address:</strong> FinderMeister Innovations, Lagos, Nigeria</li>\n              <li><strong>Data Protection Officer:</strong> dpo@findermeister.com</li>\n            </ul>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">Governing Law</h2>\n            <p className=\"mb-4\">\n              This Privacy Policy is governed by the laws of the Federal Republic of Nigeria, including the Nigeria Data Protection Regulation (NDPR) and other applicable privacy and data protection laws.\n            </p>\n          </div>\n\n          <div className=\"mt-8 pt-6 border-t\">\n            <Link href=\"/\">\n              <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11812},"client/src/pages/terms-and-conditions.tsx":{"content":"\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function TermsAndConditions() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b\">\n        <div className=\"max-w-4xl mx-auto px-6 py-4\">\n          <Link href=\"/\" className=\"inline-flex items-center text-finder-red hover:underline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n        </div>\n      </header>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-6 py-8\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Terms of Service</h1>\n          <p className=\"text-gray-600 mb-8\">Last updated: {new Date().toLocaleDateString()}</p>\n\n          <div className=\"prose max-w-none\">\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">1. Terms of Use</h2>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Introduction</h3>\n            <p className=\"mb-4\">\n              Welcome to FinderMeister Innovations. By registering as a Client (who posts finds) or a Finder (who applies to complete finds), you agree to abide by these Terms of Use, our Privacy Policy, and Refund Policy. These Terms are legally binding under the laws of the Federal Republic of Nigeria.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Nature of Services</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>FinderMeister is an online marketplace platform. We do not directly supply goods or services.</li>\n              <li>Our role is to connect Clients and Finders and facilitate secure transactions using escrow via licensed payment processors (e.g., Flutterwave, Opay).</li>\n              <li>FinderMeister does not issue wallets or hold customer funds.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">FinderTokens</h3>\n            <p className=\"mb-4\">\n              FinderTokens are access credits used to apply for finds by Finders or boost a find by Clients. They are not currency, not legal tender, and hold no monetary value outside the platform.\n            </p>\n            <p className=\"mb-4\">FinderTokens are:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Non-refundable</li>\n              <li>Non-transferable</li>\n              <li>Expire after six (6) months from issuance</li>\n              <li>20 FinderTokens are awarded to each finder monthly</li>\n            </ul>\n            <p className=\"mb-4 font-medium\">\n              The expiry and non-refundable nature of FinderTokens are final and binding.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Contracts & Escrow</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>All contracts are fixed budget that can be agreed on between Finders and Clients.</li>\n              <li>Clients must deposit funds into escrow before a Finder begins work.</li>\n            </ul>\n            <p className=\"mb-4\">Escrow funds are released:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Automatically if no dispute is raised within the inspection period (48 hours).</li>\n              <li>Upon Client approval of deliverables.</li>\n              <li>Following dispute resolution (see Section 4).</li>\n            </ul>\n            <p className=\"mb-4 font-medium\">\n              Finality Clause: Once escrow is released, payment is irreversible except in proven fraud.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">User Obligations</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>No exchange of phone numbers, email addresses and other contact details before a contract starts</li>\n              <li>No illegal or prohibited finds (e.g., drugs, contraband, fraud, prostitution or trafficking)</li>\n              <li>No bypassing escrow.</li>\n              <li>No fraudulent evidence.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Account Suspension</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>FinderMeister operates a strike system. 3 strikes = suspension.</li>\n              <li>Severe breaches may result in immediate account termination.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Limitation of Liability</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>FinderMeister is not liable for indirect or consequential damages.</li>\n              <li>Our maximum liability = service fee earned on the disputed contract.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Indemnity</h3>\n            <p className=\"mb-4\">\n              Users indemnify FinderMeister against losses, damages, or claims arising from their activities on the platform.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">2. Refund Policy</h2>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Eligible Refunds:</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Non-completion of Find(s)</li>\n              <li>Breach of contract proven through disputes.</li>\n              <li>Unsatisfactory delivery where both parties agree.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Non-Refundable Items</h3>\n            <p className=\"mb-4\">\n              FinderTokens are strictly non-refundable, non-transferable, and expire after 6 months.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Processing Time</h3>\n            <p className=\"mb-4\">\n              Refunds processed in 7‚Äì14 working days through Flutterwave/Opay.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">3. Privacy Policy</h2>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Data We Collect</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Name, email, phone, payment details, account activity.</li>\n              <li>Verification documents: Voter's Card, Driver's License, International Passport, NIN.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Purpose</h3>\n            <p className=\"mb-4\">\n              Account management, escrow, fraud prevention, dispute resolution, compliance.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Data Security</h3>\n            <p className=\"mb-4\">\n              Encrypted storage, restricted staff access.\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Third Parties</h3>\n            <p className=\"mb-4\">\n              Data may be shared only with licensed partners (e.g., Flutterwave, Opay).\n            </p>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">User Rights</h3>\n            <p className=\"mb-4\">\n              Request access, correction, or deletion of data in line with NDPR.\n            </p>\n\n            <h2 className=\"text-2xl font-semibold text-gray-900 mt-8 mb-4\">4. Dispute Resolution Policy</h2>\n            \n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Scope</h3>\n            <p className=\"mb-4\">Covers disputes relating to:</p>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Non-delivery, late delivery, quality issues, fraud, refund eligibility.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Principles</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Funds in escrow remain until Client confirms delivery or a dispute decision is reached.</li>\n              <li>Admissible evidence during dispute resolution includes in-platform communications and other notable communication channels.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Timelines</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Dispute must be raised within 72 hours of completion of a find.</li>\n              <li>Evidence submission: 72 hours per party.</li>\n              <li>Mediation resolution: within 72 hours after evidence submission.</li>\n              <li>Auto-release if no dispute is raised in inspection window.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Evidence Standards</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Goods: unboxing videos/photos, courier tracking etc</li>\n              <li>Real Estate: inspection photos/videos, listings, agent communications etc</li>\n              <li>Services/Healthcare: logs, before/after evidence, correspondence. etc</li>\n              <li>Digital Items: access logs, versioned files etc.</li>\n              <li>Manipulated evidence = penalties.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Resolution Tiers</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Tier 1 ‚Äì Mediation: Support reviews and proposes outcome.</li>\n              <li>Tier 2 ‚Äì Dispute Panel: Final internal decision.</li>\n              <li>Appeals allowed once with new material evidence.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Possible Outcomes</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Full release to Finder.</li>\n              <li>Full refund to Client.</li>\n              <li>Partial split/refund.</li>\n              <li>Redo/repair with new deadline.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Fees & Chargebacks</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Payment processor fees may not be refundable.</li>\n              <li>FinderTokens are not refundable.</li>\n              <li>Excessive chargebacks = account suspension.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Unresponsive Party</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>If Client unresponsive = funds released to Finder.</li>\n              <li>If Finder unresponsive = refund to Client.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Prohibited Activity</h3>\n            <ul className=\"list-disc pl-6 mb-4\">\n              <li>Illegal finds = cancellation, refund to Client, and ban.</li>\n              <li>Fraudulent evidence = penalties and account termination.</li>\n            </ul>\n\n            <h3 className=\"text-xl font-semibold text-gray-900 mt-6 mb-3\">Governing Law</h3>\n            <p className=\"mb-4\">\n              Nigerian law governs all disputes.\n            </p>\n          </div>\n\n          <div className=\"mt-8 pt-6 border-t\">\n            <Link href=\"/register\">\n              <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                Back to Registration\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11647},"client/src/components/modals/submit-proposal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Request {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  budgetMin: number;\n  budgetMax: number;\n  timeframe: string;\n  clientId: string;\n}\n\ninterface SubmitProposalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  request: Request | null;\n}\n\nexport default function SubmitProposalModal({ isOpen, onClose, request }: SubmitProposalModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    approach: \"\",\n    price: \"\",\n    timeline: \"\",\n    notes: \"\",\n  });\n\n  const submitProposalMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"/api/proposals\", { method: \"POST\", body: JSON.stringify(data) });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/proposals/my'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tokens/balance'] });\n      toast({\n        title: \"Proposal submitted successfully\",\n        description: \"Your proposal has been sent to the client. 1 token has been deducted from your balance.\",\n      });\n      setFormData({ approach: \"\", price: \"\", timeline: \"\", notes: \"\" });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to submit proposal\",\n        description: error instanceof Error ? error.message : \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!request) return;\n    \n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price < request.budgetMin || price > request.budgetMax) {\n      toast({\n        title: \"Invalid price\",\n        description: `Price must be between $${request.budgetMin} and $${request.budgetMax}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitProposalMutation.mutate({\n      findId: request.id,\n      approach: formData.approach.trim(),\n      price: price.toString(),\n      timeline: formData.timeline.trim(),\n      notes: formData.notes.trim() || undefined,\n    });\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  if (!request) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-finder-text\">\n            Submit Proposal\n          </DialogTitle>\n        </DialogHeader>\n        \n        {/* Request Summary */}\n        <Card className=\"bg-finder-gray\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold text-finder-text mb-2\">Request: {request.title}</h3>\n            <p className=\"text-finder-text-light text-sm\">\n              Client ID: {request.clientId.slice(-8)} ‚Ä¢ Budget: ${request.budgetMin} - ${request.budgetMax}\n            </p>\n            <p className=\"text-finder-text-light text-sm mt-1\">\n              {request.description.substring(0, 150)}...\n            </p>\n          </CardContent>\n        </Card>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"approach\">Your Approach</Label>\n            <Textarea\n              id=\"approach\"\n              rows={4}\n              placeholder=\"Describe how you plan to find what the client needs. Include your experience, resources, and timeline...\"\n              value={formData.approach}\n              onChange={(e) => handleChange('approach', e.target.value)}\n              required\n              className=\"focus:ring-finder-red focus:border-finder-red resize-none\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"price\">Your Price</Label>\n            <div className=\"relative\">\n              <span className=\"absolute left-3 top-3 text-gray-500\">$</span>\n              <Input\n                id=\"price\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"35.00\"\n                value={formData.price}\n                onChange={(e) => handleChange('price', e.target.value)}\n                required\n                className=\"pl-8 focus:ring-finder-red focus:border-finder-red\"\n              />\n            </div>\n            <p className=\"text-sm text-finder-text-light mt-1\">\n              Client's budget range: ${request.budgetMin} - ${request.budgetMax}\n            </p>\n          </div>\n\n          <div>\n            <Label htmlFor=\"timeline\">Estimated Timeline</Label>\n            <Select value={formData.timeline} onValueChange={(value) => handleChange('timeline', value)}>\n              <SelectTrigger className=\"focus:ring-finder-red focus:border-finder-red\">\n                <SelectValue placeholder=\"Select timeframe\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"24h\">Within 24 hours</SelectItem>\n                <SelectItem value=\"1-2days\">1-2 days</SelectItem>\n                <SelectItem value=\"3-5days\">3-5 days</SelectItem>\n                <SelectItem value=\"1week\">1 week</SelectItem>\n                <SelectItem value=\"2weeks\">2+ weeks</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              rows={2}\n              placeholder=\"Any additional information you'd like to share...\"\n              value={formData.notes}\n              onChange={(e) => handleChange('notes', e.target.value)}\n              className=\"focus:ring-finder-red focus:border-finder-red resize-none\"\n            />\n          </div>\n\n          <div className=\"border-t border-gray-200 pt-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <span className=\"text-finder-text font-medium\">Proposal Cost: 1 Token</span>\n              <span className=\"text-sm text-finder-text-light\">This will be deducted from your balance</span>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-finder-red hover:bg-finder-red-dark font-semibold\"\n                disabled={submitProposalMutation.isPending}\n              >\n                {submitProposalMutation.isPending ? \"Submitting...\" : \"Submit Proposal (Use 1 Token)\"}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7509},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Search, Plus, User } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n  const { isAuthenticated, user } = useAuth();\n\n  if (!isAuthenticated) return null;\n\n  const isActive = (path: string) => location === path;\n\n  const getDashboardPath = () => {\n    if (user?.role === 'client') return '/client/dashboard';\n    if (user?.role === 'finder') return '/finder/dashboard';\n    if (user?.role === 'admin') return '/admin/dashboard';\n    return '/';\n  };\n\n  const getPostPath = () => {\n    if (user?.role === 'client') return '/client/create-find';\n    // Finders cannot post finds, redirect to browse\n    if (user?.role === 'finder') return '/finder/browse-finds';\n    return '/';\n  };\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40\">\n      <div className=\"grid grid-cols-4 h-16\">\n        <Link href={getDashboardPath()}>\n          <button className={`flex flex-col items-center justify-center space-y-1 ${\n            isActive(getDashboardPath()) ? 'text-finder-red' : 'text-gray-500'\n          }`}>\n            <Home className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Home</span>\n          </button>\n        </Link>\n        \n        <Link href=\"/finder/browse-requests\">\n          <button className={`flex flex-col items-center justify-center space-y-1 ${\n            isActive('/finder/browse-requests') ? 'text-finder-red' : 'text-gray-500'\n          }`}>\n            <Search className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Browse</span>\n          </button>\n        </Link>\n        \n        <Link href={getPostPath()}>\n          <button className={`flex flex-col items-center justify-center space-y-1 ${\n            isActive(getPostPath()) ? 'text-finder-red' : 'text-gray-500'\n          }`}>\n            {user?.role === 'client' ? <Plus className=\"w-5 h-5\" /> : <Search className=\"w-5 h-5\" />}\n            <span className=\"text-xs\">{user?.role === 'client' ? 'Post' : 'Browse'}</span>\n          </button>\n        </Link>\n        \n        <Link href={getDashboardPath()}>\n          <button className={`flex flex-col items-center justify-center space-y-1 ${\n            isActive(getDashboardPath()) ? 'text-finder-red' : 'text-gray-500'\n          }`}>\n            <User className=\"w-5 h-5\" />\n            <span className=\"text-xs\">Profile</span>\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2548},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/navigation.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Handshake, Menu } from \"lucide-react\";\nimport logoImage from \"@assets/Findermeister logo_1755186313310.jpg\";\nimport { useState } from \"react\";\n\nexport default function Navigation() {\n  const { isAuthenticated, user, logout } = useAuth();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"bg-finder-red text-white sticky top-0 z-50 shadow-lg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\">\n              <img \n                src={logoImage} \n                alt=\"FinderMeister Logo\" \n                className=\"w-8 h-8 rounded-full object-contain bg-white p-1\" \n              />\n              <span className=\"text-xl font-bold\">FinderMeister</span>\n            </div>\n          </Link>\n          \n          <nav className=\"hidden md:flex space-x-8\">\n            <a href=\"#how-it-works\" className=\"hover:text-finder-red/70 transition-colors\">\n              How it Works\n            </a>\n            <Link href=\"/finder/browse-requests\">\n              <a className=\"hover:text-finder-red/70 transition-colors\">Browse Requests</a>\n            </Link>\n            \n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm\">\n                  Welcome, {user?.firstName}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={logout}\n                  className=\"border-white text-white hover:bg-white hover:text-finder-red\"\n                >\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Link href=\"/login\">\n                  <a className=\"hover:text-finder-red/70 transition-colors\">Log In</a>\n                </Link>\n                <Link href=\"/register\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"border-white text-white hover:bg-white hover:text-finder-red\"\n                  >\n                    Sign Up\n                  </Button>\n                </Link>\n              </>\n            )}\n          </nav>\n          \n          <button \n            className=\"md:hidden\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n          >\n            <Menu className=\"w-6 h-6\" />\n          </button>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-finder-red/60\">\n            <div className=\"flex flex-col space-y-2\">\n              <a href=\"#how-it-works\" className=\"py-2 hover:text-finder-red/70 transition-colors\">\n                How it Works\n              </a>\n              <Link href=\"/finder/browse-requests\">\n                <a className=\"py-2 hover:text-finder-red/70 transition-colors\">Browse Requests</a>\n              </Link>\n              \n              {isAuthenticated ? (\n                <>\n                  <span className=\"py-2 text-sm\">Welcome, {user?.firstName}</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={logout}\n                    className=\"border-white text-white hover:bg-white hover:text-finder-red self-start\"\n                  >\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/login\">\n                    <a className=\"py-2 hover:text-finder-red/70 transition-colors\">Log In</a>\n                  </Link>\n                  <Link href=\"/register\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"border-white text-white hover:bg-white hover:text-finder-red self-start\"\n                    >\n                      Sign Up\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":4359},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/StrikeSystem.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, Shield, Users, FileText, TrendingUp } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { SeverityBadge, getSeverityConfig } from \"@/components/severity-badge\";\n\ninterface Strike {\n  id: string;\n  userId: string;\n  strikeLevel: number;\n  offense: string;\n  offenseType: string;\n  evidence: string;\n  issuedBy: string;\n  status: string;\n  createdAt: Date;\n  expiresAt: Date;\n  notes?: string;\n}\n\ninterface Dispute {\n  id: string;\n  userId: string;\n  strikeId: string;\n  type: string;\n  description: string;\n  evidence?: string;\n  submittedAt: Date;\n  status: string;\n  resolution?: string;\n  reviewedBy?: string;\n  reviewedAt?: Date;\n}\n\ninterface StrikeStats {\n  totalUsers: number;\n  usersWithActiveStrikes: number;\n  strikeLevelBreakdown: { [key: number]: number };\n  recentStrikes: number;\n  disputesInReview: number;\n}\n\ninterface OffenseDefinition {\n  offense: string;\n  strikeLevel: number;\n  applicableRoles: string[];\n  resolution: string;\n}\n\nexport default function StrikeSystem() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n  const [selectedOffense, setSelectedOffense] = useState(\"\");\n  const [evidence, setEvidence] = useState(\"\");\n  const [contextId, setContextId] = useState(\"\");\n  const [isIssueStrikeOpen, setIsIssueStrikeOpen] = useState(false);\n\n  // Fetch strike statistics\n  const { data: strikeStats = {} as StrikeStats } = useQuery<StrikeStats>({\n    queryKey: ['/api/admin/strike-stats'],\n  });\n\n  // Fetch all disputes\n  const { data: disputes = [] } = useQuery<Dispute[]>({\n    queryKey: ['/api/admin/disputes'],\n  });\n\n  // Fetch offense types for selected role\n  const { data: offenseTypes = [] } = useQuery<OffenseDefinition[]>({\n    queryKey: ['/api/offenses', selectedRole],\n    enabled: !!selectedRole,\n  });\n\n  // Fetch clients and finders for strike assignment (admins cannot receive strikes)\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/users'],\n    select: (data: any[]) => data?.filter((user: any) => user.role !== 'admin') || [],\n  });\n\n  // Issue strike mutation\n  const issueStrikeMutation = useMutation({\n    mutationFn: async (data: { userId: string; offenseType: string; evidence: string; userRole: string; contextId?: string }) => {\n      return await apiRequest('/api/admin/strikes', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Strike Issued\",\n        description: \"The strike has been successfully issued to the user.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/strike-stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/disputes'] });\n      setIsIssueStrikeOpen(false);\n      setSelectedUserId(\"\");\n      setSelectedRole(\"\");\n      setSelectedOffense(\"\");\n      setEvidence(\"\");\n      setContextId(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update dispute mutation\n  const updateDisputeMutation = useMutation({\n    mutationFn: async ({ disputeId, updates }: { disputeId: string; updates: any }) => {\n      return await apiRequest(`/api/admin/disputes/${disputeId}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updates)\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Dispute Updated\",\n        description: \"The dispute status has been updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/disputes'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleIssueStrike = () => {\n    if (!selectedUserId || !selectedOffense || !evidence || !selectedRole) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    issueStrikeMutation.mutate({\n      userId: selectedUserId,\n      offenseType: selectedOffense,\n      evidence,\n      userRole: selectedRole,\n      contextId: contextId || undefined,\n    });\n  };\n\n  const handleDisputeUpdate = (disputeId: string, status: string, resolution?: string) => {\n    updateDisputeMutation.mutate({\n      disputeId,\n      updates: {\n        status,\n        resolution,\n        reviewedAt: new Date(),\n      },\n    });\n  };\n\n  // Severity helper functions now handled by SeverityBadge component\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return \"bg-yellow-100 text-yellow-800\";\n      case 'investigating': return \"bg-blue-100 text-blue-800\";\n      case 'resolved': return \"bg-green-100 text-green-800\";\n      case 'rejected': return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"strikes\" />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n              Strike System\n            </h1>\n            <p className=\"text-sm sm:text-base text-gray-500 dark:text-gray-400 font-medium\">Community protection and behavior management</p>\n          </div>\n          <Dialog open={isIssueStrikeOpen} onOpenChange={setIsIssueStrikeOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" className=\"w-full sm:w-auto\">\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                Issue Strike\n              </Button>\n            </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Issue Strike to User</DialogTitle>\n              <DialogDescription>\n                Issue a strike to a user for policy violations or inappropriate behavior.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"user\">User</Label>\n                <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a user\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {users?.map((user: any) => (\n                      <SelectItem key={user.id} value={user.id}>\n                        {user.firstName} {user.lastName} ({user.email})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"role\">User Role</Label>\n                <Select value={selectedRole} onValueChange={setSelectedRole}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select user role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"client\">Client</SelectItem>\n                    <SelectItem value=\"finder\">Finder</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {selectedRole && (\n                <div>\n                  <Label htmlFor=\"offense\">Offense Type</Label>\n                  <Select value={selectedOffense} onValueChange={setSelectedOffense}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select offense type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {offenseTypes?.map((offense: OffenseDefinition) => (\n                        <SelectItem key={offense.offense} value={offense.offense}>\n                          <div className=\"flex items-center justify-between w-full\">\n                            <span className=\"flex-1\">{offense.offense}</span>\n                            <SeverityBadge \n                              level={offense.strikeLevel} \n                              variant=\"compact\"\n                              className=\"ml-2\"\n                            />\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              <div>\n                <Label htmlFor=\"evidence\">Evidence</Label>\n                <Textarea \n                  value={evidence}\n                  onChange={(e) => setEvidence(e.target.value)}\n                  placeholder=\"Provide detailed evidence and reasoning for the strike...\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"context\">Context ID (Optional)</Label>\n                <Input\n                  value={contextId}\n                  onChange={(e) => setContextId(e.target.value)}\n                  placeholder=\"Contract ID, Find ID, or Proposal ID for context\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button \n                onClick={handleIssueStrike}\n                disabled={issueStrikeMutation.isPending}\n              >\n                {issueStrikeMutation.isPending ? \"Issuing...\" : \"Issue Strike\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n        </div>\n        \n        {/* Severity Legend */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border border-gray-200 dark:border-gray-700 dark:bg-gray-800/80 mb-6\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base sm:text-lg flex items-center gap-2\">\n              <Shield className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              Severity Indicators\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-4\">\n              {[1, 2, 3, 4].map((level) => (\n                <SeverityBadge \n                  key={level} \n                  level={level} \n                  variant=\"detailed\"\n                  className=\"border-2 text-xs sm:text-sm\"\n                />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n      {/* Statistics Overview */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 sm:gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent className=\"pt-1\">\n            <div className=\"text-lg sm:text-2xl font-bold\">{strikeStats?.totalUsers || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">With Strikes</CardTitle>\n            <AlertTriangle className=\"h-3 w-3 sm:h-4 sm:w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent className=\"pt-1\">\n            <div className=\"text-lg sm:text-2xl font-bold\">{strikeStats?.usersWithActiveStrikes || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Recent</CardTitle>\n            <TrendingUp className=\"h-3 w-3 sm:h-4 sm:w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent className=\"pt-1\">\n            <div className=\"text-lg sm:text-2xl font-bold\">{strikeStats?.recentStrikes || 0}</div>\n            <p className=\"text-xs text-muted-foreground hidden sm:block\">Last 30 days</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Disputes</CardTitle>\n            <FileText className=\"h-3 w-3 sm:h-4 sm:w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent className=\"pt-1\">\n            <div className=\"text-lg sm:text-2xl font-bold\">{strikeStats?.disputesInReview || 0}</div>\n          </CardContent>\n        </Card>\n        <Card className=\"col-span-2 sm:col-span-1\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Protection</CardTitle>\n            <Shield className=\"h-3 w-3 sm:h-4 sm:w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent className=\"pt-1\">\n            <div className=\"text-lg sm:text-2xl font-bold text-green-600\">Active</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Strike Level Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Strike Level Distribution</CardTitle>\n          <CardDescription>Breakdown of users by their current strike levels</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {[1, 2, 3, 4].map((level) => {\n              const count = strikeStats?.strikeLevelBreakdown?.[level] || 0;\n              const config = getSeverityConfig(level);\n              \n              return (\n                <div key={level} className=\"text-center p-4 rounded-lg bg-gray-50 dark:bg-gray-700\">\n                  <div className=\"flex items-center justify-center gap-2 mb-2\">\n                    <span className=\"text-2xl\">{config.icon}</span>\n                    <div className=\"text-3xl font-bold\">\n                      {count}\n                    </div>\n                  </div>\n                  <SeverityBadge \n                    level={level} \n                    variant=\"compact\"\n                    className=\"mb-2\"\n                  />\n                  <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    {config.name}\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                    {count === 1 ? 'user' : 'users'}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Total Progress Bar */}\n          <div className=\"mt-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium\">Total Strike Distribution</span>\n              <span className=\"text-sm text-gray-500\">\n                {Object.values(strikeStats?.strikeLevelBreakdown || {}).reduce((a, b) => a + b, 0)} users affected\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n              {[1, 2, 3, 4].map((level) => {\n                const count = strikeStats?.strikeLevelBreakdown?.[level] || 0;\n                const total = Object.values(strikeStats?.strikeLevelBreakdown || {}).reduce((a, b) => a + b, 0);\n                const percentage = total > 0 ? (count / total) * 100 : 0;\n                const colors = {\n                  1: 'bg-yellow-500',\n                  2: 'bg-orange-500', \n                  3: 'bg-red-500',\n                  4: 'bg-gray-900'\n                };\n                \n                return (\n                  <div \n                    key={level}\n                    className={`h-full ${colors[level as keyof typeof colors]} inline-block`}\n                    style={{ width: `${percentage}%` }}\n                    title={`Level ${level}: ${count} users (${percentage.toFixed(1)}%)`}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Disputes */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Pending Disputes</CardTitle>\n          <CardDescription>User appeals and complaints requiring review</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {disputes?.filter((dispute: Dispute) => dispute.status === 'pending' || dispute.status === 'investigating').map((dispute: Dispute) => (\n              <div key={dispute.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={getStatusColor(dispute.status)}>\n                      {dispute.status.charAt(0).toUpperCase() + dispute.status.slice(1)}\n                    </Badge>\n                    <span className=\"text-sm text-gray-600\">\n                      {new Date(dispute.submittedAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleDisputeUpdate(dispute.id, 'investigating')}\n                      disabled={updateDisputeMutation.isPending}\n                    >\n                      Investigate\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleDisputeUpdate(dispute.id, 'resolved', 'Dispute resolved after review')}\n                      disabled={updateDisputeMutation.isPending}\n                    >\n                      Resolve\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleDisputeUpdate(dispute.id, 'rejected', 'Dispute rejected after review')}\n                      disabled={updateDisputeMutation.isPending}\n                    >\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"text-sm\">\n                  <p><strong>Type:</strong> {dispute.type.replace('_', ' ').toUpperCase()}</p>\n                  <p><strong>Description:</strong> {dispute.description}</p>\n                  {dispute.evidence && <p><strong>Evidence:</strong> {dispute.evidence}</p>}\n                </div>\n              </div>\n            ))}\n            {(!disputes || disputes.filter((d: Dispute) => d.status === 'pending' || d.status === 'investigating').length === 0) && (\n              <div className=\"text-center text-gray-500 py-8\">\n                No pending disputes to review\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20141},"client/src/pages/admin/blog-post-create.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBlogPostSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\n// Enhanced schema with slug generation\nconst createBlogPostSchema = insertBlogPostSchema.extend({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  excerpt: z.string().optional(),\n  isPublished: z.boolean().default(false),\n}).omit({ slug: true, authorId: true });\n\ntype CreateBlogPostForm = z.infer<typeof createBlogPostSchema>;\n\nexport default function AdminBlogPostCreate() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateBlogPostForm>({\n    resolver: zodResolver(createBlogPostSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      excerpt: \"\",\n      isPublished: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: CreateBlogPostForm) => {\n      // Generate slug from title\n      const slug = data.title\n        .toLowerCase()\n        .replace(/[^\\w\\s-]/g, '') // Remove special chars\n        .replace(/\\s+/g, '-') // Replace spaces with hyphens\n        .replace(/--+/g, '-') // Replace multiple hyphens with single\n        .trim();\n\n      return apiRequest('/api/admin/blog-posts', { \n        method: 'POST', \n        body: JSON.stringify({ ...data, slug }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/blog-posts'] });\n      toast({\n        title: \"Success\",\n        description: \"Blog post created successfully\",\n      });\n      navigate(\"/admin/blog-posts\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateBlogPostForm) => {\n    createMutation.mutate(data);\n  };\n\n  // Quill modules configuration\n  const quillModules = {\n    toolbar: [\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      ['bold', 'italic', 'underline', 'strike'],\n      [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n      [{ 'script': 'sub'}, { 'script': 'super' }],\n      [{ 'indent': '-1'}, { 'indent': '+1' }],\n      [{ 'direction': 'rtl' }],\n      [{ 'color': [] }, { 'background': [] }],\n      [{ 'font': [] }],\n      [{ 'align': [] }],\n      ['link', 'image', 'video'],\n      ['clean'],\n      ['blockquote', 'code-block'],\n    ],\n  };\n\n  const quillFormats = [\n    'header', 'bold', 'italic', 'underline', 'strike',\n    'list', 'bullet', 'script', 'indent', 'direction',\n    'color', 'background', 'font', 'align',\n    'link', 'image', 'video', 'blockquote', 'code-block'\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"blog-posts\" />\n      \n      <div className=\"max-w-4xl mx-auto py-4 sm:py-8 px-4 sm:px-6\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-6 sm:mb-8\">\n          <Link href=\"/admin/blog-posts\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Posts\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Create New Blog Post</h1>\n            <p className=\"text-gray-600 mt-1\">Write and publish engaging content</p>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 sm:space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Post Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4 sm:space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter post title...\" \n                          {...field}\n                          className=\"text-lg\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {form.watch(\"title\") && (\n                  <div className=\"text-sm text-gray-600\">\n                    <span className=\"font-medium\">URL Preview:</span> /blog/{\n                      form.watch(\"title\")\n                        .toLowerCase()\n                        .replace(/[^\\w\\s-]/g, '')\n                        .replace(/\\s+/g, '-')\n                        .replace(/--+/g, '-')\n                        .trim()\n                    }\n                  </div>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"excerpt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Excerpt (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Brief description of the post...\" \n                          {...field}\n                          rows={3}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isPublished\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">\n                          Publish immediately\n                        </FormLabel>\n                        <div className=\"text-sm text-gray-600\">\n                          Make this post visible to readers\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Content</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <div className=\"min-h-[400px] bg-white\">\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={field.value}\n                            onChange={field.onChange}\n                            modules={quillModules}\n                            formats={quillFormats}\n                            placeholder=\"Start writing your blog post...\"\n                            style={{ height: '350px' }}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            <div className=\"flex flex-col sm:flex-row justify-end gap-3\">\n              <Link href=\"/admin/blog-posts\">\n                <Button type=\"button\" variant=\"outline\" className=\"w-full sm:w-auto\">\n                  Cancel\n                </Button>\n              </Link>\n              <Button \n                type=\"submit\" \n                className=\"bg-finder-red hover:bg-finder-red-dark w-full sm:w-auto\"\n                disabled={createMutation.isPending}\n              >\n                {createMutation.isPending ? (\n                  <>Creating...</>\n                ) : (\n                  <>\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Create Post\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}","size_bytes":9245},"client/src/pages/admin/blog-post-edit.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Link, useLocation, useParams } from \"wouter\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBlogPostSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport React from \"react\";\n\n// Enhanced schema for editing\nconst editBlogPostSchema = insertBlogPostSchema.extend({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  excerpt: z.string().optional(),\n  isPublished: z.boolean().default(false),\n}).omit({ authorId: true });\n\ntype EditBlogPostForm = z.infer<typeof editBlogPostSchema>;\n\nexport default function AdminBlogPostEdit() {\n  const params = useParams();\n  const postId = params?.id;\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch existing blog post\n  const { data: post, isLoading } = useQuery({\n    queryKey: [`/api/admin/blog-posts/${postId}`],\n    enabled: !!postId,\n  });\n\n  const form = useForm<EditBlogPostForm>({\n    resolver: zodResolver(editBlogPostSchema),\n    defaultValues: {\n      title: \"\",\n      slug: \"\",\n      content: \"\",\n      excerpt: \"\",\n      isPublished: false,\n    },\n  });\n\n  // Update form when post data loads\n  React.useEffect(() => {\n    if (post) {\n      form.reset({\n        title: post.title,\n        slug: post.slug,\n        content: post.content,\n        excerpt: post.excerpt || \"\",\n        isPublished: post.isPublished,\n      });\n    }\n  }, [post, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: (data: EditBlogPostForm) => {\n      // Generate slug from title if changed\n      const slug = data.title\n        .toLowerCase()\n        .replace(/[^\\w\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/--+/g, '-')\n        .trim();\n\n      return apiRequest(`/api/admin/blog-posts/${postId}`, { \n        method: 'PUT', \n        body: JSON.stringify({ ...data, slug }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/blog-posts'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/blog-posts/${postId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Blog post updated successfully\",\n      });\n      navigate(\"/admin/blog-posts\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditBlogPostForm) => {\n    updateMutation.mutate(data);\n  };\n\n  // Quill modules configuration\n  const quillModules = {\n    toolbar: [\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      ['bold', 'italic', 'underline', 'strike'],\n      [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n      [{ 'script': 'sub'}, { 'script': 'super' }],\n      [{ 'indent': '-1'}, { 'indent': '+1' }],\n      [{ 'direction': 'rtl' }],\n      [{ 'color': [] }, { 'background': [] }],\n      [{ 'font': [] }],\n      [{ 'align': [] }],\n      ['link', 'image', 'video'],\n      ['clean'],\n      ['blockquote', 'code-block'],\n    ],\n  };\n\n  const quillFormats = [\n    'header', 'bold', 'italic', 'underline', 'strike',\n    'list', 'bullet', 'script', 'indent', 'direction',\n    'color', 'background', 'font', 'align',\n    'link', 'image', 'video', 'blockquote', 'code-block'\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AdminHeader currentPage=\"blog-posts\" />\n        <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6\">\n          <div className=\"text-center\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!post) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AdminHeader currentPage=\"blog-posts\" />\n        <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6\">\n          <div className=\"text-center\">Blog post not found</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"blog-posts\" />\n      \n      <div className=\"max-w-4xl mx-auto py-4 sm:py-8 px-4 sm:px-6\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-6 sm:mb-8\">\n          <Link href=\"/admin/blog-posts\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Posts\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Edit Blog Post</h1>\n            <p className=\"text-gray-600 mt-1\">Update your blog content</p>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 sm:space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Post Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4 sm:space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Post Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter a compelling title...\" \n                          {...field}\n                          className=\"text-base sm:text-lg\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"excerpt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Excerpt (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Brief description or summary...\"\n                          className=\"resize-none\"\n                          rows={3}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isPublished\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Publish Status</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {field.value ? \"This post will be publicly visible\" : \"This post will remain as draft\"}\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Content</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <div className=\"min-h-[400px]\">\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={field.value}\n                            onChange={field.onChange}\n                            modules={quillModules}\n                            formats={quillFormats}\n                            className=\"bg-white\"\n                            style={{ height: '350px' }}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                className=\"bg-finder-red hover:bg-finder-red-dark text-white flex-1 sm:flex-none\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {updateMutation.isPending ? 'Updating...' : 'Update Post'}\n              </Button>\n              \n              <Link href=\"/admin/blog-posts\">\n                <Button type=\"button\" variant=\"outline\" className=\"w-full sm:w-auto\">\n                  Cancel\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}","size_bytes":9799},"client/src/pages/admin/blog-posts.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Plus, Edit, Trash2, Eye, Calendar } from \"lucide-react\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function AdminBlogPosts() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: posts = [], isLoading } = useQuery<BlogPost[]>({\n    queryKey: ['/api/admin/blog-posts']\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/blog-posts/${id}`, { method: 'DELETE' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/blog-posts'] });\n      toast({\n        title: \"Success\",\n        description: \"Blog post deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete blog post\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"blog-posts\" />\n      \n      <div className=\"max-w-6xl mx-auto py-8 px-4 sm:px-6\">\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Blog Posts</h1>\n            <p className=\"text-gray-600\">Create and manage blog posts for your platform</p>\n          </div>\n          <Link href=\"/admin/blog-posts/create\">\n            <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white w-full sm:w-auto\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Post\n            </Button>\n          </Link>\n        </div>\n\n        {posts.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <div className=\"text-gray-400 mb-4\">\n                <Edit className=\"w-16 h-16 mx-auto\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No blog posts yet</h3>\n              <p className=\"text-gray-600 mb-6\">Start creating engaging content for your platform</p>\n              <Link href=\"/admin/blog-posts/create\">\n                <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Your First Post\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {posts.map((post) => (\n              <Card key={post.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-4 sm:p-6\">\n                  <div className=\"flex flex-col lg:flex-row lg:justify-between lg:items-start gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2\">\n                        <h3 className=\"text-lg sm:text-xl font-semibold text-gray-900 truncate\">\n                          {post.title}\n                        </h3>\n                        <Badge variant={post.isPublished ? \"default\" : \"secondary\"} className=\"w-fit\">\n                          {post.isPublished ? \"Published\" : \"Draft\"}\n                        </Badge>\n                      </div>\n                      \n                      {post.excerpt && (\n                        <p className=\"text-gray-600 mb-3 line-clamp-2\">\n                          {post.excerpt}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-500 gap-2 sm:gap-4\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span className=\"hidden sm:inline\">Created </span>\n                          {new Date(post.createdAt!).toLocaleDateString()}\n                        </div>\n                        {post.publishedAt && (\n                          <div className=\"flex items-center gap-1\">\n                            <Eye className=\"w-4 h-4\" />\n                            <span className=\"hidden sm:inline\">Published </span>\n                            {new Date(post.publishedAt).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"mt-3\">\n                        <span className=\"text-sm text-blue-600 font-medium break-all\">\n                          /{post.slug}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2 lg:ml-4\">\n                      <Link href={`/admin/blog-posts/edit/${post.id}`}>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                          <Edit className=\"w-4 h-4 mr-1\" />\n                          <span className=\"hidden sm:inline\">Edit</span>\n                          <span className=\"sm:hidden\">Edit Post</span>\n                        </Button>\n                      </Link>\n                      \n                      {post.isPublished && (\n                        <Link href={`/blog/${post.slug}`}>\n                          <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            <span className=\"hidden sm:inline\">View</span>\n                            <span className=\"sm:hidden\">View Post</span>\n                          </Button>\n                        </Link>\n                      )}\n                      \n                      <Button\n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(post.id)}\n                        disabled={deleteMutation.isPending}\n                        className=\"text-finder-red hover:text-finder-red-dark hover:bg-finder-red/10 w-full sm:w-auto\"\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-1\" />\n                        <span className=\"hidden sm:inline\">Delete</span>\n                        <span className=\"sm:hidden\">Delete Post</span>\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7329},"client/src/pages/admin/categories.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Shield, \n  Plus,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  Settings\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { Category } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\n\nexport default function AdminCategories() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [newCategoryDesc, setNewCategoryDesc] = useState(\"\");\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [editCategoryName, setEditCategoryName] = useState(\"\");\n  const [editCategoryDesc, setEditCategoryDesc] = useState(\"\");\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/admin/categories'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      return await apiRequest('/api/admin/categories', { method: 'POST', body: JSON.stringify(data) });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/categories'] });\n      setNewCategoryName(\"\");\n      setNewCategoryDesc(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async (data: { id: string; name: string; description: string }) => {\n      return await apiRequest(`/api/admin/categories/${data.id}`, { \n        method: 'PUT', \n        body: JSON.stringify({ name: data.name, description: data.description }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/categories'] });\n      setEditingCategory(null);\n      setEditCategoryName(\"\");\n      setEditCategoryDesc(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const toggleCategoryMutation = useMutation({\n    mutationFn: async (data: { id: string; isActive: boolean }) => {\n      return await apiRequest(`/api/admin/categories/${data.id}`, { \n        method: 'PUT', \n        body: JSON.stringify({ isActive: data.isActive }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/categories'] });\n      toast({\n        title: \"Success\",\n        description: \"Category status updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category status\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/admin/categories/${id}`, { method: 'DELETE' });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/categories'] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateCategory = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newCategoryName.trim()) return;\n    \n    createCategoryMutation.mutate({\n      name: newCategoryName,\n      description: newCategoryDesc\n    });\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setEditCategoryName(category.name);\n    setEditCategoryDesc(category.description || \"\");\n  };\n\n  const handleUpdateCategory = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingCategory || !editCategoryName.trim()) return;\n    \n    updateCategoryMutation.mutate({\n      id: editingCategory.id,\n      name: editCategoryName,\n      description: editCategoryDesc\n    });\n  };\n\n  const handleToggleCategory = (category: Category) => {\n    toggleCategoryMutation.mutate({\n      id: category.id,\n      isActive: !category.isActive\n    });\n  };\n\n  if (categoriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n        <AdminHeader currentPage=\"categories\" />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-slate-600 mt-4\">Loading categories...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <AdminHeader currentPage=\"categories\" />\n      \n      <div className=\"max-w-6xl mx-auto p-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n          </div>\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-2 flex items-center\">\n            <Settings className=\"mr-3 h-8 w-8 text-blue-600\" />\n            Category Management\n          </h1>\n          <p className=\"text-slate-600\">Create and manage find categories for the platform</p>\n        </div>\n\n        {/* Create New Category */}\n        <Card className=\"mb-8 backdrop-blur-sm bg-white/90 border border-white/20 shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-800 flex items-center\">\n              <Plus className=\"w-5 h-5 mr-2 text-green-600\" />\n              Add New Category\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleCreateCategory} className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"categoryName\">Category Name</Label>\n                  <Input\n                    id=\"categoryName\"\n                    value={newCategoryName}\n                    onChange={(e) => setNewCategoryName(e.target.value)}\n                    placeholder=\"e.g., Web Development\"\n                    className=\"bg-white/80\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"categoryDesc\">Description</Label>\n                  <Input\n                    id=\"categoryDesc\"\n                    value={newCategoryDesc}\n                    onChange={(e) => setNewCategoryDesc(e.target.value)}\n                    placeholder=\"Brief description of the category\"\n                    className=\"bg-white/80\"\n                  />\n                </div>\n              </div>\n              <Button \n                type=\"submit\" \n                disabled={createCategoryMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {createCategoryMutation.isPending ? \"Creating...\" : \"Add Category\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Categories List */}\n        <Card className=\"backdrop-blur-sm bg-white/90 border border-white/20 shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-800\">Existing Categories</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {categories.length === 0 ? (\n              <div className=\"text-center py-12 text-slate-500\">\n                <Shield className=\"w-16 h-16 mx-auto mb-4 text-slate-300\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No categories yet</h3>\n                <p>Create your first category to get started.</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-4\">\n                {categories.map((category: Category) => (\n                  <div key={category.id} className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3\">\n                        <h5 className=\"font-semibold text-slate-900\">{category.name}</h5>\n                        <Badge variant={category.isActive ? \"default\" : \"secondary\"}>\n                          {category.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                      {category.description && (\n                        <p className=\"text-slate-600 text-sm mt-1\">{category.description}</p>\n                      )}\n                      {category.createdAt && (\n                        <p className=\"text-slate-500 text-xs mt-1\">\n                          Created: {new Date(category.createdAt).toLocaleDateString()}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Actions\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEditCategory(category)}>\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleToggleCategory(category)}>\n                            <Shield className=\"w-4 h-4 mr-2\" />\n                            {category.isActive ? \"Deactivate\" : \"Activate\"}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => deleteCategoryMutation.mutate(category.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        {editingCategory && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n            <Card className=\"w-full max-w-md bg-white\">\n              <CardHeader>\n                <CardTitle>Edit Category</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleUpdateCategory} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"editCategoryName\">Category Name</Label>\n                    <Input\n                      id=\"editCategoryName\"\n                      value={editCategoryName}\n                      onChange={(e) => setEditCategoryName(e.target.value)}\n                      placeholder=\"Category name\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"editCategoryDesc\">Description</Label>\n                    <Input\n                      id=\"editCategoryDesc\"\n                      value={editCategoryDesc}\n                      onChange={(e) => setEditCategoryDesc(e.target.value)}\n                      placeholder=\"Category description\"\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => setEditingCategory(null)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\"\n                      disabled={updateCategoryMutation.isPending}\n                    >\n                      {updateCategoryMutation.isPending ? \"Updating...\" : \"Update\"}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13661},"client/src/pages/admin/dashboard-old.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Users, \n  DollarSign, \n  TrendingUp, \n  AlertTriangle,\n  FileText,\n  Settings,\n  Edit\n} from \"lucide-react\";\nimport type { User, Find, Proposal } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: finds = [], isLoading: findsLoading } = useQuery<Find[]>({\n    queryKey: ['/api/admin/finds'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<Proposal[]>({\n    queryKey: ['/api/admin/proposals'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  if (usersLoading || findsLoading || proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading admin data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const totalUsers = users.length;\n  const clientCount = users.filter(u => u.role === 'client').length;\n  const finderCount = users.filter(u => u.role === 'finder').length;\n  const totalFinds = finds.length;\n  const openFinds = finds.filter(f => f.status === 'open').length;\n  const totalProposals = proposals.length;\n  const pendingProposals = proposals.filter(p => p.status === 'pending').length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"dashboard\" />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">Welcome back, manage your platform from here.</p>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8\">\n          <Card className=\"border-blue-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-blue-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2 text-sm sm:text-base\">Total Users</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">{totalUsers}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{clientCount} clients, {finderCount} finders</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-green-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2 text-sm sm:text-base\">Total Finds</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-green-600\">{totalFinds}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{openFinds} currently open</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-purple-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-purple-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-4\">\n                <DollarSign className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2 text-sm sm:text-base\">Total Proposals</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-purple-600\">{totalProposals}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{pendingProposals} pending review</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-finder-red/30\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-finder-red rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-4\">\n                <AlertTriangle className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2 text-sm sm:text-base\">Issues</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-finder-red\">0</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">Reported issues</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-4\">Quick Actions</h2>\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4\">\n            <Link href=\"/admin/users\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <Users className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">Manage Users</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/admin/requests\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <FileText className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-green-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">View Finds</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/admin/withdrawals\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <DollarSign className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-purple-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">Withdrawals</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/admin/blog-posts\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <Edit className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-orange-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">Blog Posts</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/admin/categories\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-teal-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">Categories</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n            <Link href=\"/admin/settings\">\n              <Card className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <Settings className=\"w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 text-gray-600\" />\n                  <p className=\"text-xs sm:text-sm font-medium text-gray-900\">Settings</p>\n                </CardContent>\n              </Card>\n            </Link>\n\n\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8\">\n          {/* Recent Users */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-lg sm:text-xl text-gray-900\">Recent Users</CardTitle>\n              <Link href=\"/admin/users\">\n                <Button variant=\"outline\" size=\"sm\" className=\"text-xs sm:text-sm\">Manage All</Button>\n              </Link>\n            </CardHeader>\n            <CardContent className=\"space-y-3 sm:space-y-4\">\n              {users.length === 0 ? (\n                <div className=\"text-center py-6 sm:py-8 text-gray-500\">\n                  <Users className=\"w-10 h-10 sm:w-12 sm:h-12 mx-auto mb-4 text-gray-300\" />\n                  <p className=\"text-sm sm:text-base\">No users registered yet.</p>\n                </div>\n              ) : (\n                users.slice(-5).reverse().map((user: User) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 sm:p-4 border rounded-lg\">\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-medium text-gray-900 text-sm sm:text-base truncate\">\n                        {user.firstName} {user.lastName}\n                      </h4>\n                      <p className=\"text-gray-600 text-xs sm:text-sm truncate\">{user.email}</p>\n                      <span className={`inline-block mt-1 px-2 py-1 text-xs rounded-full font-medium ${\n                        user.role === 'admin' ? 'bg-finder-red/20 text-finder-red-dark' :\n                        user.role === 'finder' ? 'bg-blue-100 text-blue-700' :\n                        'bg-green-100 text-green-700'\n                      }`}>\n                        {user.role}\n                      </span>\n                    </div>\n                    <div className=\"text-xs sm:text-sm text-gray-500 ml-2\">\n                      {user.isVerified ? '‚úì Verified' : 'Pending'}\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Finds */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-lg sm:text-xl text-gray-900\">Recent Finds</CardTitle>\n              <Link href=\"/admin/requests\">\n                <Button variant=\"outline\" size=\"sm\" className=\"text-xs sm:text-sm\">View All</Button>\n              </Link>\n            </CardHeader>\n            <CardContent className=\"space-y-3 sm:space-y-4\">\n              {finds.length === 0 ? (\n                <div className=\"text-center py-6 sm:py-8 text-gray-500\">\n                  <FileText className=\"w-10 h-10 sm:w-12 sm:h-12 mx-auto mb-4 text-gray-300\" />\n                  <p className=\"text-sm sm:text-base\">No finds submitted yet.</p>\n                </div>\n              ) : (\n                finds.slice(-5).reverse().map((find: Find) => (\n                  <div key={find.id} className=\"flex items-center justify-between p-3 sm:p-4 border rounded-lg\">\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-medium text-gray-900 text-sm sm:text-base truncate\">{find.title}</h4>\n                      <p className=\"text-gray-600 text-xs sm:text-sm\">Budget: ${find.budgetMin} - ${find.budgetMax}</p>\n                      <span className={`inline-block mt-1 px-2 py-1 text-xs rounded-full font-medium ${\n                        find.status === 'open' ? 'bg-green-100 text-green-700' :\n                        find.status === 'in_progress' ? 'bg-blue-100 text-blue-700' :\n                        find.status === 'completed' ? 'bg-purple-100 text-purple-700' :\n                        'bg-gray-100 text-gray-700'\n                      }`}>\n                        {find.status}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12185},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Users, \n  FileText, \n  Star, \n  DollarSign, \n  TrendingUp, \n  Activity,\n  Eye,\n  Calendar,\n  User,\n  Tag,\n  CheckCircle2,\n  XCircle,\n  Play,\n  Clock,\n  ArrowRight,\n  BarChart3,\n  Banknote\n} from \"lucide-react\";\nimport type { Find, User as UserType, Proposal } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface FindWithClient extends Find {\n  client?: UserType;\n}\n\ninterface DashboardStats {\n  totalUsers: number;\n  totalFinds: number;\n  totalProposals: number;\n  activeFinds: number;\n  completedFinds: number;\n  totalRevenue: string;\n  userGrowth: number;\n  findGrowth: number;\n  proposalGrowth: number;\n  revenueGrowth: number;\n}\n\nexport default function AdminDashboardModern() {\n  const { user } = useAuth();\n\n  // Fetch all data\n  const { data: users = [], isLoading: usersLoading } = useQuery<UserType[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: finds = [], isLoading: findsLoading } = useQuery<FindWithClient[]>({\n    queryKey: ['/api/admin/finds'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<Proposal[]>({\n    queryKey: ['/api/admin/proposals'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const isLoading = usersLoading || findsLoading || proposalsLoading;\n\n  // Calculate current month and last month dates\n  const now = new Date();\n  const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n  const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n  const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n  // Filter data by month\n  const currentMonthUsers = users.filter(u => new Date(u.createdAt || 0) >= currentMonthStart);\n  const lastMonthUsers = users.filter(u => {\n    const date = new Date(u.createdAt || 0);\n    return date >= lastMonthStart && date <= lastMonthEnd;\n  });\n\n  const currentMonthFinds = finds.filter(f => new Date(f.createdAt || 0) >= currentMonthStart);\n  const lastMonthFinds = finds.filter(f => {\n    const date = new Date(f.createdAt || 0);\n    return date >= lastMonthStart && date <= lastMonthEnd;\n  });\n\n  const currentMonthProposals = proposals.filter(p => new Date(p.createdAt || 0) >= currentMonthStart);\n  const lastMonthProposals = proposals.filter(p => {\n    const date = new Date(p.createdAt || 0);\n    return date >= lastMonthStart && date <= lastMonthEnd;\n  });\n\n  // Calculate growth percentages\n  const calculateGrowth = (current: number, previous: number) => {\n    if (previous === 0) return current > 0 ? 100 : 0;\n    return ((current - previous) / previous * 100);\n  };\n\n  const formatCurrency = (amount: string | number | null | undefined) => {\n    if (!amount) return '‚Ç¶0';\n    return `‚Ç¶${parseFloat(amount.toString()).toLocaleString()}`;\n  };\n\n  // Calculate dashboard stats\n  const stats: DashboardStats = {\n    totalUsers: users.length,\n    totalFinds: finds.length,\n    totalProposals: proposals.length,\n    activeFinds: finds.filter(f => f.status === 'open' || f.status === 'in_progress').length,\n    completedFinds: finds.filter(f => f.status === 'completed').length,\n    totalRevenue: formatCurrency(\n      finds\n        .filter(f => f.status === 'completed')\n        .reduce((sum, f) => sum + parseFloat(f.budgetMax || f.budgetMin || '0'), 0) +\n      proposals\n        .filter(p => p.status === 'accepted')\n        .reduce((sum, p) => sum + parseFloat(p.amount || '0'), 0)\n    ),\n    userGrowth: calculateGrowth(currentMonthUsers.length, lastMonthUsers.length),\n    findGrowth: calculateGrowth(currentMonthFinds.length, lastMonthFinds.length),\n    proposalGrowth: calculateGrowth(currentMonthProposals.length, lastMonthProposals.length),\n    revenueGrowth: calculateGrowth(\n      currentMonthFinds\n        .filter(f => f.status === 'completed')\n        .reduce((sum, f) => sum + parseFloat(f.budgetMax || f.budgetMin || '0'), 0),\n      lastMonthFinds\n        .filter(f => f.status === 'completed')\n        .reduce((sum, f) => sum + parseFloat(f.budgetMax || f.budgetMin || '0'), 0)\n    )\n  };\n\n  // Get recent finds and users for the bottom tables\n  const recentFinds = finds\n    .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n    .slice(0, 5);\n\n  const recentUsers = users\n    .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n    .slice(0, 5);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-green-100 text-green-800 border-green-200';\n      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'completed': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <CheckCircle2 className=\"w-3 h-3\" />;\n      case 'in_progress': return <Play className=\"w-3 h-3\" />;\n      case 'completed': return <CheckCircle2 className=\"w-3 h-3\" />;\n      case 'cancelled': return <XCircle className=\"w-3 h-3\" />;\n      default: return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'finder': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'client': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"dashboard\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"dashboard\" />\n      \n      {/* Modern Header Section */}\n      <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-8\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-6 sm:mb-8\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl blur opacity-60\"></div>\n              <div className=\"relative p-3 sm:p-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl\">\n                <BarChart3 className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                Admin Dashboard\n              </h1>\n              <p className=\"text-gray-500 dark:text-gray-400 text-sm sm:text-base lg:text-lg font-medium\">\n                Welcome back, {user?.firstName}! Here's your platform overview\n              </p>\n            </div>\n          </div>\n          \n          {/* Main Stats Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n            <Card className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-4 sm:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 font-medium\">Total Users</p>\n                    <p className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">{stats.totalUsers}</p>\n                  </div>\n                  <div className=\"p-2 sm:p-3 bg-blue-500/10 text-blue-600 rounded-xl\">\n                    <Users className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n                  </div>\n                </div>\n                <div className=\"mt-3 sm:mt-4 flex items-center gap-2\">\n                  {stats.userGrowth >= 0 ? (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-500\" />\n                  ) : (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-red-500 rotate-180\" />\n                  )}\n                  <span className={`text-xs sm:text-sm font-medium ${stats.userGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {stats.userGrowth >= 0 ? '+' : ''}{stats.userGrowth.toFixed(1)}%\n                  </span>\n                  <span className=\"text-xs sm:text-sm text-gray-500\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-4 sm:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 font-medium\">Total Finds</p>\n                    <p className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">{stats.totalFinds}</p>\n                  </div>\n                  <div className=\"p-2 sm:p-3 bg-green-500/10 text-green-600 rounded-xl\">\n                    <FileText className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n                  </div>\n                </div>\n                <div className=\"mt-3 sm:mt-4 flex items-center gap-2\">\n                  {stats.findGrowth >= 0 ? (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-500\" />\n                  ) : (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-red-500 rotate-180\" />\n                  )}\n                  <span className={`text-xs sm:text-sm font-medium ${stats.findGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {stats.findGrowth >= 0 ? '+' : ''}{stats.findGrowth.toFixed(1)}%\n                  </span>\n                  <span className=\"text-xs sm:text-sm text-gray-500\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-4 sm:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 font-medium\">Proposals</p>\n                    <p className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">{stats.totalProposals}</p>\n                  </div>\n                  <div className=\"p-2 sm:p-3 bg-purple-500/10 text-purple-600 rounded-xl\">\n                    <Star className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n                  </div>\n                </div>\n                <div className=\"mt-3 sm:mt-4 flex items-center gap-2\">\n                  {stats.proposalGrowth >= 0 ? (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-500\" />\n                  ) : (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-red-500 rotate-180\" />\n                  )}\n                  <span className={`text-xs sm:text-sm font-medium ${stats.proposalGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {stats.proposalGrowth >= 0 ? '+' : ''}{stats.proposalGrowth.toFixed(1)}%\n                  </span>\n                  <span className=\"text-xs sm:text-sm text-gray-500\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-4 sm:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 font-medium\">Revenue</p>\n                    <p className=\"text-xl sm:text-2xl font-bold text-gray-900 dark:text-white\">{stats.totalRevenue}</p>\n                  </div>\n                  <div className=\"p-2 sm:p-3 bg-teal-500/10 text-teal-600 rounded-xl\">\n                    <Banknote className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n                  </div>\n                </div>\n                <div className=\"mt-3 sm:mt-4 flex items-center gap-2\">\n                  {stats.revenueGrowth >= 0 ? (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-green-500\" />\n                  ) : (\n                    <TrendingUp className=\"w-3 h-3 sm:w-4 sm:h-4 text-red-500 rotate-180\" />\n                  )}\n                  <span className={`text-xs sm:text-sm font-medium ${stats.revenueGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {stats.revenueGrowth >= 0 ? '+' : ''}{stats.revenueGrowth.toFixed(1)}%\n                  </span>\n                  <span className=\"text-xs sm:text-sm text-gray-500\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-8 space-y-6 sm:space-y-8\">\n        {/* Recent Finds Table */}\n        <Card className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-lg\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <div>\n                <CardTitle className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white\">Recent Find Requests</CardTitle>\n                <p className=\"text-gray-500 dark:text-gray-400 text-xs sm:text-sm mt-1\">Latest service requests posted on the platform</p>\n              </div>\n              <Link href=\"/admin/requests\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 text-xs sm:text-sm\">\n                  View All\n                  <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Desktop Table View */}\n            <div className=\"hidden lg:block overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200/50 dark:border-gray-700/50\">\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Request Details\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Client & Category\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Budget & Date\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-4 py-3 text-right text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200/50 dark:divide-gray-700/50\">\n                  {recentFinds.map((find) => (\n                    <tr key={find.id} className=\"hover:bg-gray-50/50 dark:hover:bg-gray-700/30 transition-colors duration-150\">\n                      <td className=\"px-4 py-4\">\n                        <div className=\"flex items-start gap-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold text-xs shadow-sm\">\n                            {find.title.charAt(0).toUpperCase()}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">\n                              {find.title}\n                            </h3>\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-1\">\n                              {find.description}\n                            </p>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                            <User className=\"w-3 h-3\" />\n                            <span className=\"truncate\">\n                              {find.client ? `${find.client.firstName} ${find.client.lastName}` : 'Client ID: ' + find.clientId.substring(0, 8)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                            <Tag className=\"w-3 h-3\" />\n                            <span className=\"truncate\">{find.category || 'Uncategorized'}</span>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-2 text-sm font-medium text-gray-900 dark:text-white\">\n                            <Banknote className=\"w-3 h-3\" />\n                            {formatCurrency(find.budgetMin || find.budgetMax || '0')}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400\">\n                            <Calendar className=\"w-3 h-3\" />\n                            {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'N/A'}\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <Badge className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(find.status || '')}`}>\n                          <div className=\"flex items-center gap-1\">\n                            {getStatusIcon(find.status || '')}\n                            {(find.status?.replace('_', ' ')?.charAt(0)?.toUpperCase() || '') + (find.status?.replace('_', ' ')?.slice(1) || '') || 'Unknown'}\n                          </div>\n                        </Badge>\n                      </td>\n                      \n                      <td className=\"px-4 py-4 text-right\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"p-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-lg\">\n                          <Eye className=\"w-3 h-3\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Mobile Card View */}\n            <div className=\"lg:hidden space-y-3\">\n              {recentFinds.map((find) => (\n                <div key={find.id} className=\"bg-gray-50/50 dark:bg-gray-700/50 rounded-lg p-4 border border-gray-200/50 dark:border-gray-600/50\">\n                  <div className=\"flex items-start gap-3 mb-3\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold text-xs shadow-sm flex-shrink-0\">\n                      {find.title.charAt(0).toUpperCase()}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                        {find.title}\n                      </h3>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-2\">\n                        {find.description}\n                      </p>\n                    </div>\n                    <Badge className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(find.status || '')}`}>\n                      <div className=\"flex items-center gap-1\">\n                        {getStatusIcon(find.status || '')}\n                        <span className=\"hidden sm:inline\">{(find.status?.replace('_', ' ')?.charAt(0)?.toUpperCase() || '') + (find.status?.replace('_', ' ')?.slice(1) || '') || 'Unknown'}</span>\n                      </div>\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\n                        <User className=\"w-3 h-3\" />\n                        <span className=\"truncate\">\n                          {find.client ? `${find.client.firstName} ${find.client.lastName}` : 'Client ID: ' + find.clientId.substring(0, 8)}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\n                        <Tag className=\"w-3 h-3\" />\n                        <span className=\"truncate\">{find.category || 'Uncategorized'}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-1 text-right\">\n                      <div className=\"flex items-center justify-end gap-2 font-medium text-gray-900 dark:text-white\">\n                        <Banknote className=\"w-3 h-3\" />\n                        {formatCurrency(find.budgetMin || find.budgetMax || '0')}\n                      </div>\n                      <div className=\"flex items-center justify-end gap-2 text-gray-500 dark:text-gray-400\">\n                        <Calendar className=\"w-3 h-3\" />\n                        {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'N/A'}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-3 flex justify-end\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"p-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-lg\">\n                      <Eye className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Users Table */}\n        <Card className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-lg\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <div>\n                <CardTitle className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white\">Recent Users</CardTitle>\n                <p className=\"text-gray-500 dark:text-gray-400 text-xs sm:text-sm mt-1\">Latest users who joined the platform</p>\n              </div>\n              <Link href=\"/admin/users\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 text-xs sm:text-sm\">\n                  View All\n                  <ArrowRight className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Desktop Table View */}\n            <div className=\"hidden lg:block overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200/50 dark:border-gray-700/50\">\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      User\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Contact\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Role & Status\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Join Date\n                    </th>\n                    <th className=\"px-4 py-3 text-right text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200/50 dark:divide-gray-700/50\">\n                  {recentUsers.map((userData) => (\n                    <tr key={userData.id} className=\"hover:bg-gray-50/50 dark:hover:bg-gray-700/30 transition-colors duration-150\">\n                      <td className=\"px-4 py-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold text-xs shadow-sm\">\n                            {userData.firstName?.charAt(0) || ''}{userData.lastName?.charAt(0) || ''}\n                          </div>\n                          <div>\n                            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                              {userData.firstName} {userData.lastName}\n                            </h3>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                          {userData.email}\n                        </div>\n                        {userData.phone && (\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            {userData.phone}\n                          </div>\n                        )}\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Badge className={`px-2 py-1 rounded-full text-xs font-medium border ${getRoleColor(userData.role)}`}>\n                            {userData.role.charAt(0).toUpperCase() + userData.role.slice(1)}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {userData.isVerified && (\n                            <Badge className=\"bg-green-100 text-green-800 border-green-200 px-2 py-1 rounded-full text-xs\">\n                              Verified\n                            </Badge>\n                          )}\n                          {userData.isBanned && (\n                            <Badge className=\"bg-red-100 text-red-800 border-red-200 px-2 py-1 rounded-full text-xs\">\n                              Banned\n                            </Badge>\n                          )}\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4\">\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-4 py-4 text-right\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"p-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-lg\">\n                          <Eye className=\"w-3 h-3\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Mobile Card View */}\n            <div className=\"lg:hidden space-y-3\">\n              {recentUsers.map((userData) => (\n                <div key={userData.id} className=\"bg-gray-50/50 dark:bg-gray-700/50 rounded-lg p-4 border border-gray-200/50 dark:border-gray-600/50\">\n                  <div className=\"flex items-start justify-between gap-3 mb-3\">\n                    <div className=\"flex items-center gap-3 flex-1\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold text-sm shadow-sm flex-shrink-0\">\n                        {userData.firstName?.charAt(0) || ''}{userData.lastName?.charAt(0) || ''}\n                      </div>\n                      <div className=\"min-w-0 flex-1\">\n                        <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                          {userData.firstName} {userData.lastName}\n                        </h3>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400 truncate\">\n                          {userData.email}\n                        </p>\n                        {userData.phone && (\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            {userData.phone}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" className=\"p-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-lg flex-shrink-0\">\n                      <Eye className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between gap-4 text-xs\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={`px-2 py-1 rounded-full text-xs font-medium border ${getRoleColor(userData.role)}`}>\n                        {userData.role.charAt(0).toUpperCase() + userData.role.slice(1)}\n                      </Badge>\n                      {userData.isVerified && (\n                        <Badge className=\"bg-green-100 text-green-800 border-green-200 px-2 py-1 rounded-full text-xs\">\n                          Verified\n                        </Badge>\n                      )}\n                      {userData.isBanned && (\n                        <Badge className=\"bg-red-100 text-red-800 border-red-200 px-2 py-1 rounded-full text-xs\">\n                          Banned\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-gray-500 dark:text-gray-400 text-xs\">\n                      {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":32713},"client/src/pages/admin/faq-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Plus,\n  Edit,\n  Trash2,\n  Search,\n  ArrowLeft,\n  HelpCircle,\n  Tag,\n  Eye,\n  EyeOff,\n  Save\n} from \"lucide-react\";\nimport type { FAQ } from \"@shared/schema\";\n\ninterface Category {\n  id: string;\n  name: string;\n  isActive: boolean;\n}\n\nexport default function AdminFAQManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingFAQ, setEditingFAQ] = useState<FAQ | null>(null);\n\n  const { data: faqs = [], isLoading: isLoadingFAQs } = useQuery<FAQ[]>({\n    queryKey: ['/api/admin/faqs'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: categories = [], isLoading: isLoadingCategories } = useQuery<Category[]>({\n    queryKey: ['/api/admin/faq-categories'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (faqData: any) => {\n      return apiRequest('/api/admin/faqs', {\n        method: 'POST',\n        body: JSON.stringify(faqData)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/faqs'] });\n      toast({ title: \"FAQ created successfully\" });\n      setIsCreateModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error creating FAQ\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, ...faqData }: any) => {\n      return apiRequest(`/api/admin/faqs/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(faqData)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/faqs'] });\n      toast({ title: \"FAQ updated successfully\" });\n      setIsEditModalOpen(false);\n      setEditingFAQ(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error updating FAQ\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/admin/faqs/${id}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/faqs'] });\n      toast({ title: \"FAQ deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error deleting FAQ\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const filteredFAQs = faqs.filter(faq => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.tags?.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = selectedCategory === \"all\" || faq.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const FAQForm = ({ faq, onSubmit, isEditing = false }: { faq?: FAQ, onSubmit: (data: any) => void, isEditing?: boolean }) => {\n    const [formData, setFormData] = useState({\n      question: faq?.question || \"\",\n      answer: faq?.answer || \"\",\n      category: faq?.category || \"\",\n      tags: faq?.tags?.join(\", \") || \"\",\n      isActive: faq?.isActive ?? true,\n      sortOrder: faq?.sortOrder || 0\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      const tagsArray = formData.tags.split(\",\").map(tag => tag.trim()).filter(Boolean);\n      onSubmit({\n        ...formData,\n        tags: tagsArray,\n        ...(isEditing && { id: faq?.id })\n      });\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"question\">Question</Label>\n          <Input\n            id=\"question\"\n            value={formData.question}\n            onChange={(e) => setFormData(prev => ({ ...prev, question: e.target.value }))}\n            placeholder=\"Enter FAQ question\"\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"answer\">Answer</Label>\n          <Textarea\n            id=\"answer\"\n            value={formData.answer}\n            onChange={(e) => setFormData(prev => ({ ...prev, answer: e.target.value }))}\n            placeholder=\"Enter FAQ answer\"\n            rows={4}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"category\">Category</Label>\n          <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select category\" />\n            </SelectTrigger>\n            <SelectContent>\n              {categories.filter(cat => cat.isActive).map(category => (\n                <SelectItem key={category.id} value={category.name}>{category.name}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"tags\">Tags (comma separated)</Label>\n          <Input\n            id=\"tags\"\n            value={formData.tags}\n            onChange={(e) => setFormData(prev => ({ ...prev, tags: e.target.value }))}\n            placeholder=\"e.g., registration, payment, tokens\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"sortOrder\">Sort Order</Label>\n          <Input\n            id=\"sortOrder\"\n            type=\"number\"\n            value={formData.sortOrder}\n            onChange={(e) => setFormData(prev => ({ ...prev, sortOrder: parseInt(e.target.value) || 0 }))}\n            placeholder=\"0\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"isActive\"\n            checked={formData.isActive}\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n          />\n          <Label htmlFor=\"isActive\">Active</Label>\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          {isEditing ? \"Update FAQ\" : \"Create FAQ\"}\n        </Button>\n      </form>\n    );\n  };\n\n  if (isLoadingFAQs || isLoadingCategories) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"faqs\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading FAQs...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n      <AdminHeader currentPage=\"faqs\" />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n                <HelpCircle className=\"mr-3 h-8 w-8 text-blue-600\" />\n                FAQ Management\n              </h1>\n              <p className=\"text-gray-600\">Manage frequently asked questions for the help center</p>\n            </div>\n            <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add FAQ\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New FAQ</DialogTitle>\n                </DialogHeader>\n                <FAQForm onSubmit={(data) => createMutation.mutate(data)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search FAQs...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Filter by category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.filter(cat => cat.isActive).map(category => (\n                    <SelectItem key={category.id} value={category.name}>{category.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* FAQs List */}\n        <div className=\"space-y-4\">\n          {filteredFAQs.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <HelpCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No FAQs found</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  {searchTerm || selectedCategory !== \"all\" \n                    ? \"Try adjusting your search or filter criteria.\" \n                    : \"Get started by creating your first FAQ.\"}\n                </p>\n                {!searchTerm && selectedCategory === \"all\" && (\n                  <Button onClick={() => setIsCreateModalOpen(true)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create First FAQ\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            filteredFAQs.map((faq) => (\n              <Card key={faq.id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CardTitle className=\"text-lg\">{faq.question}</CardTitle>\n                        {!faq.isActive && (\n                          <EyeOff className=\"w-4 h-4 text-gray-400\" />\n                        )}\n                        {faq.isActive && (\n                          <Eye className=\"w-4 h-4 text-green-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"secondary\">{faq.category}</Badge>\n                        {faq.tags?.map(tag => (\n                          <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                            <Tag className=\"w-3 h-3 mr-1\" />\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setEditingFAQ(faq);\n                          setIsEditModalOpen(true);\n                        }}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (confirm('Are you sure you want to delete this FAQ?')) {\n                            deleteMutation.mutate(faq.id);\n                          }\n                        }}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-700 leading-relaxed\">{faq.answer}</p>\n                  <div className=\"mt-4 text-xs text-gray-500\">\n                    Created: {faq.createdAt ? new Date(faq.createdAt).toLocaleDateString() : 'N/A'}\n                    {faq.updatedAt && faq.updatedAt !== faq.createdAt && (\n                      <span className=\"ml-4\">\n                        Updated: {new Date(faq.updatedAt).toLocaleDateString()}\n                      </span>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Edit Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit FAQ</DialogTitle>\n            </DialogHeader>\n            {editingFAQ && (\n              <FAQForm \n                faq={editingFAQ} \n                onSubmit={(data) => updateMutation.mutate(data)} \n                isEditing={true}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":14952},"client/src/pages/admin/financial-dashboard.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  DollarSign, \n  TrendingUp, \n  TrendingDown, \n  Calendar,\n  Download,\n  Eye,\n  Filter,\n  Coins,\n  CreditCard,\n  ArrowUpRight,\n  ArrowDownRight\n} from \"lucide-react\";\n\ninterface Transaction {\n  id: string;\n  userId?: string;\n  finderId?: string;\n  amount: number;\n  type: 'findertoken_purchase' | 'proposal' | 'escrow_funding' | 'withdrawal' | 'grant';\n  description: string;\n  reference?: string;\n  createdAt: string;\n  user?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    role: string;\n  };\n  finder?: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n  };\n}\n\ninterface WithdrawalRequest {\n  id: string;\n  finderId: string;\n  amount: string;\n  paymentMethod: string;\n  status: 'pending' | 'processing' | 'approved' | 'rejected';\n  requestedAt: string;\n  processedAt?: string;\n  finder: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n  };\n}\n\ninterface Contract {\n  id: string;\n  amount: string;\n  escrowStatus: 'pending' | 'held' | 'released' | 'completed';\n  createdAt: string;\n  clientId: string;\n  finderId: string;\n  client: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  finder: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n  };\n}\n\ninterface FinancialSummary {\n  totalRevenue: number;\n  totalWithdrawals: number;\n  pendingEscrow: number;\n  tokenSales: number;\n  dailyRevenue: Array<{ date: string; amount: number }>;\n  weeklyRevenue: Array<{ week: string; amount: number }>;\n  monthlyRevenue: Array<{ month: string; amount: number }>;\n  yearlyRevenue: Array<{ year: string; amount: number }>;\n}\n\nexport default function FinancialDashboard() {\n  const { user } = useAuth();\n  const [dateFilter, setDateFilter] = useState('all');\n  const [customStartDate, setCustomStartDate] = useState('');\n  const [customEndDate, setCustomEndDate] = useState('');\n  const [transactionTypeFilter, setTransactionTypeFilter] = useState('all');\n  const [viewMode, setViewMode] = useState<'daily' | 'weekly' | 'monthly' | 'yearly'>('monthly');\n\n  // Fetch all financial data\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/admin/transactions'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: withdrawals = [], isLoading: withdrawalsLoading } = useQuery<WithdrawalRequest[]>({\n    queryKey: ['/api/admin/withdrawals'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const { data: contracts = [], isLoading: contractsLoading } = useQuery<Contract[]>({\n    queryKey: ['/api/admin/contracts'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const isLoading = transactionsLoading || withdrawalsLoading || contractsLoading;\n\n  // Filter transactions based on date and type\n  const filteredTransactions = transactions.filter(transaction => {\n    const transactionDate = new Date(transaction.createdAt);\n    const now = new Date();\n    \n    // Date filtering\n    if (dateFilter === 'today') {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      return transactionDate >= today;\n    } else if (dateFilter === 'week') {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      return transactionDate >= weekAgo;\n    } else if (dateFilter === 'month') {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      return transactionDate >= monthAgo;\n    } else if (dateFilter === 'year') {\n      const yearAgo = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n      return transactionDate >= yearAgo;\n    } else if (dateFilter === 'custom' && customStartDate && customEndDate) {\n      const startDate = new Date(customStartDate);\n      const endDate = new Date(customEndDate);\n      endDate.setHours(23, 59, 59, 999);\n      return transactionDate >= startDate && transactionDate <= endDate;\n    }\n    \n    // Type filtering\n    if (transactionTypeFilter !== 'all') {\n      return transaction.type === transactionTypeFilter;\n    }\n    \n    return true;\n  });\n\n  // Calculate financial summary\n  const financialSummary: FinancialSummary = {\n    totalRevenue: filteredTransactions\n      .filter(t => ['findertoken_purchase', 'escrow_funding'].includes(t.type))\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0),\n    totalWithdrawals: withdrawals\n      .filter(w => w.status === 'approved')\n      .reduce((sum, w) => sum + parseFloat(w.amount), 0),\n    pendingEscrow: contracts\n      .filter(c => c.escrowStatus === 'held')\n      .reduce((sum, c) => sum + parseFloat(c.amount), 0),\n    tokenSales: filteredTransactions\n      .filter(t => t.type === 'findertoken_purchase')\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0),\n    dailyRevenue: [],\n    weeklyRevenue: [],\n    monthlyRevenue: [],\n    yearlyRevenue: []\n  };\n\n  // Group transactions by time periods\n  const groupTransactionsByPeriod = (period: 'daily' | 'weekly' | 'monthly' | 'yearly') => {\n    const grouped = filteredTransactions\n      .filter(t => ['findertoken_purchase', 'escrow_funding'].includes(t.type))\n      .reduce((acc, transaction) => {\n        const date = new Date(transaction.createdAt);\n        let key: string;\n\n        switch (period) {\n          case 'daily':\n            key = date.toISOString().split('T')[0];\n            break;\n          case 'weekly':\n            const weekStart = new Date(date);\n            weekStart.setDate(date.getDate() - date.getDay());\n            key = `Week of ${weekStart.toISOString().split('T')[0]}`;\n            break;\n          case 'monthly':\n            key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n            break;\n          case 'yearly':\n            key = date.getFullYear().toString();\n            break;\n          default:\n            key = date.toISOString().split('T')[0];\n        }\n\n        if (!acc[key]) {\n          acc[key] = 0;\n        }\n        acc[key] += Math.abs(transaction.amount);\n        return acc;\n      }, {} as Record<string, number>);\n\n    return Object.entries(grouped)\n      .map(([key, amount]) => ({ [period === 'weekly' ? 'week' : period === 'monthly' ? 'month' : period === 'yearly' ? 'year' : 'date']: key, amount }))\n      .sort((a, b) => {\n        const aKey = Object.keys(a)[0];\n        const bKey = Object.keys(b)[0];\n        return a[aKey].localeCompare(b[bKey]);\n      });\n  };\n\n  const periodData = groupTransactionsByPeriod(viewMode);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN'\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-NG', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'findertoken_purchase':\n        return <Coins className=\"w-4 h-4 text-green-600\" />;\n      case 'escrow_funding':\n        return <CreditCard className=\"w-4 h-4 text-blue-600\" />;\n      case 'withdrawal':\n        return <ArrowDownRight className=\"w-4 h-4 text-red-600\" />;\n      case 'grant':\n        return <ArrowUpRight className=\"w-4 h-4 text-purple-600\" />;\n      default:\n        return <DollarSign className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const exportToCSV = () => {\n    const csvData = filteredTransactions.map(transaction => ({\n      Date: formatDate(transaction.createdAt),\n      Type: transaction.type,\n      Amount: transaction.amount,\n      Description: transaction.description,\n      User: transaction.user ? `${transaction.user.firstName} ${transaction.user.lastName}` : \n            transaction.finder ? `${transaction.finder.user.firstName} ${transaction.finder.user.lastName}` : 'N/A',\n      Reference: transaction.reference || 'N/A'\n    }));\n\n    const csv = [\n      Object.keys(csvData[0]).join(','),\n      ...csvData.map(row => Object.values(row).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `financial-statement-${dateFilter}-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AdminHeader currentPage=\"financial\" />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading financial data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"financial\" />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">Financial Dashboard</h1>\n          <p className=\"text-gray-600 mt-2\">Comprehensive financial overview and accounting statements</p>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Filter className=\"w-5 h-5\" />\n              <span>Filters & Controls</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n              <div>\n                <Label>Date Range</Label>\n                <Select value={dateFilter} onValueChange={setDateFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Time</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">Last 7 Days</SelectItem>\n                    <SelectItem value=\"month\">Last 30 Days</SelectItem>\n                    <SelectItem value=\"year\">Last Year</SelectItem>\n                    <SelectItem value=\"custom\">Custom Range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {dateFilter === 'custom' && (\n                <>\n                  <div>\n                    <Label>Start Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={customStartDate}\n                      onChange={(e) => setCustomStartDate(e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label>End Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={customEndDate}\n                      onChange={(e) => setCustomEndDate(e.target.value)}\n                    />\n                  </div>\n                </>\n              )}\n\n              <div>\n                <Label>Transaction Type</Label>\n                <Select value={transactionTypeFilter} onValueChange={setTransactionTypeFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"findertoken_purchase\">Token Purchases</SelectItem>\n                    <SelectItem value=\"escrow_funding\">Escrow Funding</SelectItem>\n                    <SelectItem value=\"withdrawal\">Withdrawals</SelectItem>\n                    <SelectItem value=\"grant\">Token Grants</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>View Mode</Label>\n                <Select value={viewMode} onValueChange={(value: any) => setViewMode(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"daily\">Daily</SelectItem>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-end\">\n                <Button onClick={exportToCSV} className=\"flex items-center space-x-2\">\n                  <Download className=\"w-4 h-4\" />\n                  <span>Export CSV</span>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Financial Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(financialSummary.totalRevenue)}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Token Sales</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {formatCurrency(financialSummary.tokenSales)}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-blue-100 rounded-full\">\n                  <Coins className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Pending Escrow</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">\n                    {formatCurrency(financialSummary.pendingEscrow)}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-orange-100 rounded-full\">\n                  <CreditCard className=\"w-6 h-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Withdrawals</p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {formatCurrency(financialSummary.totalWithdrawals)}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <TrendingDown className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Period-based Revenue Chart */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-5 h-5\" />\n              <span>Revenue by {viewMode.charAt(0).toUpperCase() + viewMode.slice(1)}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {periodData.map((item, index) => {\n                const periodKey = Object.keys(item)[0];\n                const period = item[periodKey];\n                const amount = item.amount;\n                \n                return (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <span className=\"font-medium\">{period}</span>\n                    <span className=\"text-lg font-bold text-green-600\">\n                      {formatCurrency(amount)}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Detailed Transactions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Eye className=\"w-5 h-5\" />\n              <span>Transaction Details</span>\n              <Badge variant=\"outline\">\n                {filteredTransactions.length} transactions\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date & Time</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead className=\"text-right\">Amount</TableHead>\n                    <TableHead>Reference</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTransactions.slice(0, 50).map((transaction) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell className=\"font-mono text-sm\">\n                        {formatDate(transaction.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {getTransactionIcon(transaction.type)}\n                          <Badge variant={\n                            transaction.type === 'findertoken_purchase' ? 'default' :\n                            transaction.type === 'escrow_funding' ? 'secondary' :\n                            transaction.type === 'withdrawal' ? 'destructive' :\n                            'outline'\n                          }>\n                            {transaction.type.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {transaction.user ? (\n                          <div>\n                            <div className=\"font-medium\">\n                              {transaction.user.firstName} {transaction.user.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {transaction.user.email}\n                            </div>\n                          </div>\n                        ) : transaction.finder ? (\n                          <div>\n                            <div className=\"font-medium\">\n                              {transaction.finder.user.firstName} {transaction.finder.user.lastName}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {transaction.finder.user.email}\n                            </div>\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">N/A</span>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"max-w-md truncate\">\n                        {transaction.description}\n                      </TableCell>\n                      <TableCell className=\"text-right font-mono\">\n                        <span className={\n                          transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\n                        }>\n                          {transaction.amount > 0 ? '+' : ''}\n                          {formatCurrency(Math.abs(transaction.amount))}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {transaction.reference || '-'}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            \n            {filteredTransactions.length > 50 && (\n              <div className=\"mt-4 text-center\">\n                <p className=\"text-sm text-gray-500\">\n                  Showing first 50 transactions. Export CSV for complete data.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21642},"client/src/pages/admin/finder-levels-backup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, Crown, Award, Navigation, Search, User, CheckCircle, Star } from \"lucide-react\";\n\ninterface FinderLevel {\n  id: string;\n  name: string;\n  description: string;\n  minEarnedAmount: string;\n  minJobsCompleted: number;\n  minReviewPercentage: number;\n  icon: string;\n  iconUrl?: string;\n  color: string;\n  order: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst iconMap = {\n  'User': User,\n  'Navigation': Navigation,\n  'Search': Search,\n  'Award': Award,\n  'Crown': Crown,\n};\n\nexport default function AdminFinderLevels() {\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingLevel, setEditingLevel] = useState<FinderLevel | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    minEarnedAmount: \"0\",\n    minJobsCompleted: 0,\n    minReviewPercentage: 0,\n    icon: \"User\",\n    iconUrl: \"\",\n    color: \"#6b7280\",\n    order: 1,\n    isActive: true\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: levels = [], isLoading } = useQuery({\n    queryKey: ['admin', 'finder-levels'],\n    queryFn: () => apiRequest('/api/admin/finder-levels')\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/admin/finder-levels', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'finder-levels'] });\n      setIsCreating(false);\n      resetForm();\n      toast({ title: \"Success\", description: \"Finder level created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", title: \"Error\", description: error.message });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => \n      apiRequest(`/api/admin/finder-levels/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data)\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'finder-levels'] });\n      setEditingLevel(null);\n      resetForm();\n      toast({ title: \"Success\", description: \"Finder level updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", title: \"Error\", description: error.message });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => \n      apiRequest(`/api/admin/finder-levels/${id}`, {\n        method: 'DELETE'\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'finder-levels'] });\n      toast({ title: \"Success\", description: \"Finder level deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", title: \"Error\", description: error.message });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      minEarnedAmount: \"0\",\n      minJobsCompleted: 0,\n      minReviewPercentage: 0,\n      icon: \"User\",\n      iconUrl: \"\",\n      color: \"#6b7280\",\n      order: (levels as FinderLevel[]).length + 1,\n      isActive: true\n    });\n  };\n\n  const handleEdit = (level: FinderLevel) => {\n    setEditingLevel(level);\n    setFormData({\n      name: level.name,\n      description: level.description || \"\",\n      minEarnedAmount: level.minEarnedAmount,\n      minJobsCompleted: level.minJobsCompleted,\n      minReviewPercentage: level.minReviewPercentage,\n      icon: level.icon,\n      iconUrl: level.iconUrl || \"\",\n      color: level.color,\n      order: level.order,\n      isActive: level.isActive\n    });\n    setIsCreating(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingLevel) {\n      updateMutation.mutate({ id: editingLevel.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this finder level?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading finder levels...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"finder-levels\" />\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n        {/* Modern Header Section */}\n        <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50 sticky top-0 z-10\">\n          <div className=\"max-w-7xl mx-auto px-6 py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl blur opacity-60\"></div>\n                  <div className=\"relative p-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl\">\n                    <Award className=\"w-7 h-7 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                    Finder Levels\n                  </h1>\n                  <p className=\"text-gray-500 dark:text-gray-400 font-medium\">Performance tier management</p>\n                </div>\n              </div>\n              \n              {!isCreating && !editingLevel && (\n                <Button \n                  onClick={() => setIsCreating(true)}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Create Level\n                </Button>\n              )}\n            </div>\n            \n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-4 gap-4 mt-6\">\n              <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                    <Award className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Total Levels</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{levels.length}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-green-500/10 text-green-600 rounded-lg\">\n                    <CheckCircle className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Active</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{levels.filter((l: FinderLevel) => l.isActive).length}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-purple-500/10 text-purple-600 rounded-lg\">\n                    <Crown className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Highest Tier</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{levels.length > 0 ? Math.max(...levels.map((l: FinderLevel) => l.order)) : 0}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-amber-500/10 text-amber-600 rounded-lg\">\n                    <Star className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Avg Min Score</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                      {levels.length > 0 ? Math.round(levels.reduce((acc: number, l: FinderLevel) => acc + l.minReviewPercentage, 0) / levels.length) : 0}%\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Modern Modal Form Overlay */}\n        {(isCreating || editingLevel) && (\n          <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto\">\n              {/* Modal Header */}\n              <div className=\"sticky top-0 bg-white dark:bg-gray-800 p-8 border-b border-gray-200 dark:border-gray-700 rounded-t-3xl\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl shadow-lg\">\n                      {editingLevel ? <Edit className=\"w-7 h-7 text-white\" /> : <Plus className=\"w-7 h-7 text-white\" />}\n                    </div>\n                    <div>\n                      <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                        {editingLevel ? 'Edit Finder Level' : 'Create New Finder Level'}\n                      </h2>\n                      <p className=\"text-gray-500 dark:text-gray-400 text-lg\">\n                        {editingLevel ? 'Modify the selected performance tier' : 'Add a new performance tier to the system'}\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"lg\"\n                    onClick={() => {\n                      setIsCreating(false);\n                      setEditingLevel(null);\n                      setFormData({\n                        name: \"\",\n                        description: \"\",\n                        minEarnedAmount: \"\",\n                        minJobsCompleted: 0,\n                        minReviewPercentage: 0,\n                        icon: \"User\",\n                        iconUrl: \"\",\n                        color: \"#3B82F6\",\n                        order: 1,\n                        isActive: true,\n                      });\n                    }}\n                    className=\"p-3 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Modal Content */}\n              <div className=\"p-8\">\n              <form onSubmit={handleSubmit} className=\"space-y-8\">\n                {/* Basic Information Section */}\n                <div className=\"bg-gray-50 dark:bg-gray-900/50 p-6 rounded-2xl\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\n                    <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                      <Award className=\"w-4 h-4\" />\n                    </div>\n                    Basic Information\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Level Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"e.g., Novice, Expert, Master\"\n                        className=\"h-12 px-4 bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"order\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Display Order</Label>\n                      <Input\n                        id=\"order\"\n                        type=\"number\"\n                        value={formData.order}\n                        onChange={(e) => setFormData(prev => ({ ...prev, order: parseInt(e.target.value) }))}\n                        min=\"1\"\n                        className=\"h-12 px-4 bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={formData.description}\n                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Describe this level and its requirements in detail\"\n                      rows={4}\n                      className=\"px-4 py-3 bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                {/* Requirements Section */}\n                <div className=\"bg-gray-50 dark:bg-gray-900/50 p-6 rounded-2xl\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\n                    <div className=\"p-2 bg-green-500/10 text-green-600 rounded-lg\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                    </div>\n                    Performance Requirements\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe this finder level...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"minEarnedAmount\">Minimum Earned Amount (‚Ç¶)</Label>\n                  <Input\n                    id=\"minEarnedAmount\"\n                    type=\"number\"\n                    value={formData.minEarnedAmount}\n                    onChange={(e) => setFormData(prev => ({ ...prev, minEarnedAmount: e.target.value }))}\n                    placeholder=\"0\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"minJobsCompleted\">Minimum Jobs Completed</Label>\n                  <Input\n                    id=\"minJobsCompleted\"\n                    type=\"number\"\n                    value={formData.minJobsCompleted}\n                    onChange={(e) => setFormData(prev => ({ ...prev, minJobsCompleted: parseInt(e.target.value) }))}\n                    placeholder=\"0\"\n                    min=\"0\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"minReviewPercentage\">Minimum Review Score (%)</Label>\n                  <Input\n                    id=\"minReviewPercentage\"\n                    type=\"number\"\n                    value={formData.minReviewPercentage}\n                    onChange={(e) => setFormData(prev => ({ ...prev, minReviewPercentage: parseInt(e.target.value) }))}\n                    placeholder=\"0\"\n                    min=\"0\"\n                    max=\"100\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"icon\">Icon</Label>\n                  <select\n                    id=\"icon\"\n                    value={formData.icon}\n                    onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  >\n                    <option value=\"User\">User</option>\n                    <option value=\"Navigation\">Navigation</option>\n                    <option value=\"Search\">Search</option>\n                    <option value=\"Award\">Award</option>\n                    <option value=\"Crown\">Crown</option>\n                  </select>\n                  \n                  <div className=\"text-sm text-gray-600\">\n                    Or upload a custom icon:\n                  </div>\n                  \n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={2097152}\n                    buttonClassName=\"w-full\"\n                    onGetUploadParameters={async () => {\n                      const response = await fetch('/api/objects/upload', { method: 'POST' });\n                      const data = await response.json();\n                      return { method: 'PUT' as const, url: data.uploadURL };\n                    }}\n                    onComplete={(result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n                      if (result.successful.length > 0) {\n                        const uploadURL = result.successful[0].uploadURL;\n                        if (uploadURL) {\n                          // Store the upload URL directly for now\n                          setFormData(prev => ({ \n                            ...prev, \n                            iconUrl: uploadURL \n                          }));\n                          toast({ \n                            title: \"Success\", \n                            description: \"Icon uploaded successfully\" \n                          });\n                        }\n                      }\n                    }}\n                  >\n                    Upload Custom Icon\n                  </ObjectUploader>\n                  \n                  {formData.iconUrl && (\n                    <div className=\"flex items-center gap-2 p-2 bg-green-50 border border-green-200 rounded\">\n                      <img \n                        src={formData.iconUrl} \n                        alt=\"Custom icon\" \n                        className=\"w-6 h-6 object-cover rounded\" \n                      />\n                      <span className=\"text-green-700 text-sm\">Custom icon uploaded</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setFormData(prev => ({ ...prev, iconUrl: \"\" }))}\n                        className=\"ml-auto h-6 w-6 p-0 text-green-700 hover:bg-green-100\"\n                      >\n                        √ó\n                      </Button>\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"color\">Color</Label>\n                  <Input\n                    id=\"color\"\n                    type=\"color\"\n                    value={formData.color}\n                    onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                  />\n                </div>\n\n                <div className=\"md:col-span-2 flex gap-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingLevel ? 'Update Level' : 'Create Level'}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreating(false);\n                      setEditingLevel(null);\n                      resetForm();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n              </div>\n            </div>\n          </div>\n        )}\n\n\n\n        {/* Modern Levels Grid - Two Columns */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {(levels as FinderLevel[]).map((level: FinderLevel) => {\n            const IconComponent = iconMap[level.icon as keyof typeof iconMap] || User;\n            \n            return (\n              <div key={level.id} className=\"group relative\">\n                {/* Gradient border effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-2xl blur-sm opacity-0 group-hover:opacity-75 transition-opacity duration-300\"></div>\n                \n                <div className=\"relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm p-8 rounded-2xl border border-gray-200/50 dark:border-gray-700/50 shadow-lg hover:shadow-2xl transition-all duration-300\">\n                  {/* Level Header */}\n                  <div className=\"flex items-start justify-between mb-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"relative\">\n                        <div \n                          className=\"absolute inset-0 rounded-2xl blur opacity-60\"\n                          style={{ backgroundColor: level.color }}\n                        ></div>\n                        <div \n                          className=\"relative p-4 rounded-2xl shadow-lg\"\n                          style={{ backgroundColor: level.color }}\n                        >\n                          {level.iconUrl ? (\n                            <img \n                              src={level.iconUrl} \n                              alt={level.name} \n                              className=\"w-8 h-8 object-cover rounded filter brightness-0 invert\"\n                            />\n                          ) : (\n                            <IconComponent className=\"w-8 h-8 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">{level.name}</h3>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge \n                            variant={level.isActive ? \"default\" : \"secondary\"}\n                            className=\"px-3 py-1 rounded-full text-xs font-medium\"\n                            style={{ \n                              backgroundColor: level.isActive ? level.color + '20' : undefined,\n                              color: level.isActive ? level.color : undefined,\n                              borderColor: level.isActive ? level.color + '40' : undefined \n                            }}\n                          >\n                            Tier {level.order}\n                          </Badge>\n                          {level.isActive && (\n                            <div className=\"flex items-center gap-1\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                              <span className=\"text-xs text-green-600 font-medium\">Active</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Action Buttons */}\n                    <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(level)}\n                        className=\"p-3 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-xl transition-colors duration-200\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(level.id)}\n                        className=\"p-3 hover:bg-red-50 hover:border-red-300 hover:text-red-600 rounded-xl transition-colors duration-200\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Description */}\n                  <p className=\"text-gray-600 dark:text-gray-300 mb-6 leading-relaxed\">{level.description}</p>\n                  \n                  {/* Requirements Grid */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-gray-50/80 dark:bg-gray-700/50 rounded-xl border border-gray-200/50 dark:border-gray-600/50\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-green-500/10 text-green-600 rounded-lg\">\n                          <Star className=\"w-4 h-4\" />\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Minimum Earned</span>\n                      </div>\n                      <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                        ‚Ç¶{parseFloat(level.minEarnedAmount).toLocaleString()}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-50/80 dark:bg-gray-700/50 rounded-xl border border-gray-200/50 dark:border-gray-600/50\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                          <Award className=\"w-4 h-4\" />\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Completed Jobs</span>\n                      </div>\n                      <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                        {level.minJobsCompleted}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-50/80 dark:bg-gray-700/50 rounded-xl border border-gray-200/50 dark:border-gray-600/50\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-purple-500/10 text-purple-600 rounded-lg\">\n                          <CheckCircle className=\"w-4 h-4\" />\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Review Score</span>\n                      </div>\n                      <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                        {level.minReviewPercentage}%\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29726},"client/src/pages/admin/finder-levels.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, Crown, Award, Navigation, Search, User, CheckCircle, Star, X } from \"lucide-react\";\n\ninterface FinderLevel {\n  id: string;\n  name: string;\n  description: string;\n  minEarnedAmount: string;\n  minJobsCompleted: number;\n  minReviewPercentage: number;\n  icon: string;\n  iconUrl?: string;\n  color: string;\n  order: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst iconMap = {\n  'User': User,\n  'Navigation': Navigation,\n  'Search': Search,\n  'Award': Award,\n  'Crown': Crown,\n};\n\nexport default function AdminFinderLevels() {\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingLevel, setEditingLevel] = useState<FinderLevel | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    minEarnedAmount: \"\",\n    minJobsCompleted: 0,\n    minReviewPercentage: 0,\n    icon: \"User\",\n    iconUrl: \"\",\n    color: \"#3B82F6\",\n    order: 1,\n    isActive: true,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: levels = [], isLoading } = useQuery<FinderLevel[]>({\n    queryKey: [\"/api/admin/finder-levels\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"/api/admin/finder-levels\", { method: \"POST\", body: JSON.stringify(data) });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/finder-levels\"] });\n      toast({ title: \"Success\", description: \"Finder level created successfully\" });\n      resetForm();\n      setIsCreating(false);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: typeof formData }) => {\n      return await apiRequest(`/api/admin/finder-levels/${id}`, { method: \"PUT\", body: JSON.stringify(data) });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/finder-levels\"] });\n      toast({ title: \"Success\", description: \"Finder level updated successfully\" });\n      resetForm();\n      setEditingLevel(null);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/admin/finder-levels/${id}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/finder-levels\"] });\n      toast({ title: \"Success\", description: \"Finder level deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      minEarnedAmount: \"\",\n      minJobsCompleted: 0,\n      minReviewPercentage: 0,\n      icon: \"User\",\n      iconUrl: \"\",\n      color: \"#3B82F6\",\n      order: 1,\n      isActive: true,\n    });\n  };\n\n  const handleEdit = (level: FinderLevel) => {\n    setFormData({\n      name: level.name,\n      description: level.description,\n      minEarnedAmount: level.minEarnedAmount,\n      minJobsCompleted: level.minJobsCompleted,\n      minReviewPercentage: level.minReviewPercentage,\n      icon: level.icon,\n      iconUrl: level.iconUrl || \"\",\n      color: level.color,\n      order: level.order,\n      isActive: level.isActive,\n    });\n    setEditingLevel(level);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const cleanedData = {\n      ...formData,\n      minEarnedAmount: formData.minEarnedAmount || \"0\",\n      minJobsCompleted: formData.minJobsCompleted || 0,\n      minReviewPercentage: formData.minReviewPercentage || 0\n    };\n\n    if (editingLevel) {\n      updateMutation.mutate({ id: editingLevel.id, data: cleanedData });\n    } else {\n      createMutation.mutate(cleanedData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this finder level?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AdminHeader currentPage=\"finder-levels\" />\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-2\">Loading...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"finder-levels\" />\n\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Award className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Finder Levels</h1>\n                <p className=\"text-sm text-gray-500\">Manage performance tiers</p>\n              </div>\n            </div>\n\n            {!isCreating && !editingLevel && (\n              <Button \n                onClick={() => setIsCreating(true)}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Level\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Award className=\"w-4 h-4 text-blue-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500\">Total</p>\n                  <p className=\"text-lg font-semibold\">{levels.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500\">Active</p>\n                  <p className=\"text-lg font-semibold\">{levels.filter(l => l.isActive).length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Crown className=\"w-4 h-4 text-purple-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500\">Max Tier</p>\n                  <p className=\"text-lg font-semibold\">{levels.length > 0 ? Math.max(...levels.map(l => l.order)) : 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Star className=\"w-4 h-4 text-yellow-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500\">Avg Score</p>\n                  <p className=\"text-lg font-semibold\">\n                    {levels.length > 0 ? Math.round(levels.reduce((acc, l) => acc + l.minReviewPercentage, 0) / levels.length) : 0}%\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Form Modal */}\n        {(isCreating || editingLevel) && (\n          <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-xl font-semibold\">\n                    {editingLevel ? 'Edit Finder Level' : 'Create New Level'}\n                  </h2>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setIsCreating(false);\n                      setEditingLevel(null);\n                      resetForm();\n                    }}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n                {/* Basic Info */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Level Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"e.g., Novice, Expert\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"order\">Order</Label>\n                    <Input\n                      id=\"order\"\n                      type=\"number\"\n                      value={formData.order}\n                      onChange={(e) => setFormData(prev => ({ ...prev, order: parseInt(e.target.value) || 1 }))}\n                      min=\"1\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe this level...\"\n                    rows={3}\n                    required\n                  />\n                </div>\n\n                {/* Requirements */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"minEarnedAmount\">Min Earned (‚Ç¶)</Label>\n                    <Input\n                      id=\"minEarnedAmount\"\n                      type=\"number\"\n                      value={formData.minEarnedAmount}\n                      onChange={(e) => setFormData(prev => ({ ...prev, minEarnedAmount: e.target.value }))}\n                      placeholder=\"0\"\n                      min=\"0\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"minJobsCompleted\">Min Jobs</Label>\n                    <Input\n                      id=\"minJobsCompleted\"\n                      type=\"number\"\n                      value={formData.minJobsCompleted}\n                      onChange={(e) => setFormData(prev => ({ ...prev, minJobsCompleted: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"0\"\n                      min=\"0\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"minReviewPercentage\">Min Review (%)</Label>\n                    <Input\n                      id=\"minReviewPercentage\"\n                      type=\"number\"\n                      value={formData.minReviewPercentage}\n                      onChange={(e) => setFormData(prev => ({ ...prev, minReviewPercentage: parseFloat(e.target.value) || 0 }))}\n                      placeholder=\"0\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                </div>\n\n                {/* Visual Settings */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"icon\">Icon</Label>\n                    <select\n                      id=\"icon\"\n                      value={formData.icon}\n                      onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"User\">üë§ User</option>\n                      <option value=\"Navigation\">üß≠ Navigation</option>\n                      <option value=\"Search\">üîç Search</option>\n                      <option value=\"Award\">üèÜ Award</option>\n                      <option value=\"Crown\">üëë Crown</option>\n                    </select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"color\">Color</Label>\n                    <Input\n                      id=\"color\"\n                      type=\"color\"\n                      value={formData.color}\n                      onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                      className=\"h-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <input\n                    id=\"isActive\"\n                    type=\"checkbox\"\n                    checked={formData.isActive}\n                    onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <Label htmlFor=\"isActive\">Active Level</Label>\n                </div>\n\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {(createMutation.isPending || updateMutation.isPending) \n                      ? 'Saving...' \n                      : (editingLevel ? 'Update' : 'Create')\n                    }\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreating(false);\n                      setEditingLevel(null);\n                      resetForm();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n\n        {/* Levels Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {levels.map((level) => {\n            const IconComponent = iconMap[level.icon as keyof typeof iconMap] || User;\n\n            return (\n              <Card key={level.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"p-2 rounded-lg\"\n                        style={{ backgroundColor: level.color + '20', color: level.color }}\n                      >\n                        <IconComponent className=\"w-5 h-5\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{level.name}</CardTitle>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge variant={level.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                            Tier {level.order}\n                          </Badge>\n                          {level.isActive && (\n                            <div className=\"flex items-center gap-1\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              <span className=\"text-xs text-green-600\">Active</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(level)}\n                        className=\"p-2\"\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(level.id)}\n                        className=\"p-2 text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-sm text-gray-600 mb-4\">{level.description}</p>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                      <span className=\"text-xs text-gray-500\">Min Earned</span>\n                      <span className=\"text-sm font-medium\">‚Ç¶{parseFloat(level.minEarnedAmount).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                      <span className=\"text-xs text-gray-500\">Min Jobs</span>\n                      <span className=\"text-sm font-medium\">{level.minJobsCompleted}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                      <span className=\"text-xs text-gray-500\">Min Review</span>\n                      <span className=\"text-sm font-medium\">{level.minReviewPercentage}%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {levels.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Award className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No finder levels yet</h3>\n            <p className=\"text-gray-500 mb-4\">Create your first finder level to get started.</p>\n            <Button onClick={() => setIsCreating(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create First Level\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19790},"client/src/pages/admin/requests-old.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  TrendingUp, \n  Shield, \n  Search,\n  Clock,\n  DollarSign,\n  Eye,\n  MoreVertical,\n  MessageCircle,\n  Flag\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { Find } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function AdminFinds() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: finds = [], isLoading } = useQuery<Find[]>({\n    queryKey: ['/api/admin/finds'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  // Filter finds based on search term\n  const filteredFinds = finds.filter(find => \n    find.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    find.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    find.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (find.status && find.status.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading finds...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const totalFinds = finds.length;\n  const openFinds = finds.filter(r => r.status === 'open').length;\n  const inProgressFinds = finds.filter(r => r.status === 'in_progress').length;\n  const completedFinds = finds.filter(r => r.status === 'completed').length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"finds\" />\n      \n      <div className=\"max-w-7xl mx-auto py-4 sm:py-6 lg:py-8 px-4 sm:px-6 lg:px-8\">\n        {/* Page Header */}\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 sm:mb-8\">\n          <div className=\"mb-4 sm:mb-0\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Find Management</h1>\n            <p className=\"text-gray-600\">Monitor and manage all service finds</p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 sm:mb-8\">\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-blue-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <TrendingUp className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Total</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-blue-600\">{totalFinds}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <Clock className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Open</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-green-600\">{openFinds}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-yellow-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <DollarSign className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">In Progress</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-yellow-600\">{inProgressFinds}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-purple-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <Shield className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">Completed</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-purple-600\">{completedFinds}</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"mb-4 sm:mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search finds...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Finds Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>All Finds ({filteredFinds.length})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredFinds.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <TrendingUp className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No finds found</h3>\n                <p className=\"text-gray-600\">\n                  {searchTerm ? \"Try adjusting your search criteria.\" : \"No finds have been submitted yet.\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredFinds.map((find: Find) => (\n                  <div key={find.id} className=\"border border-gray-200 rounded-lg hover:shadow-md transition-shadow bg-white\">\n                    <div className=\"p-4 sm:p-6\">\n                      {/* Mobile Layout */}\n                      <div className=\"block lg:hidden space-y-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <h3 className=\"text-base font-semibold text-gray-900 flex-1 pr-2\">{find.title}</h3>\n                          <Badge variant={\n                            find.status === 'open' ? 'default' :\n                            find.status === 'in_progress' ? 'secondary' :\n                            find.status === 'completed' ? 'default' :\n                            'outline'\n                          } className=\"text-xs\">\n                            {find.status || 'Unknown'}\n                          </Badge>\n                        </div>\n                        <p className=\"text-gray-600 text-sm line-clamp-2\">{find.description}</p>\n                        <div className=\"space-y-2 text-sm text-gray-500\">\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"w-4 h-4 mr-1 flex-shrink-0\" />\n                            <span>${find.budgetMin} - ${find.budgetMax}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Clock className=\"w-4 h-4 mr-1 flex-shrink-0\" />\n                            <span>{find.timeframe || 'No timeframe'}</span>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {find.category}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between pt-2\">\n                          <span className=\"text-xs text-gray-500\">\n                            {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'N/A'}\n                          </span>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem asChild>\n                                <Link href={`/admin/requests/${find.id}`}>\n                                  <Eye className=\"w-4 h-4 mr-2\" />\n                                  View Details\n                                </Link>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem asChild>\n                                <Link href={`/admin/requests/${find.id}/proposals`}>\n                                  View Proposals\n                                </Link>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => toast({ title: \"Contact Client\", description: \"Feature coming soon\" })}>\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Contact Client\n                              </DropdownMenuItem>\n                              <DropdownMenuItem className=\"text-finder-red\" onClick={() => toast({ title: \"Flag Find\", description: \"Feature coming soon\" })}>\n                                <Flag className=\"w-4 h-4 mr-2\" />\n                                Flag Find\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n\n                      {/* Desktop Layout */}\n                      <div className=\"hidden lg:flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{find.title}</h3>\n                            <Badge variant={\n                              find.status === 'open' ? 'default' :\n                              find.status === 'in_progress' ? 'secondary' :\n                              find.status === 'completed' ? 'default' :\n                              'outline'\n                            }>\n                              {find.status || 'Unknown'}\n                            </Badge>\n                          </div>\n                          <p className=\"text-gray-600 mb-3 line-clamp-2\">{find.description}</p>\n                          <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                            <div className=\"flex items-center\">\n                              <DollarSign className=\"w-4 h-4 mr-1\" />\n                              <span>Budget: ${find.budgetMin} - ${find.budgetMax}</span>\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"w-4 h-4 mr-1\" />\n                              <span>{find.timeframe || 'No timeframe specified'}</span>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {find.category}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <span className=\"text-sm text-gray-500\">\n                            {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'N/A'}\n                          </span>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem asChild>\n                                <Link href={`/admin/requests/${find.id}`}>\n                                  <Eye className=\"w-4 h-4 mr-2\" />\n                                  View Details\n                                </Link>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem asChild>\n                                <Link href={`/admin/requests/${find.id}/proposals`}>\n                                  View Proposals\n                                </Link>\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => toast({ title: \"Contact Client\", description: \"Feature coming soon\" })}>\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Contact Client\n                              </DropdownMenuItem>\n                              <DropdownMenuItem className=\"text-finder-red\" onClick={() => toast({ title: \"Flag Find\", description: \"Feature coming soon\" })}>\n                                <Flag className=\"w-4 h-4 mr-2\" />\n                                Flag Find\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14337},"client/src/pages/admin/requests.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Search,\n  Clock,\n  DollarSign,\n  Eye,\n  MoreVertical,\n  FileText,\n  CheckCircle2,\n  XCircle,\n  Play,\n  Calendar,\n  User,\n  Tag,\n  ChevronLeft,\n  ChevronRight,\n  AlertTriangle\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AdminIssueStrike from \"@/components/admin-issue-strike\";\nimport type { Find, User as UserType } from \"@shared/schema\";\n\ninterface FindWithClient extends Find {\n  client?: UserType;\n}\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminRequestsModern() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // State for filters and pagination\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  const { data: finds = [], isLoading } = useQuery<FindWithClient[]>({\n    queryKey: ['/api/admin/finds'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  // Filter finds based on search and status\n  const filteredFinds = finds.filter(find => {\n    const matchesSearch = \n      find.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      find.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      find.category?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || find.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Calculate pagination\n  const totalPages = Math.ceil(filteredFinds.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedFinds = filteredFinds.slice(startIndex, startIndex + itemsPerPage);\n\n  // Update mutation for find status\n  const updateFindStatusMutation = useMutation({\n    mutationFn: async ({ findId, status }: { findId: string; status: string }) => {\n      return await apiRequest(`/api/admin/finds/${findId}/status`, { \n        method: \"PUT\", \n        body: JSON.stringify({ status }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/finds'] });\n      toast({ title: \"Success\", description: \"Find status updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to update find status\", variant: \"destructive\" });\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-green-100 text-green-800 border-green-200';\n      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'completed': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\n      case 'under_review': return 'bg-orange-100 text-orange-800 border-orange-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <CheckCircle2 className=\"w-3 h-3\" />;\n      case 'in_progress': return <Play className=\"w-3 h-3\" />;\n      case 'completed': return <CheckCircle2 className=\"w-3 h-3\" />;\n      case 'cancelled': return <XCircle className=\"w-3 h-3\" />;\n      case 'under_review': return <AlertTriangle className=\"w-3 h-3\" />;\n      default: return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  const formatCurrency = (amount: string | number | null | undefined) => {\n    if (!amount) return '‚Ç¶0';\n    return `‚Ç¶${parseFloat(amount.toString()).toLocaleString()}`;\n  };\n\n  const handleStatusChange = (findId: string, newStatus: string) => {\n    updateFindStatusMutation.mutate({ findId, status: newStatus });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"finds\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading finds...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate stats\n  const stats = {\n    total: finds.length,\n    open: finds.filter(f => f.status === 'open').length,\n    inProgress: finds.filter(f => f.status === 'in_progress').length,\n    completed: finds.filter(f => f.status === 'completed').length,\n    cancelled: finds.filter(f => f.status === 'cancelled').length,\n    underReview: finds.filter(f => f.status === 'under_review').length,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"finds\" />\n      \n      {/* Modern Header Section */}\n      <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50 sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl blur opacity-60\"></div>\n                <div className=\"relative p-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl\">\n                  <FileText className=\"w-7 h-7 text-white\" />\n                </div>\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                  Find Requests\n                </h1>\n                <p className=\"text-gray-500 dark:text-gray-400 font-medium\">Monitor and manage service requests</p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                  <FileText className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.total}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-green-500/10 text-green-600 rounded-lg\">\n                  <CheckCircle2 className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Open</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.open}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                  <Play className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">In Progress</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.inProgress}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-purple-500/10 text-purple-600 rounded-lg\">\n                  <CheckCircle2 className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Completed</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.completed}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-red-500/10 text-red-600 rounded-lg\">\n                  <XCircle className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Cancelled</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.cancelled}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-orange-500/10 text-orange-600 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Under Review</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.underReview}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search finds by title, description, or category...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 h-10 bg-white/80 dark:bg-gray-800/80 border-gray-200/50 dark:border-gray-700/50 rounded-xl focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40 h-10 bg-white/80 dark:bg-gray-800/80 border-gray-200/50 dark:border-gray-700/50 rounded-xl\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl\">\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"open\">Open</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                <SelectItem value=\"under_review\">Under Review</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Modern Table */}\n        <div className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl border border-gray-200/50 dark:border-gray-700/50 shadow-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"bg-gray-50/80 dark:bg-gray-900/50 border-b border-gray-200/50 dark:border-gray-700/50\">\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                    Find Details\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                    Client & Category\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                    Budget & Date\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-4 text-right text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200/50 dark:divide-gray-700/50\">\n                {paginatedFinds.map((find) => (\n                  <tr key={find.id} className=\"hover:bg-gray-50/50 dark:hover:bg-gray-700/30 transition-colors duration-150\">\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold text-sm shadow-sm\">\n                          {find.title.charAt(0).toUpperCase()}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">\n                            {find.title}\n                          </h3>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-2\">\n                            {find.description}\n                          </p>\n                          {find.flaggedWords && find.flaggedWords.length > 0 && (\n                            <div className=\"mt-2 flex flex-wrap gap-1\">\n                              {find.flaggedWords.map((word, index) => (\n                                <Badge key={index} className=\"px-2 py-0.5 text-xs bg-red-100 text-red-800 border-red-200\">\n                                  {word}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                          {find.reviewReason && (\n                            <p className=\"text-xs text-orange-600 mt-1 font-medium\">\n                              {find.reviewReason}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <User className=\"w-3 h-3\" />\n                          <span className=\"truncate\">\n                            {find.client ? `${find.client.firstName} ${find.client.lastName}` : 'Client ID: ' + find.clientId.substring(0, 8)}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <Tag className=\"w-3 h-3\" />\n                          <span className=\"truncate\">{find.category || 'Uncategorized'}</span>\n                        </div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center gap-2 text-sm font-medium text-gray-900 dark:text-white\">\n                          <DollarSign className=\"w-3 h-3\" />\n                          {formatCurrency(find.budgetMin || find.budgetMax || '0')}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400\">\n                          <Calendar className=\"w-3 h-3\" />\n                          {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'N/A'}\n                        </div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4\">\n                      <Badge className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(find.status || '')}`}>\n                        <div className=\"flex items-center gap-1\">\n                          {getStatusIcon(find.status || '')}\n                          {find.status?.replace('_', ' ').charAt(0).toUpperCase() + find.status?.replace('_', ' ').slice(1) || 'Unknown'}\n                        </div>\n                      </Badge>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-right\">\n                      <div className=\"flex items-center gap-2 justify-end\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"p-2 hover:bg-blue-50 hover:border-blue-300 hover:text-blue-600 rounded-lg transition-colors duration-150\"\n                        >\n                          <Eye className=\"w-3 h-3\" />\n                        </Button>\n                        \n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" className=\"p-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-colors duration-150\">\n                              <MoreVertical className=\"w-3 h-3\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\" className=\"w-40 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl shadow-lg\">\n                            <DropdownMenuItem \n                              onClick={() => handleStatusChange(find.id, 'open')} \n                              className=\"flex items-center gap-2 px-3 py-2 rounded-lg\"\n                              disabled={find.status === 'open'}\n                            >\n                              <CheckCircle2 className=\"w-3 h-3\" />\n                              Mark Open\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleStatusChange(find.id, 'in_progress')} \n                              className=\"flex items-center gap-2 px-3 py-2 rounded-lg\"\n                              disabled={find.status === 'in_progress'}\n                            >\n                              <Play className=\"w-3 h-3\" />\n                              Mark In Progress\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleStatusChange(find.id, 'completed')} \n                              className=\"flex items-center gap-2 px-3 py-2 rounded-lg\"\n                              disabled={find.status === 'completed'}\n                            >\n                              <CheckCircle2 className=\"w-3 h-3\" />\n                              Mark Completed\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleStatusChange(find.id, 'cancelled')} \n                              className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                              disabled={find.status === 'cancelled'}\n                            >\n                              <XCircle className=\"w-3 h-3\" />\n                              Mark Cancelled\n                            </DropdownMenuItem>\n                            \n                            {find.status === 'under_review' && (\n                              <>\n                                <DropdownMenuItem \n                                  onClick={() => handleStatusChange(find.id, 'open')} \n                                  className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20\"\n                                >\n                                  <CheckCircle2 className=\"w-3 h-3\" />\n                                  Approve & Publish\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleStatusChange(find.id, 'cancelled')} \n                                  className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                                >\n                                  <XCircle className=\"w-3 h-3\" />\n                                  Reject Find\n                                </DropdownMenuItem>\n                              </>\n                            )}\n                            \n                            {find.client && (\n                              <DropdownMenuItem asChild>\n                                <div className=\"p-0\">\n                                  <AdminIssueStrike\n                                    userId={find.clientId}\n                                    userRole=\"client\"\n                                    userName={`${find.client.firstName} ${find.client.lastName}`}\n                                    contextId={find.id}\n                                    contextType=\"find\"\n                                    trigger={\n                                      <button className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-orange-600 hover:bg-orange-50 dark:hover:bg-orange-900/20 w-full text-left\">\n                                        <AlertTriangle className=\"w-3 h-3\" />\n                                        Issue Strike\n                                      </button>\n                                    }\n                                    onStrikeIssued={() => queryClient.invalidateQueries({ queryKey: ['/api/admin/finds'] })}\n                                  />\n                                </div>\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"px-6 py-4 border-t border-gray-200/50 dark:border-gray-700/50 bg-gray-50/30 dark:bg-gray-900/30\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredFinds.length)} of {filteredFinds.length} results\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    disabled={currentPage === 1}\n                    className=\"p-2 rounded-lg\"\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`px-3 py-1 rounded-lg text-sm ${\n                          currentPage === page \n                            ? 'bg-blue-500 text-white' \n                            : 'hover:bg-blue-50 hover:text-blue-600'\n                        }`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                    className=\"p-2 rounded-lg\"\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {filteredFinds.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"w-24 h-24 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <FileText className=\"w-12 h-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">No finds found</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">Try adjusting your search terms or filters</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26464},"client/src/pages/admin/restricted-words.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Shield, \n  Plus, \n  Trash2, \n  Search, \n  AlertTriangle,\n  Eye,\n  ShieldAlert\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { RestrictedWord } from \"@shared/schema\";\n\nexport default function AdminRestrictedWords() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newWord, setNewWord] = useState(\"\");\n  const [newCategory, setNewCategory] = useState(\"general\");\n  const [newSeverity, setNewSeverity] = useState(\"flag\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: restrictedWords = [], isLoading } = useQuery<RestrictedWord[]>({\n    queryKey: ['/api/admin/restricted-words'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const addWordMutation = useMutation({\n    mutationFn: async (data: { word: string; category: string; severity: string }) => {\n      console.log('Adding restricted word:', data);\n      return await apiRequest('/api/admin/restricted-words', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/restricted-words'] });\n      setNewWord(\"\");\n      setNewCategory(\"general\");\n      setNewSeverity(\"flag\");\n      toast({\n        title: \"Success\",\n        description: \"Restricted word added successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeWordMutation = useMutation({\n    mutationFn: async (wordId: string) => {\n      return await apiRequest(`/api/admin/restricted-words/${wordId}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/restricted-words'] });\n      toast({\n        title: \"Success\",\n        description: \"Restricted word removed successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddWord = () => {\n    if (!newWord.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a word to restrict\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addWordMutation.mutate({\n      word: newWord.trim(),\n      category: newCategory,\n      severity: newSeverity\n    });\n  };\n\n  const handleRemoveWord = (wordId: string) => {\n    removeWordMutation.mutate(wordId);\n  };\n\n  const filteredWords = restrictedWords.filter(word => \n    word.word.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    word.category.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'block': return 'bg-red-100 text-red-800 border-red-200';\n      case 'review': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'flag': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'block': return <ShieldAlert className=\"w-3 h-3\" />;\n      case 'review': return <Eye className=\"w-3 h-3\" />;\n      case 'flag': return <AlertTriangle className=\"w-3 h-3\" />;\n      default: return <Shield className=\"w-3 h-3\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"restricted-words\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading restricted words...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = {\n    total: restrictedWords.length,\n    flagWords: restrictedWords.filter(w => w.severity === 'flag').length,\n    reviewWords: restrictedWords.filter(w => w.severity === 'review').length,\n    blockWords: restrictedWords.filter(w => w.severity === 'block').length,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"restricted-words\" />\n      \n      {/* Header Section */}\n      <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-red-600 to-orange-600 rounded-2xl blur opacity-60\"></div>\n                <div className=\"relative p-4 bg-gradient-to-r from-red-500 to-orange-500 rounded-2xl\">\n                  <Shield className=\"w-7 h-7 text-white\" />\n                </div>\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                  Restricted Words\n                </h1>\n                <p className=\"text-gray-500 dark:text-gray-400 font-medium\">Manage content filtering and moderation</p>\n              </div>\n            </div>\n            \n            {/* Search Bar */}\n            <div className=\"relative max-w-md w-full\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <Input\n                placeholder=\"Search restricted words...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 h-12 bg-white/80 dark:bg-gray-800/80 border-gray-200/50 dark:border-gray-700/50 rounded-xl\"\n              />\n            </div>\n          </div>\n          \n          {/* Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <Shield className=\"w-4 h-4 text-blue-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total Words</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.total}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Flag Words</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.flagWords}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <Eye className=\"w-4 h-4 text-orange-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Review Words</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.reviewWords}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-3\">\n                <ShieldAlert className=\"w-4 h-4 text-red-600\" />\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Block Words</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.blockWords}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Add Word Form */}\n        <Card className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-lg mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"w-5 h-5\" />\n              Add Restricted Word\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"word\">Word</Label>\n                <Input\n                  id=\"word\"\n                  placeholder=\"Enter word to restrict\"\n                  value={newWord}\n                  onChange={(e) => setNewWord(e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <Select value={newCategory} onValueChange={setNewCategory}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"general\">General</SelectItem>\n                    <SelectItem value=\"profanity\">Profanity</SelectItem>\n                    <SelectItem value=\"spam\">Spam</SelectItem>\n                    <SelectItem value=\"inappropriate\">Inappropriate</SelectItem>\n                    <SelectItem value=\"illegal\">Illegal Content</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"severity\">Action</Label>\n                <Select value={newSeverity} onValueChange={setNewSeverity}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"flag\">Flag for Review</SelectItem>\n                    <SelectItem value=\"review\">Auto Review</SelectItem>\n                    <SelectItem value=\"block\">Block Content</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-end\">\n                <Button \n                  onClick={handleAddWord}\n                  disabled={addWordMutation.isPending}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                >\n                  {addWordMutation.isPending ? \"Adding...\" : \"Add Word\"}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Words List */}\n        <Card className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-lg\">\n          <CardHeader>\n            <CardTitle>Restricted Words Directory</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {filteredWords.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                    {searchTerm ? 'No matching words found' : 'No restricted words'}\n                  </h3>\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    {searchTerm ? 'Try adjusting your search terms' : 'Start by adding words to restrict'}\n                  </p>\n                </div>\n              ) : (\n                filteredWords.map((word) => (\n                  <div key={word.id} className=\"flex items-center justify-between p-4 bg-gray-50/50 dark:bg-gray-700/50 rounded-lg border border-gray-200/50 dark:border-gray-600/50\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"font-mono text-lg font-semibold text-gray-900 dark:text-white bg-white dark:bg-gray-800 px-3 py-1 rounded border\">\n                        {word.word}\n                      </div>\n                      <Badge className={`px-3 py-1 rounded-full text-xs font-medium ${getSeverityColor(word.severity)}`}>\n                        <div className=\"flex items-center gap-1\">\n                          {getSeverityIcon(word.severity)}\n                          {word.severity}\n                        </div>\n                      </Badge>\n                      <span className=\"text-sm text-gray-500 dark:text-gray-400 capitalize\">\n                        {word.category}\n                      </span>\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveWord(word.id)}\n                      disabled={removeWordMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14455},"client/src/pages/admin/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  Settings, \n  Save, \n  Banknote, \n  Coins,\n  AlertCircle,\n  CheckCircle2,\n  Percent,\n  CreditCard,\n  TrendingUp,\n  Target\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdminSettings {\n  proposalTokenCost: string;\n  findertokenPrice: string;\n  platformFeePercentage: string;\n  clientPaymentChargePercentage: string;\n  finderEarningsChargePercentage: string;\n  highBudgetThreshold: string;\n  highBudgetTokenCost: string;\n}\n\nexport default function AdminSettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [proposalTokenCost, setProposalTokenCost] = useState(\"\");\n  const [findertokenPrice, setFindertokenPrice] = useState(\"\");\n  const [platformFeePercentage, setPlatformFeePercentage] = useState(\"\");\n  const [clientPaymentChargePercentage, setClientPaymentChargePercentage] = useState(\"\");\n  const [finderEarningsChargePercentage, setFinderEarningsChargePercentage] = useState(\"\");\n  const [highBudgetThreshold, setHighBudgetThreshold] = useState(\"\");\n  const [highBudgetTokenCost, setHighBudgetTokenCost] = useState(\"\");\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Fetch admin settings\n  const { data: settings, isLoading: settingsLoading } = useQuery<AdminSettings>({\n    queryKey: ['/api/admin/settings'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  // Set initial values when settings are loaded\n  useEffect(() => {\n    if (settings) {\n      setProposalTokenCost(settings.proposalTokenCost || \"1\");\n      setFindertokenPrice(settings.findertokenPrice || \"100\");\n      setPlatformFeePercentage(settings.platformFeePercentage || \"10\");\n      setClientPaymentChargePercentage(settings.clientPaymentChargePercentage || \"2.5\");\n      setFinderEarningsChargePercentage(settings.finderEarningsChargePercentage || \"5\");\n      setHighBudgetThreshold(settings.highBudgetThreshold || \"100000\");\n      setHighBudgetTokenCost(settings.highBudgetTokenCost || \"5\");\n    }\n  }, [settings]);\n\n  // Track changes\n  useEffect(() => {\n    if (settings) {\n      const hasTokenCostChange = proposalTokenCost !== (settings.proposalTokenCost || \"1\");\n      const hasPriceChange = findertokenPrice !== (settings.findertokenPrice || \"100\");\n      const hasPlatformFeeChange = platformFeePercentage !== (settings.platformFeePercentage || \"10\");\n      const hasClientChargeChange = clientPaymentChargePercentage !== (settings.clientPaymentChargePercentage || \"2.5\");\n      const hasFinderChargeChange = finderEarningsChargePercentage !== (settings.finderEarningsChargePercentage || \"5\");\n      const hasHighBudgetThresholdChange = highBudgetThreshold !== (settings.highBudgetThreshold || \"100000\");\n      const hasHighBudgetTokenCostChange = highBudgetTokenCost !== (settings.highBudgetTokenCost || \"5\");\n      setHasChanges(hasTokenCostChange || hasPriceChange || hasPlatformFeeChange || hasClientChargeChange || hasFinderChargeChange || hasHighBudgetThresholdChange || hasHighBudgetTokenCostChange);\n    }\n  }, [proposalTokenCost, findertokenPrice, platformFeePercentage, clientPaymentChargePercentage, finderEarningsChargePercentage, highBudgetThreshold, highBudgetTokenCost, settings]);\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: { \n      proposalTokenCost?: string; \n      findertokenPrice?: string;\n      platformFeePercentage?: string;\n      clientPaymentChargePercentage?: string;\n      finderEarningsChargePercentage?: string;\n      highBudgetThreshold?: string;\n      highBudgetTokenCost?: string;\n    }) => {\n      return await apiRequest('/api/admin/settings', {\n        method: 'PUT',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/settings'] });\n      setHasChanges(false);\n      toast({\n        title: \"Settings Updated\",\n        description: \"Platform settings have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update settings.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleUpdateSettings = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateSettingsMutation.mutate({\n      proposalTokenCost,\n      findertokenPrice,\n      platformFeePercentage,\n      clientPaymentChargePercentage,\n      finderEarningsChargePercentage,\n      highBudgetThreshold,\n      highBudgetTokenCost\n    });\n  };\n\n  const findertokenPriceInNaira = parseFloat(findertokenPrice || \"100\") / 100;\n\n  if (settingsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n        <AdminHeader currentPage=\"settings\" />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-slate-600 mt-4\">Loading settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <AdminHeader currentPage=\"settings\" />\n      \n      <div className=\"max-w-4xl mx-auto p-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-2 flex items-center\">\n            <Settings className=\"mr-3 h-8 w-8 text-blue-600\" />\n            Platform Settings\n          </h1>\n          <p className=\"text-slate-600\">Configure system-wide platform settings and pricing</p>\n        </div>\n\n        {/* Settings Form */}\n        <Card className=\"backdrop-blur-sm bg-white/90 border border-white/20 shadow-xl\">\n          <CardHeader className=\"pb-6\">\n            <CardTitle className=\"text-slate-800 flex items-center text-xl\">\n              <Coins className=\"w-6 h-6 mr-3 text-orange-500\" />\n              Token Management\n            </CardTitle>\n            <CardDescription className=\"text-slate-600\">\n              Configure proposal costs and findertoken pricing for the platform\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleUpdateSettings} className=\"space-y-8\">\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                {/* Proposal Token Cost */}\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"proposalCost\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                    <Coins className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Proposal Token Cost\n                  </Label>\n                  <Input\n                    id=\"proposalCost\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"100\"\n                    value={proposalTokenCost}\n                    onChange={(e) => setProposalTokenCost(e.target.value)}\n                    className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20\"\n                    placeholder=\"Enter token cost\"\n                  />\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                    <p className=\"text-sm text-blue-700\">\n                      <strong>Current:</strong> {proposalTokenCost || settings?.proposalTokenCost || \"1\"} tokens per proposal\n                    </p>\n                    <p className=\"text-xs text-blue-600 mt-1\">\n                      Number of tokens finders must spend to submit a proposal\n                    </p>\n                  </div>\n                </div>\n\n                {/* Findertoken Price */}\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"tokenPrice\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                    <Banknote className=\"w-4 h-4 mr-2 text-green-600\" />\n                    Findertoken Price (Kobo)\n                  </Label>\n                  <Input\n                    id=\"tokenPrice\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"10000\"\n                    value={findertokenPrice}\n                    onChange={(e) => setFindertokenPrice(e.target.value)}\n                    className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-green-500 focus:ring-green-500/20\"\n                    placeholder=\"Enter price in kobo\"\n                  />\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                    <p className=\"text-sm text-green-700\">\n                      <strong>Current:</strong> ‚Ç¶{findertokenPriceInNaira.toFixed(2)} per token\n                    </p>\n                    <p className=\"text-xs text-green-600 mt-1\">\n                      Price users pay to purchase findertokens (100 kobo = ‚Ç¶1)\n                    </p>\n                  </div>\n                </div>\n\n                {/* High Budget Posting Configuration */}\n                <div className=\"mt-8\">\n                  <h4 className=\"text-lg font-semibold text-slate-800 mb-4 flex items-center\">\n                    <TrendingUp className=\"w-5 h-5 mr-2 text-purple-600\" />\n                    High Budget Posting\n                  </h4>\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {/* High Budget Threshold */}\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"highBudgetThreshold\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                        <Target className=\"w-4 h-4 mr-2 text-purple-600\" />\n                        High Budget Threshold (‚Ç¶)\n                      </Label>\n                      <Input\n                        id=\"highBudgetThreshold\"\n                        type=\"number\"\n                        min=\"1000\"\n                        step=\"100\"\n                        value={highBudgetThreshold}\n                        onChange={(e) => setHighBudgetThreshold(e.target.value)}\n                        className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-purple-500 focus:ring-purple-500/20\"\n                        placeholder=\"Enter threshold amount\"\n                      />\n                      <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-purple-700\">\n                          <strong>Current:</strong> ‚Ç¶{parseInt(highBudgetThreshold || \"100000\").toLocaleString()} threshold\n                        </p>\n                        <p className=\"text-xs text-purple-600 mt-1\">\n                          Posts with budget ‚â• this amount require findertokens\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* High Budget Token Cost */}\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"highBudgetTokenCost\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                        <Coins className=\"w-4 h-4 mr-2 text-indigo-600\" />\n                        Required Findertokens\n                      </Label>\n                      <Input\n                        id=\"highBudgetTokenCost\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"50\"\n                        value={highBudgetTokenCost}\n                        onChange={(e) => setHighBudgetTokenCost(e.target.value)}\n                        className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-indigo-500 focus:ring-indigo-500/20\"\n                        placeholder=\"Enter token count\"\n                      />\n                      <div className=\"bg-indigo-50 border border-indigo-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-indigo-700\">\n                          <strong>Current:</strong> {highBudgetTokenCost || \"5\"} findertokens required\n                        </p>\n                        <p className=\"text-xs text-indigo-600 mt-1\">\n                          Tokens deducted for high-budget posts\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Separator className=\"my-8\" />\n\n              {/* Platform Charges Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 flex items-center\">\n                  <CreditCard className=\"w-5 h-5 mr-2 text-purple-600\" />\n                  Platform Charges & Fees\n                </h3>\n                \n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  {/* Platform Fee Percentage */}\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"platformFee\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                      <Percent className=\"w-4 h-4 mr-2 text-purple-600\" />\n                      Platform Fee (%)\n                    </Label>\n                    <Input\n                      id=\"platformFee\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"50\"\n                      step=\"0.1\"\n                      value={platformFeePercentage}\n                      onChange={(e) => setPlatformFeePercentage(e.target.value)}\n                      className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-purple-500 focus:ring-purple-500/20\"\n                      placeholder=\"Enter percentage\"\n                    />\n                    <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-purple-700\">\n                        <strong>Current:</strong> {platformFeePercentage || \"10\"}% of contract value\n                      </p>\n                      <p className=\"text-xs text-purple-600 mt-1\">\n                        General platform fee charged on completed contracts\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Client Payment Charge */}\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"clientCharge\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                      <CreditCard className=\"w-4 h-4 mr-2 text-orange-600\" />\n                      Client Payment Charge (%)\n                    </Label>\n                    <Input\n                      id=\"clientCharge\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"10\"\n                      step=\"0.1\"\n                      value={clientPaymentChargePercentage}\n                      onChange={(e) => setClientPaymentChargePercentage(e.target.value)}\n                      className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-orange-500 focus:ring-orange-500/20\"\n                      placeholder=\"Enter percentage\"\n                    />\n                    <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-orange-700\">\n                        <strong>Current:</strong> {clientPaymentChargePercentage || \"2.5\"}% transaction fee\n                      </p>\n                      <p className=\"text-xs text-orange-600 mt-1\">\n                        Additional charge on client payments (processing fees)\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Finder Earnings Charge */}\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"finderCharge\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                      <Banknote className=\"w-4 h-4 mr-2 text-red-600\" />\n                      Finder Earnings Charge (%)\n                    </Label>\n                    <Input\n                      id=\"finderCharge\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"20\"\n                      step=\"0.1\"\n                      value={finderEarningsChargePercentage}\n                      onChange={(e) => setFinderEarningsChargePercentage(e.target.value)}\n                      className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-red-500 focus:ring-red-500/20\"\n                      placeholder=\"Enter percentage\"\n                    />\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-red-700\">\n                        <strong>Current:</strong> {finderEarningsChargePercentage || \"5\"}% deduction\n                      </p>\n                      <p className=\"text-xs text-red-600 mt-1\">\n                        Percentage deducted from finder earnings\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Separator className=\"my-8\" />\n\n              {/* Pricing Summary */}\n              <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-6\">\n                <h3 className=\"font-semibold text-slate-800 mb-4 flex items-center\">\n                  <AlertCircle className=\"w-5 h-5 mr-2 text-slate-600\" />\n                  Current Configuration\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-8 gap-4 text-sm\">\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-blue-600\">{proposalTokenCost || \"1\"}</div>\n                    <div className=\"text-slate-600 text-xs\">Tokens per proposal</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-green-600\">‚Ç¶{findertokenPriceInNaira.toFixed(2)}</div>\n                    <div className=\"text-slate-600 text-xs\">Price per token</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-purple-600\">‚Ç¶{(findertokenPriceInNaira * parseFloat(proposalTokenCost || \"1\")).toFixed(2)}</div>\n                    <div className=\"text-slate-600 text-xs\">Cost per proposal</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-purple-600\">{platformFeePercentage || \"10\"}%</div>\n                    <div className=\"text-slate-600 text-xs\">Platform fee</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-orange-600\">{clientPaymentChargePercentage || \"2.5\"}%</div>\n                    <div className=\"text-slate-600 text-xs\">Client charge</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-red-600\">{finderEarningsChargePercentage || \"5\"}%</div>\n                    <div className=\"text-slate-600 text-xs\">Finder charge</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-purple-600\">‚Ç¶{parseInt(highBudgetThreshold || \"100000\").toLocaleString()}</div>\n                    <div className=\"text-slate-600 text-xs\">High budget threshold</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white rounded border\">\n                    <div className=\"text-xl font-bold text-indigo-600\">{highBudgetTokenCost || \"5\"}</div>\n                    <div className=\"text-slate-600 text-xs\">High budget tokens</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Save Button */}\n              <div className=\"flex justify-end pt-4\">\n                <Button \n                  type=\"submit\"\n                  size=\"lg\"\n                  disabled={updateSettingsMutation.isPending || !hasChanges}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  {updateSettingsMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                      Updating...\n                    </>\n                  ) : hasChanges ? (\n                    <>\n                      <Save className=\"w-5 h-5 mr-2\" />\n                      Save Changes\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle2 className=\"w-5 h-5 mr-2\" />\n                      Settings Saved\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Additional Info */}\n        <Card className=\"mt-6 backdrop-blur-sm bg-white/80 border border-white/20 shadow-lg\">\n          <CardContent className=\"pt-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-slate-800 mb-2\">Token Economics</h4>\n                <ul className=\"text-sm text-slate-600 space-y-1\">\n                  <li>‚Ä¢ Finders purchase tokens to submit proposals</li>\n                  <li>‚Ä¢ Each proposal submission costs tokens</li>\n                  <li>‚Ä¢ Token prices can be adjusted based on market demand</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-slate-800 mb-2\">Best Practices</h4>\n                <ul className=\"text-sm text-slate-600 space-y-1\">\n                  <li>‚Ä¢ Keep proposal costs reasonable for finders</li>\n                  <li>‚Ä¢ Adjust token prices based on platform usage</li>\n                  <li>‚Ä¢ Monitor finder engagement after price changes</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":22948},"client/src/pages/admin/support-agents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Plus, \n  Settings, \n  Shield, \n  AlertTriangle, \n  CheckCircle, \n  UserX, \n  UserCheck,\n  Edit,\n  Trash2,\n  Eye,\n  Clock,\n  MessageSquare,\n  HeadphonesIcon\n} from \"lucide-react\";\nimport AdminHeader from \"@/components/admin-header\";\n\ninterface SupportAgent {\n  id: string;\n  userId: string;\n  agentId: string;\n  department: string;\n  permissions: string[];\n  isActive: boolean;\n  maxTicketsPerDay: number;\n  responseTimeTarget: number;\n  specializations: string[];\n  languages: string[];\n  suspendedAt: string | null;\n  suspensionReason: string | null;\n  createdAt: string;\n  user: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nconst DEPARTMENTS = [\n  { value: 'general', label: 'General Support', color: 'bg-blue-100 text-blue-800' },\n  { value: 'technical', label: 'Technical Support', color: 'bg-purple-100 text-purple-800' },\n  { value: 'billing', label: 'Billing & Payments', color: 'bg-green-100 text-green-800' },\n  { value: 'disputes', label: 'Disputes & Moderation', color: 'bg-orange-100 text-orange-800' },\n  { value: 'verification', label: 'Account Verification', color: 'bg-indigo-100 text-indigo-800' },\n];\n\nconst PERMISSION_OPTIONS = [\n  { value: 'view_tickets', label: 'View Tickets' },\n  { value: 'respond_tickets', label: 'Respond to Tickets' },\n  { value: 'assign_tickets', label: 'Assign Tickets' },\n  { value: 'close_tickets', label: 'Close Tickets' },\n  { value: 'view_user_data', label: 'View User Data' },\n  { value: 'escalate_tickets', label: 'Escalate Tickets' },\n  { value: 'internal_notes', label: 'Add Internal Notes' },\n  { value: 'bulk_operations', label: 'Bulk Operations' },\n];\n\nconst LANGUAGE_OPTIONS = [\n  { value: 'en', label: 'English' },\n  { value: 'es', label: 'Spanish' },\n  { value: 'fr', label: 'French' },\n  { value: 'de', label: 'German' },\n  { value: 'pt', label: 'Portuguese' },\n  { value: 'ar', label: 'Arabic' },\n  { value: 'ha', label: 'Hausa' },\n  { value: 'yo', label: 'Yoruba' },\n  { value: 'ig', label: 'Igbo' },\n];\n\nexport default function SupportAgentsManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedAgent, setSelectedAgent] = useState<SupportAgent | null>(null);\n\n  const [newAgent, setNewAgent] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    department: '',\n    permissions: [] as string[],\n    maxTicketsPerDay: 20,\n    responseTimeTarget: 24,\n    specializations: [] as string[],\n    languages: ['en'] as string[],\n  });\n\n  const { data: agents, isLoading } = useQuery({\n    queryKey: [\"support-agents\"],\n    queryFn: () => apiRequest(\"/api/admin/support-agents\"),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"users\"],\n    queryFn: () => apiRequest(\"/api/admin/users\"),\n  });\n\n  const createAgentMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/support-agents\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"support-agents\"] });\n      setShowCreateDialog(false);\n      setNewAgent({\n        email: '',\n        firstName: '',\n        lastName: '',\n        department: '',\n        permissions: [],\n        maxTicketsPerDay: 20,\n        responseTimeTarget: 24,\n        specializations: [],\n        languages: ['en'],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Support agent created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create support agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAgentMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => \n      apiRequest(`/api/admin/support-agents/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"support-agents\"] });\n      setShowEditDialog(false);\n      setSelectedAgent(null);\n      toast({\n        title: \"Success\",\n        description: \"Support agent updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update support agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendAgentMutation = useMutation({\n    mutationFn: ({ id, reason }: { id: string; reason: string }) =>\n      apiRequest(`/api/admin/support-agents/${id}/suspend`, \"POST\", { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"support-agents\"] });\n      toast({\n        title: \"Success\",\n        description: \"Support agent suspended successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend support agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reactivateAgentMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/admin/support-agents/${id}/reactivate`, \"POST\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"support-agents\"] });\n      toast({\n        title: \"Success\",\n        description: \"Support agent reactivated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reactivate support agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAgentMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/admin/support-agents/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"support-agents\"] });\n      toast({\n        title: \"Success\",\n        description: \"Support agent deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete support agent\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateAgent = () => {\n    if (!newAgent.email || !newAgent.firstName || !newAgent.lastName || !newAgent.department || newAgent.permissions.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAgentMutation.mutate(newAgent);\n  };\n\n  const handleEditAgent = () => {\n    if (!selectedAgent) return;\n\n    updateAgentMutation.mutate({\n      id: selectedAgent.id,\n      data: selectedAgent,\n    });\n  };\n\n  const handleSuspendAgent = (agent: SupportAgent) => {\n    const reason = prompt(\"Please provide a reason for suspension:\");\n    if (reason) {\n      suspendAgentMutation.mutate({ id: agent.id, reason });\n    }\n  };\n\n  const getDepartmentBadge = (department: string) => {\n    const dept = DEPARTMENTS.find(d => d.value === department);\n    return dept ? (\n      <Badge className={dept.color}>\n        {dept.label}\n      </Badge>\n    ) : (\n      <Badge variant=\"outline\">{department}</Badge>\n    );\n  };\n\n  const availableUsers = users?.filter((user: any) => \n    !agents?.some((agent: SupportAgent) => agent.userId === user.id)\n  ) || [];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-64\">Loading support agents...</div>;\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-100\">\n      <AdminHeader />\n      <main className=\"flex-1 flex flex-col gap-6 p-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Support Agents</h1>\n            <p className=\"text-gray-600 mt-2\">Manage customer support team members and their permissions</p>\n          </div>\n          <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n            <DialogTrigger asChild>\n              <Button className=\"mt-4 sm:mt-0 bg-finder-red hover:bg-finder-red/90 w-full sm:w-auto\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Agent\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Support Agent</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-6 py-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    type=\"email\"\n                    value={newAgent.email}\n                    onChange={(e) => setNewAgent({...newAgent, email: e.target.value})}\n                    placeholder=\"Enter email address\"\n                    className=\"h-8\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      type=\"text\"\n                      value={newAgent.firstName}\n                      onChange={(e) => setNewAgent({...newAgent, firstName: e.target.value})}\n                      placeholder=\"First name\"\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      type=\"text\"\n                      value={newAgent.lastName}\n                      onChange={(e) => setNewAgent({...newAgent, lastName: e.target.value})}\n                      placeholder=\"Last name\"\n                      className=\"h-8\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"department\">Department</Label>\n                  <Select value={newAgent.department} onValueChange={(value) => setNewAgent({...newAgent, department: value})}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select department\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {DEPARTMENTS.map((dept) => (\n                        <SelectItem key={dept.value} value={dept.value}>\n                          {dept.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Permissions</Label>\n                  <div className=\"grid grid-cols-1 gap-1 mt-2 max-h-32 overflow-y-auto border rounded p-2\">\n                    {PERMISSION_OPTIONS.map((permission) => (\n                      <label key={permission.value} className=\"flex items-center space-x-2 text-xs\">\n                        <input\n                          type=\"checkbox\"\n                          checked={newAgent.permissions.includes(permission.value)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setNewAgent({\n                                ...newAgent,\n                                permissions: [...newAgent.permissions, permission.value]\n                              });\n                            } else {\n                              setNewAgent({\n                                ...newAgent,\n                                permissions: newAgent.permissions.filter(p => p !== permission.value)\n                              });\n                            }\n                          }}\n                          className=\"rounded\"\n                        />\n                        <span>{permission.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"maxTicketsPerDay\" className=\"text-sm\">Max Tickets Per Day</Label>\n                    <Input\n                      type=\"number\"\n                      value={newAgent.maxTicketsPerDay}\n                      onChange={(e) => setNewAgent({...newAgent, maxTicketsPerDay: parseInt(e.target.value)})}\n                      min={1}\n                      max={100}\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"responseTimeTarget\" className=\"text-sm\">Response Time Target (hours)</Label>\n                    <Input\n                      type=\"number\"\n                      value={newAgent.responseTimeTarget}\n                      onChange={(e) => setNewAgent({...newAgent, responseTimeTarget: parseInt(e.target.value)})}\n                      min={1}\n                      max={168}\n                      className=\"h-8\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Languages</Label>\n                  <div className=\"grid grid-cols-2 gap-1 mt-2 max-h-24 overflow-y-auto border rounded p-2\">\n                    {LANGUAGE_OPTIONS.map((language) => (\n                      <label key={language.value} className=\"flex items-center space-x-2 text-xs\">\n                        <input\n                          type=\"checkbox\"\n                          checked={newAgent.languages.includes(language.value)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setNewAgent({\n                                ...newAgent,\n                                languages: [...newAgent.languages, language.value]\n                              });\n                            } else {\n                              setNewAgent({\n                                ...newAgent,\n                                languages: newAgent.languages.filter(l => l !== language.value)\n                              });\n                            }\n                          }}\n                          className=\"rounded\"\n                        />\n                        <span>{language.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col space-y-2 pt-4 border-t\">\n                  <Button \n                    onClick={handleCreateAgent} \n                    disabled={createAgentMutation.isPending}\n                    className=\"w-full bg-finder-red hover:bg-finder-red/90\"\n                  >\n                    {createAgentMutation.isPending ? \"Creating...\" : \"Create Agent\"}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                    className=\"w-full\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-8 h-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{agents?.length || 0}</p>\n                  <p className=\"text-gray-600\">Total Agents</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">\n                    {agents?.filter((agent: SupportAgent) => agent.isActive).length || 0}\n                  </p>\n                  <p className=\"text-gray-600\">Active Agents</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <UserX className=\"w-8 h-8 text-red-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">\n                    {agents?.filter((agent: SupportAgent) => !agent.isActive).length || 0}\n                  </p>\n                  <p className=\"text-gray-600\">Suspended</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <HeadphonesIcon className=\"w-8 h-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{DEPARTMENTS.length}</p>\n                  <p className=\"text-gray-600\">Departments</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Agents Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Support Agents</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full min-w-[800px]\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-4\">Agent</th>\n                    <th className=\"text-left p-4\">Department</th>\n                    <th className=\"text-left p-4\">Status</th>\n                    <th className=\"text-left p-4\">Permissions</th>\n                    <th className=\"text-left p-4\">Capacity</th>\n                    <th className=\"text-left p-4\">Languages</th>\n                    <th className=\"text-left p-4\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {agents?.map((agent: SupportAgent) => (\n                    <tr key={agent.id} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"p-4 whitespace-nowrap\">\n                        <div>\n                          <div className=\"font-medium\">\n                            {agent.user.firstName} {agent.user.lastName}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">{agent.user.email}</div>\n                          <div className=\"text-xs text-gray-500\">ID: {agent.agentId}</div>\n                        </div>\n                      </td>\n                      <td className=\"p-4 whitespace-nowrap\">\n                        {getDepartmentBadge(agent.department)}\n                      </td>\n                      <td className=\"p-4 whitespace-nowrap\">\n                        {agent.isActive ? (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Active\n                          </Badge>\n                        ) : (\n                          <Badge className=\"bg-red-100 text-red-800\">\n                            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                            Suspended\n                          </Badge>\n                        )}\n                        {agent.suspendedAt && (\n                          <div className=\"text-xs text-red-600 mt-1\">\n                            {agent.suspensionReason}\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"p-4 max-w-xs\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {agent.permissions.slice(0, 2).map((permission) => (\n                            <Badge key={permission} variant=\"outline\" className=\"text-xs\">\n                              {permission.replace('_', ' ')}\n                            </Badge>\n                          ))}\n                          {agent.permissions.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{agent.permissions.length - 2} more\n                            </Badge>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"p-4 whitespace-nowrap\">\n                        <div className=\"text-sm\">\n                          <div>{agent.maxTicketsPerDay} tickets/day</div>\n                          <div className=\"text-gray-600\">\n                            <Clock className=\"w-3 h-3 inline mr-1\" />\n                            {agent.responseTimeTarget}h target\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"p-4 max-w-xs\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {agent.languages.slice(0, 2).map((lang) => (\n                            <Badge key={lang} variant=\"outline\" className=\"text-xs\">\n                              {lang.toUpperCase()}\n                            </Badge>\n                          ))}\n                          {agent.languages.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{agent.languages.length - 2} more\n                            </Badge>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"p-4 whitespace-nowrap\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedAgent(agent);\n                              setShowEditDialog(true);\n                            }}\n                          >\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n\n                          {agent.isActive ? (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleSuspendAgent(agent)}\n                            >\n                              <UserX className=\"w-3 h-3\" />\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => reactivateAgentMutation.mutate(agent.id)}\n                            >\n                              <UserCheck className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"outline\" size=\"sm\" className=\"text-red-600\">\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Support Agent</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete this support agent? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteAgentMutation.mutate(agent.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Edit Agent Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Support Agent</DialogTitle>\n            </DialogHeader>\n            {selectedAgent && (\n              <div className=\"space-y-6 py-4\">\n                <div>\n                  <Label>Agent Information</Label>\n                  <div className=\"p-3 bg-gray-50 rounded\">\n                    <div className=\"font-medium\">{selectedAgent.user.firstName} {selectedAgent.user.lastName}</div>\n                    <div className=\"text-sm text-gray-600\">{selectedAgent.user.email}</div>\n                    <div className=\"text-xs text-gray-500\">ID: {selectedAgent.agentId}</div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"department\">Department</Label>\n                  <Select \n                    value={selectedAgent.department} \n                    onValueChange={(value) => setSelectedAgent({...selectedAgent, department: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {DEPARTMENTS.map((dept) => (\n                        <SelectItem key={dept.value} value={dept.value}>\n                          {dept.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Permissions</Label>\n                  <div className=\"grid grid-cols-1 gap-1 mt-2 max-h-32 overflow-y-auto border rounded p-2\">\n                    {PERMISSION_OPTIONS.map((permission) => (\n                      <label key={permission.value} className=\"flex items-center space-x-2 text-xs\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedAgent.permissions.includes(permission.value)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedAgent({\n                                ...selectedAgent,\n                                permissions: [...selectedAgent.permissions, permission.value]\n                              });\n                            } else {\n                              setSelectedAgent({\n                                ...selectedAgent,\n                                permissions: selectedAgent.permissions.filter(p => p !== permission.value)\n                              });\n                            }\n                          }}\n                          className=\"rounded\"\n                        />\n                        <span>{permission.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                  <div>\n                    <Label htmlFor=\"maxTicketsPerDay\" className=\"text-sm\">Max Tickets Per Day</Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedAgent.maxTicketsPerDay}\n                      onChange={(e) => setSelectedAgent({\n                        ...selectedAgent, \n                        maxTicketsPerDay: parseInt(e.target.value)\n                      })}\n                      min={1}\n                      max={100}\n                      className=\"h-8\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"responseTimeTarget\" className=\"text-sm\">Response Time Target (hours)</Label>\n                    <Input\n                      type=\"number\"\n                      value={selectedAgent.responseTimeTarget}\n                      onChange={(e) => setSelectedAgent({\n                        ...selectedAgent, \n                        responseTimeTarget: parseInt(e.target.value)\n                      })}\n                      min={1}\n                      max={168}\n                      className=\"h-8\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col space-y-2 pt-4 border-t\">\n                  <Button \n                    onClick={handleEditAgent} \n                    disabled={updateAgentMutation.isPending}\n                    className=\"w-full bg-finder-red hover:bg-finder-red/90\"\n                  >\n                    {updateAgentMutation.isPending ? \"Updating...\" : \"Update Agent\"}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowEditDialog(false)}\n                    className=\"w-full\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":30640},"client/src/pages/admin/token-management.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Coins, Gift, Calendar, User, Clock, TrendingUp, Target, Settings } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport AdminHeader from \"@/components/admin-header\";\n\ninterface Finder {\n  id: string;\n  userId: string;\n  findertokenBalance: number;\n  user?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\ninterface TokenGrant {\n  id: string;\n  userId?: string;\n  finderId?: string;\n  userType: 'finder' | 'client';\n  amount: number;\n  reason: string;\n  grantedBy: string;\n  createdAt: string;\n  user?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  finder?: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n  };\n  grantedByUser: {\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface MonthlyDistribution {\n  id: string;\n  finderId: string;\n  month: number;\n  year: number;\n  tokensGranted: number;\n  distributedAt: string;\n  finder: {\n    user: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n  };\n}\n\nexport default function TokenManagement() {\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [selectedUserRole, setSelectedUserRole] = useState<\"finder\" | \"client\">(\"finder\");\n  const [grantAmount, setGrantAmount] = useState(\"\");\n  const [grantReason, setGrantReason] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [showGrantDialog, setShowGrantDialog] = useState(false);\n  const [highBudgetThreshold, setHighBudgetThreshold] = useState(\"\");\n  const [highBudgetTokenCost, setHighBudgetTokenCost] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all users (finders and clients)\n  const { data: users = [], isLoading: isLoadingUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"]\n  });\n\n  // Filter users by role\n  const finders = users.filter((user: any) => user.role === 'finder');\n  const clients = users.filter((user: any) => user.role === 'client');\n\n  // Fetch admin settings\n  const { data: settings } = useQuery({\n    queryKey: ['/api/admin/settings']\n  });\n\n  // Set initial values when settings are loaded\n  useEffect(() => {\n    if (settings) {\n      setHighBudgetThreshold(settings.highBudgetThreshold || \"100000\");\n      setHighBudgetTokenCost(settings.highBudgetTokenCost || \"5\");\n    }\n  }, [settings]);\n\n  // Fetch token grants\n  const { data: tokenGrants = [], isLoading: isLoadingGrants } = useQuery<TokenGrant[]>({\n    queryKey: [\"/api/admin/token-grants\"],\n  });\n\n  // Fetch monthly distributions\n  const { data: monthlyDistributions = [], isLoading: isLoadingDistributions } = useQuery({\n    queryKey: [\"/api/admin/monthly-distributions\", selectedMonth, selectedYear],\n    queryFn: () => apiRequest(`/api/admin/monthly-distributions?month=${selectedMonth}&year=${selectedYear}`)\n  });\n\n  // Sync token balances mutation\n  const syncTokenBalances = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/sync-token-balances\", {\n      method: \"POST\",\n    }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Token Balances Synced\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/token-grants\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sync Failed\",\n        description: error.message || \"Failed to sync token balances\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Distribute monthly tokens mutation\n  const distributeMonthlyTokens = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/distribute-monthly-tokens\", {\n      method: \"POST\",\n    }),\n    onSuccess: (data) => {\n      toast({\n        title: \"Monthly Tokens Distributed\",\n        description: `Distributed to ${data.distributed} finders. ${data.alreadyDistributed} already received tokens this month.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/monthly-distributions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Distribution Failed\",\n        description: error.message || \"Failed to distribute monthly tokens\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Grant tokens to specific user mutation\n  const grantTokens = useMutation({\n    mutationFn: (data: { userId: string; userRole: string; amount: number; reason: string }) =>\n      apiRequest(\"/api/admin/grant-tokens\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Tokens Granted\",\n        description: `Tokens have been successfully granted to the ${selectedUserRole}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/token-grants\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setShowGrantDialog(false);\n      setSelectedUserId(\"\");\n      setSelectedUserRole(\"finder\");\n      setGrantAmount(\"\");\n      setGrantReason(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Grant Failed\",\n        description: error.message || \"Failed to grant tokens\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update high budget settings mutation\n  const updateHighBudgetSettings = useMutation({\n    mutationFn: (data: { highBudgetThreshold: string; highBudgetTokenCost: string }) =>\n      apiRequest(\"/api/admin/settings\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"High budget posting settings have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateHighBudgetSettings = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!highBudgetThreshold || !highBudgetTokenCost) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateHighBudgetSettings.mutate({\n      highBudgetThreshold,\n      highBudgetTokenCost,\n    });\n  };\n\n  const handleGrantTokens = () => {\n    if (!selectedUserId || !grantAmount || !grantReason) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseInt(grantAmount);\n    if (amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Amount must be greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    grantTokens.mutate({\n      userId: selectedUserId,\n      userRole: selectedUserRole,\n      amount,\n      reason: grantReason,\n    });\n  };\n\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <AdminHeader currentPage=\"token-management\" />\n      <div className=\"container mx-auto p-3 sm:p-6 space-y-4 sm:space-y-6\">\n        <div className=\"flex items-center gap-3 mb-4 sm:mb-6\">\n          <Coins className=\"h-6 w-6 sm:h-8 sm:w-8 text-red-600\" />\n          <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-bold\">Token Management</h1>\n        </div>\n\n      <Tabs defaultValue=\"distribute\" className=\"space-y-4 sm:space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4 h-auto gap-1\">\n          <TabsTrigger value=\"distribute\" className=\"text-xs sm:text-sm px-2 py-2\">\n            <span className=\"hidden sm:inline\">Monthly Distribution</span>\n            <span className=\"sm:hidden\">Monthly</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"grant\" className=\"text-xs sm:text-sm px-2 py-2\">\n            <span className=\"hidden sm:inline\">Grant Tokens</span>\n            <span className=\"sm:hidden\">Grant</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"text-xs sm:text-sm px-2 py-2\">\n            <span className=\"hidden sm:inline\">High Budget Settings</span>\n            <span className=\"sm:hidden\">Settings</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" className=\"text-xs sm:text-sm px-2 py-2\">History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"distribute\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Monthly Token Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground text-sm sm:text-base\">\n                Distribute 20 tokens to all active finders for the current month.\n                This can only be done once per month per finder.\n              </p>\n\n              <Button\n                onClick={() => distributeMonthlyTokens.mutate()}\n                disabled={distributeMonthlyTokens.isPending}\n                className=\"bg-red-600 hover:bg-red-700 w-full sm:w-auto text-sm sm:text-base\"\n              >\n                {distributeMonthlyTokens.isPending ? \"Distributing...\" : \"Distribute Monthly Tokens\"}\n              </Button>\n\n              {/* Current month's distribution status */}\n              <div className=\"mt-4 sm:mt-6\">\n                <h3 className=\"text-base sm:text-lg font-semibold mb-3\">\n                  {months[new Date().getMonth()]} {new Date().getFullYear()} Distribution Status\n                </h3>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-xl sm:text-2xl font-bold text-green-600\">\n                          {monthlyDistributions.length}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-muted-foreground\">Finders Received</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">\n                          {monthlyDistributions.length * 20}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-muted-foreground\">Total Tokens Distributed</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-3 sm:p-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-xl sm:text-2xl font-bold text-orange-600\">\n                          {finders.length - monthlyDistributions.length}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-muted-foreground\">Pending Finders</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"grant\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Gift className=\"h-5 w-5\" />\n                Grant Tokens to Finder\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Dialog open={showGrantDialog} onOpenChange={setShowGrantDialog}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-red-600 hover:bg-red-700 w-full sm:w-auto\">\n                    Grant Tokens\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"w-[95vw] max-w-md mx-auto\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-sm sm:text-base\">Grant Tokens to {selectedUserRole === 'finder' ? 'Finder' : 'Client'}</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4 max-h-[70vh] overflow-y-auto\">\n                    <div>\n                      <Label htmlFor=\"role-select\">User Type</Label>\n                      <Select value={selectedUserRole} onValueChange={(value: \"finder\" | \"client\") => {\n                        setSelectedUserRole(value);\n                        setSelectedUserId(\"\"); // Reset user selection when role changes\n                      }}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"finder\">Finder</SelectItem>\n                          <SelectItem value=\"client\">Client</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"user-select\">Select {selectedUserRole === 'finder' ? 'Finder' : 'Client'}</Label>\n                      <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                        <SelectTrigger>\n                          <SelectValue placeholder={`Choose a ${selectedUserRole}...`} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(selectedUserRole === 'finder' ? finders : clients).map((user: any) => (\n                            <SelectItem key={user.id} value={user.id}>\n                              {user.firstName} {user.lastName} ({user.email})\n                              <span className=\"ml-2 text-muted-foreground\">\n                                - Balance: {user.findertokenBalance || 0} tokens\n                              </span>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"amount\">Amount</Label>\n                      <Input\n                        id=\"amount\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={grantAmount}\n                        onChange={(e) => setGrantAmount(e.target.value)}\n                        placeholder=\"Number of tokens to grant\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"reason\">Reason</Label>\n                      <Textarea\n                        id=\"reason\"\n                        value={grantReason}\n                        onChange={(e) => setGrantReason(e.target.value)}\n                        placeholder=\"Reason for granting tokens...\"\n                        rows={3}\n                      />\n                    </div>\n\n                    <div className=\"flex flex-col sm:flex-row gap-2\">\n                      <Button\n                        onClick={handleGrantTokens}\n                        disabled={grantTokens.isPending}\n                        className=\"bg-red-600 hover:bg-red-700 flex-1 text-sm\"\n                      >\n                        {grantTokens.isPending ? \"Granting...\" : \"Grant Tokens\"}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setShowGrantDialog(false)}\n                        className=\"flex-1 text-sm\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\">\n          <div className=\"space-y-6\">\n            {/* Token Balance Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  Token Balance Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 sm:p-4\">\n                  <h3 className=\"text-base sm:text-lg font-semibold text-yellow-800 mb-2\">Token Balance Synchronization</h3>\n                  <p className=\"text-yellow-700 mb-3 sm:mb-4 text-sm sm:text-base\">\n                    If you notice discrepancies in finder token balances, use this tool to recalculate and sync all balances based on transaction history.\n                  </p>\n                  <Button\n                    onClick={() => syncTokenBalances.mutate()}\n                    disabled={syncTokenBalances.isPending}\n                    variant=\"outline\"\n                    className=\"border-yellow-300 text-yellow-700 hover:bg-yellow-100 w-full sm:w-auto text-sm sm:text-base\"\n                  >\n                    {syncTokenBalances.isPending ? \"Syncing...\" : \"Sync All Token Balances\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* High Budget Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  High Budget Posting Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleUpdateHighBudgetSettings} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {/* High Budget Threshold */}\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"highBudgetThreshold\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                        <Target className=\"w-4 h-4 mr-2 text-purple-600\" />\n                        High Budget Threshold (‚Ç¶)\n                      </Label>\n                      <Input\n                        id=\"highBudgetThreshold\"\n                        type=\"number\"\n                        min=\"1000\"\n                        step=\"100\"\n                        value={highBudgetThreshold}\n                        onChange={(e) => setHighBudgetThreshold(e.target.value)}\n                        className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-purple-500 focus:ring-purple-500/20\"\n                        placeholder=\"Enter threshold amount\"\n                      />\n                      <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-purple-700\">\n                          <strong>Current:</strong> ‚Ç¶{parseInt(highBudgetThreshold || \"100000\").toLocaleString()} threshold\n                        </p>\n                        <p className=\"text-xs text-purple-600 mt-1\">\n                          Posts with budget ‚â• this amount require findertokens\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* High Budget Token Cost */}\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"highBudgetTokenCost\" className=\"text-slate-700 text-sm font-semibold flex items-center\">\n                        <Coins className=\"w-4 h-4 mr-2 text-indigo-600\" />\n                        Required Findertokens\n                      </Label>\n                      <Input\n                        id=\"highBudgetTokenCost\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={highBudgetTokenCost}\n                        onChange={(e) => setHighBudgetTokenCost(e.target.value)}\n                        className=\"h-12 text-lg bg-white/80 border-slate-200 focus:border-indigo-500 focus:ring-indigo-500/20\"\n                        placeholder=\"Enter token count\"\n                      />\n                      <div className=\"bg-indigo-50 border border-indigo-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-indigo-700\">\n                          <strong>Current:</strong> {highBudgetTokenCost || \"5\"} findertokens required\n                        </p>\n                        <p className=\"text-xs text-indigo-600 mt-1\">\n                          Tokens deducted for high-budget posts\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button\n                      type=\"submit\"\n                      disabled={updateHighBudgetSettings.isPending}\n                      className=\"bg-red-600 hover:bg-red-700 px-6\"\n                    >\n                      {updateHighBudgetSettings.isPending ? \"Updating...\" : \"Update High Budget Settings\"}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"history\">\n          <div className=\"space-y-6\">\n            {/* Token Grants History */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gift className=\"h-5 w-5\" />\n                  Token Grants History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingGrants ? (\n                  <div className=\"text-center py-4\">Loading grants...</div>\n                ) : tokenGrants.length === 0 ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No token grants found\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {tokenGrants.map((grant: TokenGrant) => {\n                      const userName = grant.user?.firstName && grant.user?.lastName \n                        ? `${grant.user.firstName} ${grant.user.lastName}`\n                        : grant.finder?.user?.firstName && grant.finder?.user?.lastName\n                        ? `${grant.finder.user.firstName} ${grant.finder.user.lastName}`\n                        : 'Unknown User';\n                      \n                      const userEmail = grant.user?.email || grant.finder?.user?.email || 'No email';\n                      \n                      return (\n                        <div\n                          key={grant.id}\n                          className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 sm:p-4 border rounded-lg gap-3 sm:gap-0\"\n                        >\n                          <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                            <User className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                            <div className=\"min-w-0 flex-1\">\n                              <div className=\"flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-2\">\n                                <div className=\"font-medium text-sm sm:text-base truncate\">{userName}</div>\n                                <Badge variant=\"outline\" className=\"text-xs w-fit\">\n                                  {grant.userType}\n                                </Badge>\n                              </div>\n                              <div className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n                                {userEmail}\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"flex flex-row sm:flex-col items-center sm:items-end justify-between sm:justify-start gap-2 sm:gap-1 text-right\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{grant.amount} tokens\n                            </Badge>\n                            <div className=\"flex flex-col text-right\">\n                              <div className=\"text-xs text-muted-foreground\">\n                                by {grant.grantedByUser?.firstName || 'Unknown'} {grant.grantedByUser?.lastName || 'Admin'}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {format(new Date(grant.createdAt), 'MMM d, yyyy h:mm a')}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Monthly Distributions History */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Monthly Distributions History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 mb-4\">\n                  <Select\n                    value={selectedMonth.toString()}\n                    onValueChange={(value) => setSelectedMonth(parseInt(value))}\n                  >\n                    <SelectTrigger className=\"w-full sm:w-40\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {months.map((month, index) => (\n                        <SelectItem key={index + 1} value={(index + 1).toString()}>\n                          {month}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Select\n                    value={selectedYear.toString()}\n                    onValueChange={(value) => setSelectedYear(parseInt(value))}\n                  >\n                    <SelectTrigger className=\"w-full sm:w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {[2024, 2025, 2026].map((year) => (\n                        <SelectItem key={year} value={year.toString()}>\n                          {year}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {isLoadingDistributions ? (\n                  <div className=\"text-center py-4\">Loading distributions...</div>\n                ) : monthlyDistributions.length === 0 ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    No distributions found for {months[selectedMonth - 1]} {selectedYear}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {monthlyDistributions.map((distribution: MonthlyDistribution) => (\n                      <div\n                        key={distribution.id}\n                        className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 sm:p-4 border rounded-lg gap-3 sm:gap-0\"\n                      >\n                        <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                          <User className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                          <div className=\"min-w-0 flex-1\">\n                            <div className=\"font-medium text-sm sm:text-base truncate\">\n                              {distribution.finder?.user?.firstName || 'Unknown'} {distribution.finder?.user?.lastName || 'User'}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n                              {distribution.finder?.user?.email || 'No email available'}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-row sm:flex-col items-center sm:items-end justify-between sm:justify-start gap-2 sm:gap-1 text-right\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{distribution.tokensGranted} tokens\n                          </Badge>\n                          <div className=\"text-xs text-muted-foreground\">\n                            <Clock className=\"h-3 w-3 inline mr-1\" />\n                            {format(new Date(distribution.distributedAt), 'MMM d, yyyy h:mm a')}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":30451},"client/src/pages/admin/token-packages.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\nimport AdminHeader from '@/components/admin-header';\nimport { \n  Package, \n  Plus, \n  Edit, \n  Trash2, \n  Save, \n  X, \n  Coins,\n  DollarSign,\n  Hash,\n  FileText\n} from 'lucide-react';\nimport type { TokenPackage, InsertTokenPackage } from '@shared/schema';\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n};\n\nexport default function TokenPackagesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  // Remove getToken from useAuth hook\n  \n  const [isCreating, setIsCreating] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<TokenPackage | null>(null);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [formData, setFormData] = useState<Partial<InsertTokenPackage>>({\n    name: '',\n    description: '',\n    price: '',\n    tokenCount: 0,\n    isActive: true\n  });\n\n  // Fetch token packages\n  const { data: tokenPackages = [], isLoading } = useQuery<TokenPackage[]>({\n    queryKey: ['/api/admin/token-packages']\n  });\n\n  // Create token package mutation\n  const createPackageMutation = useMutation({\n    mutationFn: async (packageData: InsertTokenPackage) => {\n      const response = await fetch('/api/admin/token-packages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('findermeister_token')}`\n        },\n        body: JSON.stringify(packageData)\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create token package');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/token-packages'] });\n      setIsCreating(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Token package created successfully\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update token package mutation\n  const updatePackageMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: Partial<TokenPackage> }) => {\n      const response = await fetch(`/api/admin/token-packages/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('findermeister_token')}`\n        },\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update token package');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/token-packages'] });\n      setEditingPackage(null);\n      setEditModalOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Token package updated successfully\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete token package mutation\n  const deletePackageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/token-packages/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('findermeister_token')}`\n        }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete token package');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/token-packages'] });\n      toast({\n        title: \"Success\",\n        description: \"Token package deleted successfully\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      price: '',\n      tokenCount: 0,\n      isActive: true\n    });\n  };\n\n  const startEdit = (pkg: TokenPackage) => {\n    setEditingPackage(pkg);\n    setFormData({\n      name: pkg.name,\n      description: pkg.description || '',\n      price: pkg.price,\n      tokenCount: pkg.tokenCount,\n      isActive: pkg.isActive\n    });\n    setEditModalOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const price = parseFloat(formData.price || '0');\n    const tokenCount = parseInt(formData.tokenCount?.toString() || '0');\n    \n    if (!formData.name || price <= 0 || tokenCount <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields with valid values\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createPackageMutation.mutate({\n      ...formData,\n      price: price.toString(),\n      tokenCount\n    } as InsertTokenPackage);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"token-packages\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading token packages...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"token-packages\" />\n      \n      {/* Header Section */}\n      <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-6\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-3 sm:gap-4 min-w-0 flex-1\">\n              <div className=\"relative shrink-0\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl blur opacity-60\"></div>\n                <div className=\"relative p-3 sm:p-4 bg-gradient-to-r from-green-500 to-blue-500 rounded-2xl\">\n                  <Package className=\"w-6 h-6 sm:w-7 sm:h-7 text-white\" />\n                </div>\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <h1 className=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent break-words\">\n                  Token Packages\n                </h1>\n                <p className=\"text-gray-500 dark:text-gray-400 font-medium text-sm sm:text-base\">\n                  Manage token packages for finders\n                </p>\n              </div>\n            </div>\n            \n            <Button \n              onClick={() => setIsCreating(true)}\n              className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 w-full sm:w-auto shrink-0\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              <span className=\"text-sm\">Create Package</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Create Form */}\n        {isCreating && (\n          <Card className=\"mb-8 backdrop-blur-sm bg-white/90 border border-white/20 shadow-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-800 flex items-center text-lg sm:text-xl\">\n                <Plus className=\"w-5 h-5 mr-2 text-green-600\" />\n                Create New Token Package\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\" className=\"flex items-center text-sm\">\n                      <FileText className=\"w-4 h-4 mr-2 text-blue-500\" />\n                      Package Name *\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"e.g., Bronze Tier, Mega Pack\"\n                      className=\"bg-white/80 w-full\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tokenCount\" className=\"flex items-center text-sm\">\n                      <Hash className=\"w-4 h-4 mr-2 text-orange-500\" />\n                      Number of Tokens *\n                    </Label>\n                    <Input\n                      id=\"tokenCount\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={formData.tokenCount || ''}\n                      onChange={(e) => setFormData(prev => ({ ...prev, tokenCount: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"e.g., 100\"\n                      className=\"bg-white/80 w-full\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"price\" className=\"flex items-center text-sm\">\n                      <DollarSign className=\"w-4 h-4 mr-2 text-green-500\" />\n                      Price (‚Ç¶) *\n                    </Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      min=\"0.01\"\n                      step=\"0.01\"\n                      value={formData.price}\n                      onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                      placeholder=\"e.g., 5000.00\"\n                      className=\"bg-white/80 w-full\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"flex items-center text-sm\">\n                      <Coins className=\"w-4 h-4 mr-2 text-purple-500\" />\n                      Active Status\n                    </Label>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Switch\n                        checked={formData.isActive || false}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                      />\n                      <span className=\"text-sm text-gray-600 break-words\">\n                        {formData.isActive ? 'Active (available for purchase)' : 'Inactive (hidden from finders)'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\" className=\"text-sm\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description || ''}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"e.g., 100 tokens to get you started\"\n                    className=\"bg-white/80 min-h-[100px] w-full resize-none\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createPackageMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700 w-full sm:w-auto\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    {createPackageMutation.isPending \n                      ? \"Saving...\" \n                      : \"Create Package\"\n                    }\n                  </Button>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreating(false);\n                      resetForm();\n                    }}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Edit Modal */}\n        <Dialog open={editModalOpen} onOpenChange={setEditModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto mx-4\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center text-lg sm:text-xl\">\n                <Edit className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Edit Token Package\n              </DialogTitle>\n              <DialogDescription className=\"text-sm\">\n                Update the details of this token package. Changes will be saved immediately.\n              </DialogDescription>\n            </DialogHeader>\n            \n            <form onSubmit={(e) => {\n              e.preventDefault();\n              const price = parseFloat(formData.price || '0');\n              const tokenCount = parseInt(formData.tokenCount?.toString() || '0');\n              \n              if (!formData.name || price <= 0 || tokenCount <= 0) {\n                toast({\n                  title: \"Validation Error\",\n                  description: \"Please fill in all required fields with valid values\",\n                  variant: \"destructive\"\n                });\n                return;\n              }\n\n              if (editingPackage) {\n                updatePackageMutation.mutate({\n                  id: editingPackage.id,\n                  data: {\n                    ...formData,\n                    price: price.toString(),\n                    tokenCount\n                  }\n                });\n              }\n            }} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-name\" className=\"flex items-center text-sm\">\n                    <FileText className=\"w-4 h-4 mr-2 text-blue-500\" />\n                    Package Name *\n                  </Label>\n                  <Input\n                    id=\"edit-name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., Bronze Tier, Mega Pack\"\n                    className=\"w-full\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-tokenCount\" className=\"flex items-center text-sm\">\n                    <Hash className=\"w-4 h-4 mr-2 text-orange-500\" />\n                    Token Count *\n                  </Label>\n                  <Input\n                    id=\"edit-tokenCount\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.tokenCount || ''}\n                    onChange={(e) => setFormData(prev => ({ ...prev, tokenCount: parseInt(e.target.value) || 0 }))}\n                    placeholder=\"e.g., 100\"\n                    className=\"w-full\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-price\" className=\"flex items-center text-sm\">\n                    <DollarSign className=\"w-4 h-4 mr-2 text-green-500\" />\n                    Price (‚Ç¶) *\n                  </Label>\n                  <Input\n                    id=\"edit-price\"\n                    type=\"number\"\n                    min=\"0.01\"\n                    step=\"0.01\"\n                    value={formData.price}\n                    onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                    placeholder=\"e.g., 5000.00\"\n                    className=\"w-full\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"flex items-center text-sm\">\n                    <Coins className=\"w-4 h-4 mr-2 text-purple-500\" />\n                    Active Status\n                  </Label>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <Switch\n                      checked={formData.isActive || false}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n                    />\n                    <span className=\"text-sm text-gray-600 break-words\">\n                      {formData.isActive ? 'Active (available for purchase)' : 'Inactive (hidden from finders)'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-description\" className=\"text-sm\">Description</Label>\n                <Textarea\n                  id=\"edit-description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"e.g., 100 tokens to get you started\"\n                  className=\"min-h-[100px] w-full resize-none\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4 pt-4 border-t\">\n                <Button \n                  type=\"submit\" \n                  disabled={updatePackageMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 w-full sm:flex-1\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {updatePackageMutation.isPending ? \"Updating...\" : \"Update Package\"}\n                </Button>\n                <Button \n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setEditModalOpen(false);\n                    setEditingPackage(null);\n                    resetForm();\n                  }}\n                  className=\"w-full sm:flex-1\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Token Packages List */}\n        <Card className=\"backdrop-blur-sm bg-white/90 border border-white/20 shadow-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-800 flex items-center\">\n              <Package className=\"w-5 h-5 mr-2\" />\n              Token Packages ({tokenPackages.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {tokenPackages.length === 0 ? (\n              <div className=\"text-center py-12 text-slate-500\">\n                <Package className=\"w-16 h-16 mx-auto mb-4 text-slate-300\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No token packages yet</h3>\n                <p className=\"text-sm sm:text-base\">Create your first token package to get started.</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-4 sm:gap-6 grid-cols-1 sm:grid-cols-2 xl:grid-cols-3\">\n                {tokenPackages.map((pkg: TokenPackage) => (\n                  <Card key={pkg.id} className=\"border border-gray-200 hover:shadow-lg transition-all duration-200 w-full\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <CardTitle className=\"text-base sm:text-lg font-bold text-gray-900 break-words flex-1 min-w-0\">\n                          {pkg.name}\n                        </CardTitle>\n                        <Badge variant={pkg.isActive ? \"default\" : \"secondary\"} className=\"shrink-0\">\n                          {pkg.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {pkg.description && (\n                          <p className=\"text-gray-600 text-sm break-words\">{pkg.description}</p>\n                        )}\n                        \n                        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-3 sm:p-4 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-sm font-medium text-gray-600\">Price</span>\n                            <span className=\"text-base sm:text-lg font-bold text-green-600 break-words\">\n                              {formatCurrency(pkg.price)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium text-gray-600\">Tokens</span>\n                            <span className=\"text-base sm:text-lg font-bold text-blue-600\">{pkg.tokenCount}</span>\n                          </div>\n                          <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                            <div className=\"text-center\">\n                              <span className=\"text-xs text-gray-500\">Price per token: </span>\n                              <span className=\"text-xs sm:text-sm font-semibold text-orange-600 break-words\">\n                                {formatCurrency(parseFloat(pkg.price) / pkg.tokenCount)}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            onClick={() => startEdit(pkg)}\n                            className=\"flex-1 w-full\"\n                            disabled={updatePackageMutation.isPending}\n                          >\n                            <Edit className=\"w-3 h-3 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              if (confirm(`Are you sure you want to delete \"${pkg.name}\"?`)) {\n                                deletePackageMutation.mutate(pkg.id);\n                              }\n                            }}\n                            disabled={deletePackageMutation.isPending}\n                            className=\"text-red-600 border-red-200 hover:bg-red-50 w-full sm:w-auto\"\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":24928},"client/src/pages/admin/users-old.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { \n  ArrowLeft,\n  Users, \n  Shield, \n  Search,\n  CheckCircle,\n  XCircle,\n  MoreVertical,\n  UserCheck,\n  UserX\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function AdminUsers() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [banReason, setBanReason] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const verifyUserMutation = useMutation({\n    mutationFn: async ({ userId, action }: { userId: string; action: 'verify' | 'unverify' }) => {\n      return await apiRequest('POST', `/api/admin/users/${userId}/${action}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({\n        title: \"Success\",\n        description: \"User verification status updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user verification\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const banUserMutation = useMutation({\n    mutationFn: async ({ userId, action, reason }: { userId: string; action: 'ban' | 'unban'; reason?: string }) => {\n      return await apiRequest('POST', `/api/admin/users/${userId}/${action}`, \n        action === 'ban' ? { reason } : undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setSelectedUser(null);\n      setBanReason(\"\");\n      toast({\n        title: \"Success\",\n        description: \"User ban status updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user ban status\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleVerifyUser = (userId: string, shouldVerify: boolean) => {\n    verifyUserMutation.mutate({\n      userId,\n      action: shouldVerify ? 'verify' : 'unverify'\n    });\n  };\n\n  const handleBanUser = (userId: string, shouldBan: boolean) => {\n    if (shouldBan) {\n      const user = users.find(u => u.id === userId);\n      setSelectedUser(user || null);\n    } else {\n      banUserMutation.mutate({ userId, action: 'unban' });\n    }\n  };\n\n  const confirmBanUser = () => {\n    if (!selectedUser || !banReason.trim()) return;\n    \n    banUserMutation.mutate({\n      userId: selectedUser.id,\n      action: 'ban',\n      reason: banReason\n    });\n  };\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  // Filter users based on search term\n  const filteredUsers = users.filter(u => \n    u.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.role.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading users...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const totalUsers = users.length;\n  const clientCount = users.filter(u => u.role === 'client').length;\n  const finderCount = users.filter(u => u.role === 'finder').length;\n  const adminCount = users.filter(u => u.role === 'admin').length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"users\" />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Page Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Users</h1>\n            <p className=\"text-gray-600\">Manage all registered users on the platform</p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-blue-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-sm sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Total Users</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">{totalUsers}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <UserCheck className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-sm sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Clients</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-green-600\">{clientCount}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-purple-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Search className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-sm sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Finders</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-purple-600\">{finderCount}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-finder-red rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Shield className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-sm sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Admins</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-finder-red\">{adminCount}</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search users by name, email, or role...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>All Users ({filteredUsers.length})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredUsers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No users found</h3>\n                <p className=\"text-gray-600\">\n                  {searchTerm ? \"Try adjusting your search criteria.\" : \"No users have registered yet.\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredUsers.map((userData: User) => (\n                  <div key={userData.id} className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 border rounded-lg hover:bg-gray-50 gap-4\">\n                    <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n                      <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-gray-600\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-gray-900 truncate\">\n                          {userData.firstName} {userData.lastName}\n                        </h4>\n                        <p className=\"text-gray-600 text-sm truncate\">{userData.email}</p>\n                        {userData.phone && (\n                          <p className=\"text-gray-500 text-xs truncate\">{userData.phone}</p>\n                        )}\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row items-end sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                        <Badge variant={\n                          userData.role === 'admin' ? 'destructive' :\n                          userData.role === 'finder' ? 'default' :\n                          'secondary'\n                        } className=\"w-fit\">\n                          {userData.role}\n                        </Badge>\n                        <div className=\"flex items-center\">\n                          {userData.isVerified ? (\n                            <CheckCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"w-4 h-4 sm:w-5 sm:h-5 text-finder-red\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between sm:justify-end space-x-2 sm:ml-4\">\n                      <span className=\"text-sm text-gray-500\">\n                        <span className=\"hidden sm:inline\">Joined </span>\n                        {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n                      </span>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          {userData.role === 'finder' ? (\n                            <Link href={`/finder-profile/${userData.id}`}>\n                              <DropdownMenuItem>View Finder Profile</DropdownMenuItem>\n                            </Link>\n                          ) : (\n                            <DropdownMenuItem>View Details</DropdownMenuItem>\n                          )}\n                          <DropdownMenuItem onClick={() => handleVerifyUser(userData.id, !userData.isVerified)}>\n                            {userData.isVerified ? \"Unverify\" : \"Verify\"} User\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            className={userData.isBanned ? \"text-green-600\" : \"text-finder-red\"}\n                            onClick={() => handleBanUser(userData.id, !userData.isBanned)}\n                          >\n                            {userData.isBanned ? \"Unban\" : \"Ban\"} User\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Ban User Dialog */}\n        <Dialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Ban User</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600\">\n                You are about to ban <strong>{selectedUser?.firstName} {selectedUser?.lastName}</strong> ({selectedUser?.email}).\n                This will prevent them from accessing the platform.\n              </p>\n              <div>\n                <Label htmlFor=\"banReason\">Reason for ban *</Label>\n                <Textarea\n                  id=\"banReason\"\n                  value={banReason}\n                  onChange={(e) => setBanReason(e.target.value)}\n                  placeholder=\"Please provide a reason for banning this user...\"\n                  required\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setSelectedUser(null)}>\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={confirmBanUser}\n                  disabled={!banReason.trim() || banUserMutation.isPending}\n                >\n                  {banUserMutation.isPending ? \"Banning...\" : \"Ban User\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":14245},"client/src/pages/admin/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminIssueStrike from \"@/components/admin-issue-strike\";\nimport { \n  Users, \n  Search, \n  MoreVertical, \n  UserCheck, \n  UserX, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  Eye,\n  Mail,\n  Calendar,\n  Crown,\n  Star,\n  ShieldCheck,\n  Ban\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface ExtendedUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: 'admin' | 'finder' | 'client';\n  isVerified: boolean;\n  isBanned: boolean;\n  createdAt?: string;\n  profileImageUrl?: string;\n}\n\nexport default function AdminUsers() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [banDialogOpen, setBanDialogOpen] = useState(false);\n  const [banReason, setBanReason] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<ExtendedUser | null>(null);\n\n  const { data: users = [], isLoading } = useQuery<ExtendedUser[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const verifyUserMutation = useMutation({\n    mutationFn: async ({ userId, action }: { userId: string; action: 'verify' | 'unverify' }) => {\n      return await apiRequest(`/api/admin/users/${userId}/${action}`, { method: \"POST\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({ title: \"Success\", description: \"User verification updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to update user verification\", variant: \"destructive\" });\n    }\n  });\n\n  const banUserMutation = useMutation({\n    mutationFn: async ({ userId, action, reason }: { userId: string; action: 'ban' | 'unban'; reason?: string }) => {\n      const url = `/api/admin/users/${userId}/${action}`;\n      const options: any = { method: \"POST\" };\n      \n      if (action === 'ban' && reason) {\n        options.headers = { 'Content-Type': 'application/json' };\n        options.body = JSON.stringify({ reason });\n      }\n      \n      return await apiRequest(url, options);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setBanDialogOpen(false);\n      setSelectedUser(null);\n      setBanReason(\"\");\n      toast({ title: \"Success\", description: \"User ban status updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to update ban status\", variant: \"destructive\" });\n    }\n  });\n\n  const handleVerifyUser = (userId: string, shouldVerify: boolean) => {\n    verifyUserMutation.mutate({ userId, action: shouldVerify ? 'verify' : 'unverify' });\n  };\n\n  const handleBanUser = (userToBan: ExtendedUser, shouldBan: boolean) => {\n    if (shouldBan) {\n      setSelectedUser(userToBan);\n      setBanDialogOpen(true);\n    } else {\n      banUserMutation.mutate({ userId: userToBan.id, action: 'unban' });\n    }\n  };\n\n  const confirmBanUser = () => {\n    if (!selectedUser || !banReason.trim()) {\n      toast({ \n        title: \"Error\", \n        description: \"Please provide a reason for banning this user\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n    banUserMutation.mutate({ userId: selectedUser.id, action: 'ban', reason: banReason.trim() });\n  };\n\n  // Filter users based on search term and exclude admins\n  const filteredUsers = users.filter(u => \n    u.role !== 'admin' && (\n      u.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      u.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      u.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      u.role.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  );\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return <Crown className=\"w-3 h-3\" />;\n      case 'finder': return <Star className=\"w-3 h-3\" />;\n      case 'client': return <Users className=\"w-3 h-3\" />;\n      default: return <Users className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'finder': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'client': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getProfileUrl = (userData: ExtendedUser) => {\n    switch (userData.role) {\n      case 'finder':\n        return `/finder-profile/${userData.id}`;\n      case 'client':\n        return `/client/profile/${userData.id}`;\n      default:\n        return '#';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"users\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading users...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate stats\n  const stats = {\n    total: users.length,\n    verified: users.filter(u => u.isVerified).length,\n    banned: users.filter(u => u.isBanned).length,\n    admins: users.filter(u => u.role === 'admin').length,\n    finders: users.filter(u => u.role === 'finder').length,\n    clients: users.filter(u => u.role === 'client').length\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20 dark:from-gray-900 dark:via-blue-900/10 dark:to-indigo-900/10\">\n      <AdminHeader currentPage=\"users\" />\n      \n      {/* Header Section */}\n      <div className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50 sticky top-16 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-6\">\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div className=\"flex items-center gap-3 sm:gap-4\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl blur opacity-60\"></div>\n                  <div className=\"relative p-3 sm:p-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl\">\n                    <Users className=\"w-5 h-5 sm:w-7 sm:h-7 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent\">\n                    User Management\n                  </h1>\n                  <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 font-medium\">Monitor and manage platform users</p>\n                </div>\n              </div>\n              \n              {/* Search Bar */}\n              <div className=\"relative w-full sm:max-w-md\">\n                <Search className=\"absolute left-3 sm:left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4 sm:w-5 sm:h-5\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 sm:pl-12 h-10 sm:h-12 bg-white/80 dark:bg-gray-800/80 border-gray-200/50 dark:border-gray-700/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-4 sm:py-8\">\n        {/* Compact Users Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4\">\n          {filteredUsers.map((userData) => (\n            <Link key={userData.id} href={getProfileUrl(userData)}>\n              <Card className=\"group bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-md hover:shadow-xl transition-all duration-300 hover:scale-[1.02] cursor-pointer rounded-lg overflow-hidden\">\n                <CardContent className=\"p-3\">\n                    {/* Compact User Header */}\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                        {/* Smaller Profile Image */}\n                        <div className=\"relative flex-shrink-0\">\n                          <div className={`w-8 h-8 bg-gradient-to-br ${\n                            userData.role === 'admin' ? 'from-purple-500 to-purple-600' :\n                            userData.role === 'finder' ? 'from-blue-500 to-blue-600' : 'from-green-500 to-green-600'\n                          } rounded-lg flex items-center justify-center text-white font-bold text-xs`}>\n                            {userData.profileImageUrl ? (\n                              <img \n                                src={userData.profileImageUrl} \n                                alt={`${userData.firstName} ${userData.lastName}`}\n                                className=\"w-full h-full object-cover rounded-lg\"\n                              />\n                            ) : (\n                              `${userData.firstName?.charAt(0) || ''}${userData.lastName?.charAt(0) || ''}`\n                            )}\n                          </div>\n                          <div className={`absolute -top-1 -right-1 w-2.5 h-2.5 rounded-full border border-white ${\n                            userData.isBanned ? 'bg-red-500' : userData.isVerified ? 'bg-green-500' : 'bg-gray-400'\n                          }`}></div>\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"text-sm font-semibold text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 truncate transition-colors\">\n                            {userData.firstName} {userData.lastName}\n                          </h3>\n                          <Badge className={`px-2 py-0.5 rounded-full text-xs font-medium border ${getRoleColor(userData.role)}`}>\n                            <div className=\"flex items-center gap-1\">\n                              {getRoleIcon(userData.role)}\n                              <span>{userData.role.charAt(0).toUpperCase() + userData.role.slice(1)}</span>\n                            </div>\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {/* Smaller Action Menu */}\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"opacity-60 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg flex-shrink-0\">\n                            <MoreVertical className=\"w-3 h-3\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\" className=\"w-48 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-xl shadow-lg\">\n                          <DropdownMenuItem onClick={() => handleVerifyUser(userData.id, !userData.isVerified)} className=\"flex items-center gap-2 px-3 py-2 rounded-lg\">\n                            {userData.isVerified ? <UserX className=\"w-4 h-4\" /> : <UserCheck className=\"w-4 h-4\" />}\n                            {userData.isVerified ? 'Unverify User' : 'Verify User'}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleBanUser(userData, !userData.isBanned)} \n                            className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                          >\n                            {userData.isBanned ? <CheckCircle className=\"w-4 h-4\" /> : <XCircle className=\"w-4 h-4\" />}\n                            {userData.isBanned ? 'Unban User' : 'Ban User'}\n                          </DropdownMenuItem>\n                          \n                          {(userData.role === 'client' || userData.role === 'finder') && (\n                            <DropdownMenuItem \n                              onSelect={(e) => e.preventDefault()}\n                              asChild\n                            >\n                              <div className=\"p-0\">\n                                <AdminIssueStrike\n                                  userId={userData.id}\n                                  userRole={userData.role as 'client' | 'finder'}\n                                  userName={`${userData.firstName} ${userData.lastName}`}\n                                  trigger={\n                                    <button \n                                      className=\"flex items-center gap-2 px-3 py-2 rounded-lg text-orange-600 hover:bg-orange-50 dark:hover:bg-orange-900/20 w-full text-left cursor-pointer\"\n                                      type=\"button\"\n                                    >\n                                      <AlertTriangle className=\"w-4 h-4\" />\n                                      Issue Strike\n                                    </button>\n                                  }\n                                  onStrikeIssued={() => queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] })}\n                                />\n                              </div>\n                            </DropdownMenuItem>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                    \n                    {/* Condensed User Details */}\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-1 text-xs text-gray-600 dark:text-gray-400\">\n                        <Mail className=\"w-3 h-3 flex-shrink-0\" />\n                        <span className=\"truncate\">{userData.email}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-1 text-xs text-gray-600 dark:text-gray-400\">\n                        <Calendar className=\"w-3 h-3 flex-shrink-0\" />\n                        <span className=\"truncate\">Joined {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}</span>\n                      </div>\n                      \n                      {/* Compact Status Badges */}\n                      <div className=\"flex items-center gap-1 pt-1\">\n                        {userData.isVerified && (\n                          <Badge className=\"bg-green-100 text-green-800 border-green-200 px-1.5 py-0.5 rounded-full text-xs\">\n                            <CheckCircle className=\"w-2.5 h-2.5 mr-1\" />\n                            Verified\n                          </Badge>\n                        )}\n                        {userData.isBanned && (\n                          <Badge className=\"bg-red-100 text-red-800 border-red-200 px-1.5 py-0.5 rounded-full text-xs\">\n                            <XCircle className=\"w-2.5 h-2.5 mr-1\" />\n                            Banned\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n          ))}\n        </div>\n        \n        {filteredUsers.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"w-24 h-24 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Users className=\"w-12 h-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">No users found</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">Try adjusting your search terms</p>\n          </div>\n        )}\n        \n        {/* Compact Stats Grid */}\n        <div className=\"mt-8 sm:mt-12\">\n          <h2 className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white mb-4 sm:mb-6\">Platform Statistics</h2>\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4\">\n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-blue-500/10 text-blue-600 rounded-lg\">\n                  <Users className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total Users</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.total}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-green-500/10 text-green-600 rounded-lg\">\n                  <ShieldCheck className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Verified</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.verified}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-red-500/10 text-red-600 rounded-lg\">\n                  <Ban className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Banned</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.banned}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-purple-500/10 text-purple-600 rounded-lg\">\n                  <Crown className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Admins</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.admins}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-amber-500/10 text-amber-600 rounded-lg\">\n                  <Star className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Finders</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.finders}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-gray-200/50 dark:border-gray-700/50\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-teal-500/10 text-teal-600 rounded-lg\">\n                  <Users className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Clients</p>\n                  <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{stats.clients}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Ban User Dialog */}\n      <Dialog open={banDialogOpen} onOpenChange={setBanDialogOpen}>\n        <DialogContent className=\"bg-white dark:bg-gray-800 rounded-3xl border-0 shadow-2xl max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">Ban User</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 pt-4\">\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              You are about to ban <strong>{selectedUser?.firstName} {selectedUser?.lastName}</strong>. \n              Please provide a reason for the ban:\n            </p>\n            <Textarea\n              placeholder=\"Enter ban reason...\"\n              value={banReason}\n              onChange={(e) => setBanReason(e.target.value)}\n              className=\"bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 rounded-xl text-sm\"\n              rows={3}\n            />\n            <div className=\"flex gap-3 justify-end pt-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setBanDialogOpen(false)}\n                className=\"rounded-xl\"\n              >\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\"\n                onClick={confirmBanUser}\n                disabled={!banReason.trim() || banUserMutation.isPending}\n                className=\"rounded-xl\"\n              >\n                {banUserMutation.isPending ? \"Banning...\" : \"Ban User\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":23049},"client/src/pages/admin/withdrawals.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  DollarSign, \n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  CreditCard,\n  Download,\n  FileText,\n  Search,\n  ChevronLeft,\n  ChevronRight,\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown\n} from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { WithdrawalRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState, useMemo } from \"react\";\nimport AdminHeader from \"@/components/admin-header\";\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\n\ntype SortField = 'requestedAt' | 'amount' | 'status' | 'finderName';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AdminWithdrawals() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedWithdrawal, setSelectedWithdrawal] = useState<any>(null);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  // Search and pagination state\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  const [sortField, setSortField] = useState<SortField>('requestedAt');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n\n  const { data: withdrawals = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/withdrawals'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const updateWithdrawalMutation = useMutation({\n    mutationFn: async ({ id, status, adminNotes }: { id: string; status: string; adminNotes: string }) => {\n      return await apiRequest(`/api/admin/withdrawals/${id}`, { \n        method: 'PUT', \n        body: JSON.stringify({ status, adminNotes }) \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/withdrawals'] });\n      setSelectedWithdrawal(null);\n      setNewStatus(\"\");\n      setAdminNotes(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Withdrawal request updated successfully\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update withdrawal request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleUpdateWithdrawal = () => {\n    if (!selectedWithdrawal || !newStatus) return;\n\n    updateWithdrawalMutation.mutate({\n      id: selectedWithdrawal.id,\n      status: newStatus,\n      adminNotes\n    });\n  };\n\n  const openProcessDialog = (withdrawal: any) => {\n    setSelectedWithdrawal(withdrawal);\n    setNewStatus(withdrawal.status);\n    setAdminNotes(withdrawal.adminNotes || \"\");\n  };\n\n  // Format currency in Naira\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `‚Ç¶${(numAmount / 100).toFixed(2)}`;\n  };\n\n  // Sort function\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  };\n\n  // Filter and sort withdrawals\n  const filteredAndSortedWithdrawals = useMemo(() => {\n    let filtered = withdrawals.filter(withdrawal => {\n      const matchesSearch = \n        withdrawal.finderName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        withdrawal.finderEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        formatCurrency(withdrawal.amount).includes(searchTerm) ||\n        withdrawal.status.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesStatus = statusFilter === 'all' || withdrawal.status === statusFilter;\n\n      return matchesSearch && matchesStatus;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      let aVal, bVal;\n\n      switch (sortField) {\n        case 'requestedAt':\n          aVal = new Date(a.requestedAt).getTime();\n          bVal = new Date(b.requestedAt).getTime();\n          break;\n        case 'amount':\n          aVal = parseFloat(a.amount);\n          bVal = parseFloat(b.amount);\n          break;\n        case 'status':\n          aVal = a.status;\n          bVal = b.status;\n          break;\n        case 'finderName':\n          aVal = a.finderName || '';\n          bVal = b.finderName || '';\n          break;\n        default:\n          return 0;\n      }\n\n      if (sortDirection === 'asc') {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    });\n\n    return filtered;\n  }, [withdrawals, searchTerm, statusFilter, sortField, sortDirection]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredAndSortedWithdrawals.length / itemsPerPage);\n  const paginatedWithdrawals = filteredAndSortedWithdrawals.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  // Export functions\n  const exportToCSV = () => {\n    const headers = ['Date', 'Finder Name', 'Email', 'Amount', 'Status', 'Payment Method', 'Account Name', 'Account Number', 'Bank Name', 'Admin Notes'];\n    const csvData = filteredAndSortedWithdrawals.map(w => {\n      const paymentDetails = w.paymentDetails ? JSON.parse(w.paymentDetails) : {};\n      return [\n        new Date(w.requestedAt).toLocaleDateString(),\n        w.finderName || '',\n        w.finderEmail || '',\n        formatCurrency(w.amount),\n        w.status,\n        w.paymentMethod || '',\n        paymentDetails.accountName || '',\n        paymentDetails.accountNumber || '',\n        paymentDetails.bankName || '',\n        w.adminNotes || ''\n      ];\n    });\n\n    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...csvData]);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Withdrawals');\n    XLSX.writeFile(workbook, `withdrawals_${new Date().toISOString().split('T')[0]}.xlsx`);\n\n    toast({\n      title: \"Export Complete\",\n      description: \"Withdrawals exported to Excel file successfully\"\n    });\n  };\n\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n\n    doc.setFontSize(20);\n    doc.text('Withdrawal Requests Report', 20, 20);\n    doc.setFontSize(12);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n\n    const tableData = filteredAndSortedWithdrawals.map(w => {\n      const paymentDetails = w.paymentDetails ? JSON.parse(w.paymentDetails) : {};\n      return [\n        new Date(w.requestedAt).toLocaleDateString(),\n        w.finderName || '',\n        formatCurrency(w.amount),\n        w.status,\n        paymentDetails.accountName || '',\n        paymentDetails.bankName || ''\n      ];\n    });\n\n    autoTable(doc, {\n      head: [['Date', 'Finder', 'Amount', 'Status', 'Account Name', 'Bank']],\n      body: tableData,\n      startY: 40,\n      styles: { fontSize: 8 },\n      headStyles: { fillColor: [220, 38, 38] }\n    });\n\n    doc.save(`withdrawals_${new Date().toISOString().split('T')[0]}.pdf`);\n\n    toast({\n      title: \"Export Complete\", \n      description: \"Withdrawals exported to PDF successfully\"\n    });\n  };\n\n  // Get status badge color\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Processing</Badge>;\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\">Approved</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\">Rejected</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">{status}</Badge>;\n    }\n  };\n\n  // Get sort icon\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return <ArrowUpDown className=\"w-4 h-4\" />;\n    return sortDirection === 'asc' ? <ArrowDown className=\"w-4 h-4\" /> : <ArrowUp className=\"w-4 h-4\" />;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AdminHeader currentPage=\"withdrawals\" />\n        <div className=\"flex items-center justify-center min-h-[calc(100vh-4rem)]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading withdrawal requests...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const pendingWithdrawals = withdrawals.filter(w => w.status === 'pending');\n  const processingWithdrawals = withdrawals.filter(w => w.status === 'processing');\n  const completedWithdrawals = withdrawals.filter(w => ['approved', 'rejected'].includes(w.status));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader currentPage=\"withdrawals\" />\n\n      <div className=\"max-w-7xl mx-auto py-4 sm:py-8 px-4 sm:px-6\">\n        {/* Page Header */}\n        <div className=\"mb-6 sm:mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-finder-red rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900\">Withdrawal Management</h1>\n                <p className=\"text-sm sm:text-base text-gray-600\">Review and process finder withdrawal requests</p>\n              </div>\n            </div>\n            <div className=\"flex gap-2 w-full sm:w-auto\">\n              <Button onClick={exportToCSV} variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2 flex-1 sm:flex-none\">\n                <FileText className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Export</span> CSV\n              </Button>\n              <Button onClick={exportToPDF} variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2 flex-1 sm:flex-none\">\n                <Download className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Export</span> PDF\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6 sm:mb-8\">\n          <Card>\n            <CardContent className=\"p-3 sm:p-6 text-center\">\n              <div className=\"bg-yellow-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <Clock className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xs sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Pending</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-yellow-600\">{pendingWithdrawals.length}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6 text-center\">\n              <div className=\"bg-blue-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <AlertTriangle className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xs sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Processing</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-blue-600\">{processingWithdrawals.length}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <CheckCircle className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xs sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Approved</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-green-600\">\n                {withdrawals.filter(w => w.status === 'approved').length}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-3 sm:p-6 text-center\">\n              <div className=\"bg-finder-red rounded-full w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-2 sm:mb-4\">\n                <XCircle className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xs sm:text-base font-semibold text-gray-900 mb-1 sm:mb-2\">Rejected</h3>\n              <p className=\"text-lg sm:text-2xl font-bold text-finder-red\">\n                {withdrawals.filter(w => w.status === 'rejected').length}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filter Controls */}\n        <Card className=\"mb-4 sm:mb-6\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search withdrawals...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 text-sm\"\n                  />\n                </div>\n              </div>\n              <div className=\"w-full sm:w-48\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"text-sm\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"processing\">Processing</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Withdrawal Requests Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Withdrawal Requests ({filteredAndSortedWithdrawals.length} of {withdrawals.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredAndSortedWithdrawals.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <DollarSign className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No withdrawal requests found</h3>\n                <p className=\"text-gray-600\">Try adjusting your search or filter criteria.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {/* Desktop Table View - Hidden on Mobile */}\n                <div className=\"hidden lg:block rounded-lg border overflow-hidden\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-50\" \n                          onClick={() => handleSort('requestedAt')}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            Date {getSortIcon('requestedAt')}\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-50\" \n                          onClick={() => handleSort('finderName')}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            Finder {getSortIcon('finderName')}\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-50\" \n                          onClick={() => handleSort('amount')}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            Amount {getSortIcon('amount')}\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-50\" \n                          onClick={() => handleSort('status')}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            Status {getSortIcon('status')}\n                          </div>\n                        </TableHead>\n                        <TableHead>Bank Details</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedWithdrawals.map((withdrawal: any) => {\n                        const paymentDetails = withdrawal.paymentDetails ? JSON.parse(withdrawal.paymentDetails) : {};\n                        return (\n                          <TableRow key={withdrawal.id} className=\"hover:bg-gray-50\">\n                            <TableCell>\n                              <div className=\"text-sm\">\n                                {new Date(withdrawal.requestedAt).toLocaleDateString()}\n                              </div>\n                              <div className=\"text-xs text-gray-500\">\n                                {new Date(withdrawal.requestedAt).toLocaleTimeString()}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"font-medium\">{withdrawal.finderName || 'N/A'}</div>\n                              <div className=\"text-sm text-gray-600\">{withdrawal.finderEmail}</div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"font-semibold text-green-600\">\n                                {formatCurrency(withdrawal.amount)}\n                              </div>\n                              <div className=\"text-xs text-gray-500 capitalize\">\n                                {withdrawal.paymentMethod?.replace('_', ' ') || 'N/A'}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              {getStatusBadge(withdrawal.status)}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"text-sm\">\n                                <div className=\"font-medium\">{paymentDetails.accountName || 'N/A'}</div>\n                                <div className=\"text-gray-600\">{paymentDetails.accountNumber || 'N/A'}</div>\n                                <div className=\"text-gray-600\">{paymentDetails.bankName || 'N/A'}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button \n                                    variant=\"outline\" \n                                    size=\"sm\"\n                                    onClick={() => openProcessDialog(withdrawal)}\n                                  >\n                                    Process\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle className=\"text-xl font-bold flex items-center gap-2\">\n                                      <DollarSign className=\"w-5 h-5 text-finder-red\" />\n                                      Process Withdrawal Request\n                                    </DialogTitle>\n                                  </DialogHeader>\n\n                                  <div className=\"space-y-6\">\n                                    {/* Header Summary Card */}\n                                    <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-l-4 border-l-finder-red\">\n                                      <CardContent className=\"p-4\">\n                                        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                                          <div className=\"flex items-center gap-4\">\n                                            <div className=\"w-12 h-12 bg-finder-red rounded-full flex items-center justify-center\">\n                                              <span className=\"text-white font-bold text-lg\">\n                                                {selectedWithdrawal?.finderName?.charAt(0) || 'F'}\n                                              </span>\n                                            </div>\n                                            <div>\n                                              <h3 className=\"font-semibold text-lg text-gray-900\">\n                                                {selectedWithdrawal?.finderName || 'N/A'}\n                                              </h3>\n                                              <p className=\"text-sm text-gray-600\">{selectedWithdrawal?.finderEmail}</p>\n                                            </div>\n                                          </div>\n                                          <div className=\"text-right\">\n                                            <div className=\"text-2xl font-bold text-green-600\">\n                                              {selectedWithdrawal && formatCurrency(selectedWithdrawal.amount)}\n                                            </div>\n                                            <p className=\"text-xs text-gray-500\">\n                                              Requested: {selectedWithdrawal && new Date(selectedWithdrawal.requestedAt).toLocaleDateString()}\n                                            </p>\n                                          </div>\n                                        </div>\n                                      </CardContent>\n                                    </Card>\n\n                                    <div className=\"grid lg:grid-cols-2 gap-6\">\n                                      {/* Left Column - Bank Details */}\n                                      <div className=\"space-y-4\">\n                                        <Card>\n                                          <CardHeader className=\"pb-3\">\n                                            <CardTitle className=\"text-base flex items-center gap-2\">\n                                              <CreditCard className=\"w-4 h-4\" />\n                                              Bank Details\n                                            </CardTitle>\n                                          </CardHeader>\n                                          <CardContent className=\"space-y-3\">\n                                            <div className=\"grid grid-cols-1 gap-3\">\n                                              <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                                <span className=\"text-sm font-medium text-gray-600\">Account Name:</span>\n                                                <span className=\"text-sm font-semibold text-gray-900\">\n                                                  {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).accountName || 'N/A' : 'N/A'}\n                                                </span>\n                                              </div>\n                                              <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                                <span className=\"text-sm font-medium text-gray-600\">Account Number:</span>\n                                                <span className=\"text-sm font-semibold text-gray-900\">\n                                                  {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).accountNumber || 'N/A' : 'N/A'}\n                                                </span>\n                                              </div>\n                                              <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                                <span className=\"text-sm font-medium text-gray-600\">Bank Name:</span>\n                                                <span className=\"text-sm font-semibold text-gray-900\">\n                                                  {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).bankName || 'N/A' : 'N/A'}\n                                                </span>\n                                              </div>\n                                              <div className=\"flex justify-between py-2\">\n                                                <span className=\"text-sm font-medium text-gray-600\">Sort Code:</span>\n                                                <span className=\"text-sm font-semibold text-gray-900\">\n                                                  {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).routingNumber || 'N/A' : 'N/A'}\n                                                </span>\n                                              </div>\n                                            </div>\n                                          </CardContent>\n                                        </Card>\n\n                                        <Card>\n                                          <CardHeader className=\"pb-3\">\n                                            <CardTitle className=\"text-base\">Request Details</CardTitle>\n                                          </CardHeader>\n                                          <CardContent className=\"space-y-3\">\n                                            <div className=\"flex justify-between items-center\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Payment Method:</span>\n                                              <span className=\"text-sm bg-gray-100 px-2 py-1 rounded capitalize\">\n                                                {selectedWithdrawal?.paymentMethod?.replace('_', ' ') || 'N/A'}\n                                              </span>\n                                            </div>\n                                            <div className=\"flex justify-between items-center\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Current Status:</span>\n                                              <div>\n                                                {selectedWithdrawal && getStatusBadge(selectedWithdrawal.status)}\n                                              </div>\n                                            </div>\n                                          </CardContent>\n                                        </Card>\n                                      </div>\n\n                                      {/* Right Column - Actions */}\n                                      <div className=\"space-y-4\">\n                                        <Card className=\"border-2 border-finder-red/20\">\n                                          <CardHeader className=\"pb-3\">\n                                            <CardTitle className=\"text-base text-finder-red\">Update Status</CardTitle>\n                                          </CardHeader>\n                                          <CardContent className=\"space-y-4\">\n                                            <div>\n                                              <Label htmlFor=\"status\" className=\"text-sm font-semibold\">New Status</Label>\n                                              <Select value={newStatus} onValueChange={setNewStatus}>\n                                                <SelectTrigger className=\"mt-1 h-11\">\n                                                  <SelectValue placeholder=\"Select new status\" />\n                                                </SelectTrigger>\n                                                <SelectContent>\n                                                  <SelectItem value=\"pending\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                      <Clock className=\"w-4 h-4 text-yellow-600\" />\n                                                      Pending\n                                                    </div>\n                                                  </SelectItem>\n                                                  <SelectItem value=\"processing\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                      <AlertTriangle className=\"w-4 h-4 text-blue-600\" />\n                                                      Processing\n                                                    </div>\n                                                  </SelectItem>\n                                                  <SelectItem value=\"approved\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                                      Approved\n                                                    </div>\n                                                  </SelectItem>\n                                                  <SelectItem value=\"rejected\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                      <XCircle className=\"w-4 h-4 text-red-600\" />\n                                                      Rejected\n                                                    </div>\n                                                  </SelectItem>\n                                                </SelectContent>\n                                              </Select>\n                                            </div>\n\n                                            <div>\n                                              <Label htmlFor=\"notes\" className=\"text-sm font-semibold\">Admin Notes</Label>\n                                              <Textarea\n                                                id=\"notes\"\n                                                value={adminNotes}\n                                                onChange={(e) => setAdminNotes(e.target.value)}\n                                                placeholder=\"Add notes about this withdrawal decision...\"\n                                                rows={4}\n                                                className=\"mt-1\"\n                                              />\n                                              <p className=\"text-xs text-gray-500 mt-1\">\n                                                These notes will be visible to the finder\n                                              </p>\n                                            </div>\n\n                                            {/* Prominent Action Buttons */}\n                                            <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                                              <Button\n                                                variant=\"outline\"\n                                                onClick={() => setSelectedWithdrawal(null)}\n                                                className=\"h-11\"\n                                              >\n                                                Cancel\n                                              </Button>\n                                              <Button\n                                                onClick={handleUpdateWithdrawal}\n                                                disabled={updateWithdrawalMutation.isPending || !newStatus}\n                                                className=\"bg-finder-red hover:bg-finder-red-dark h-11 font-semibold\"\n                                              >\n                                                {updateWithdrawalMutation.isPending ? (\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                                                    Updating...\n                                                  </div>\n                                                ) : (\n                                                  \"Update Withdrawal\"\n                                                )}\n                                              </Button>\n                                            </div>\n                                          </CardContent>\n                                        </Card>\n\n                                        {/* Quick Action Buttons */}\n                                        <div className=\"grid grid-cols-2 gap-2\">\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() => setNewStatus('approved')}\n                                            className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                                          >\n                                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                            Quick Approve\n                                          </Button>\n                                          <Button\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            onClick={() => setNewStatus('rejected')}\n                                            className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                          >\n                                            <XCircle className=\"w-4 h-4 mr-1\" />\n                                            Quick Reject\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {/* Mobile Card View - Hidden on Desktop */}\n                <div className=\"lg:hidden space-y-3\">\n                  {paginatedWithdrawals.map((withdrawal: any) => {\n                    const paymentDetails = withdrawal.paymentDetails ? JSON.parse(withdrawal.paymentDetails) : {};\n                    return (\n                      <Card key={withdrawal.id} className=\"p-4 hover:shadow-md transition-shadow\">\n                        <div className=\"space-y-3\">\n                          {/* Header Row */}\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-gray-900 text-sm\">\n                                {withdrawal.finderName || 'N/A'}\n                              </div>\n                              <div className=\"text-xs text-gray-500 truncate\">\n                                {withdrawal.finderEmail}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-semibold text-green-600 text-sm\">\n                                {formatCurrency(withdrawal.amount)}\n                              </div>\n                              <div className=\"text-xs text-gray-500\">\n                                {new Date(withdrawal.requestedAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Status and Payment Method */}\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center gap-2\">\n                              {getStatusBadge(withdrawal.status)}\n                              <span className=\"text-xs text-gray-500 capitalize\">\n                                {withdrawal.paymentMethod?.replace('_', ' ') || 'N/A'}\n                              </span>\n                            </div>\n                          </div>\n\n                          {/* Bank Details */}\n                          <div className=\"bg-gray-50 p-2 rounded text-xs\">\n                            <div className=\"font-medium text-gray-700 mb-1\">Bank Details:</div>\n                            <div className=\"space-y-0.5 text-gray-600\">\n                              <div><span className=\"font-medium\">Name:</span> {paymentDetails.accountName || 'N/A'}</div>\n                              <div><span className=\"font-medium\">Account:</span> {paymentDetails.accountNumber || 'N/A'}</div>\n                              <div><span className=\"font-medium\">Bank:</span> {paymentDetails.bankName || 'N/A'}</div>\n                            </div>\n                          </div>\n\n                          {/* Action Button */}\n                          <div className=\"pt-2\">\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => openProcessDialog(withdrawal)}\n                                  className=\"w-full\"\n                                >\n                                  Process Withdrawal\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                                <DialogHeader>\n                                  <DialogTitle className=\"text-xl font-bold flex items-center gap-2\">\n                                    <DollarSign className=\"w-5 h-5 text-finder-red\" />\n                                    Process Withdrawal Request\n                                  </DialogTitle>\n                                </DialogHeader>\n\n                                <div className=\"space-y-6\">\n                                  {/* Header Summary Card */}\n                                  <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-l-4 border-l-finder-red\">\n                                    <CardContent className=\"p-4\">\n                                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                                        <div className=\"flex items-center gap-4\">\n                                          <div className=\"w-12 h-12 bg-finder-red rounded-full flex items-center justify-center\">\n                                            <span className=\"text-white font-bold text-lg\">\n                                              {selectedWithdrawal?.finderName?.charAt(0) || 'F'}\n                                            </span>\n                                          </div>\n                                          <div>\n                                            <h3 className=\"font-semibold text-lg text-gray-900\">\n                                              {selectedWithdrawal?.finderName || 'N/A'}\n                                            </h3>\n                                            <p className=\"text-sm text-gray-600\">{selectedWithdrawal?.finderEmail}</p>\n                                          </div>\n                                        </div>\n                                        <div className=\"text-right\">\n                                          <div className=\"text-2xl font-bold text-green-600\">\n                                            {selectedWithdrawal && formatCurrency(selectedWithdrawal.amount)}\n                                          </div>\n                                          <p className=\"text-xs text-gray-500\">\n                                            Requested: {selectedWithdrawal && new Date(selectedWithdrawal.requestedAt).toLocaleDateString()}\n                                          </p>\n                                        </div>\n                                      </div>\n                                    </CardContent>\n                                  </Card>\n\n                                  <div className=\"grid lg:grid-cols-2 gap-6\">\n                                    {/* Left Column - Bank Details */}\n                                    <div className=\"space-y-4\">\n                                      <Card>\n                                        <CardHeader className=\"pb-3\">\n                                          <CardTitle className=\"text-base flex items-center gap-2\">\n                                            <CreditCard className=\"w-4 h-4\" />\n                                            Bank Details\n                                          </CardTitle>\n                                        </CardHeader>\n                                        <CardContent className=\"space-y-3\">\n                                          <div className=\"grid grid-cols-1 gap-3\">\n                                            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Account Name:</span>\n                                              <span className=\"text-sm font-semibold text-gray-900\">\n                                                {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).accountName || 'N/A' : 'N/A'}\n                                              </span>\n                                            </div>\n                                            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Account Number:</span>\n                                              <span className=\"text-sm font-semibold text-gray-900\">\n                                                {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).accountNumber || 'N/A' : 'N/A'}\n                                              </span>\n                                            </div>\n                                            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Bank Name:</span>\n                                              <span className=\"text-sm font-semibold text-gray-900\">\n                                                {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).bankName || 'N/A' : 'N/A'}\n                                              </span>\n                                            </div>\n                                            <div className=\"flex justify-between py-2\">\n                                              <span className=\"text-sm font-medium text-gray-600\">Sort Code:</span>\n                                              <span className=\"text-sm font-semibold text-gray-900\">\n                                                {selectedWithdrawal?.paymentDetails ? JSON.parse(selectedWithdrawal.paymentDetails).routingNumber || 'N/A' : 'N/A'}\n                                              </span>\n                                            </div>\n                                          </div>\n                                        </CardContent>\n                                      </Card>\n\n                                      <Card>\n                                        <CardHeader className=\"pb-3\">\n                                          <CardTitle className=\"text-base\">Request Details</CardTitle>\n                                        </CardHeader>\n                                        <CardContent className=\"space-y-3\">\n                                          <div className=\"flex justify-between items-center\">\n                                            <span className=\"text-sm font-medium text-gray-600\">Payment Method:</span>\n                                            <span className=\"text-sm bg-gray-100 px-2 py-1 rounded capitalize\">\n                                              {selectedWithdrawal?.paymentMethod?.replace('_', ' ') || 'N/A'}\n                                            </span>\n                                          </div>\n                                          <div className=\"flex justify-between items-center\">\n                                            <span className=\"text-sm font-medium text-gray-600\">Current Status:</span>\n                                            <div>\n                                              {selectedWithdrawal && getStatusBadge(selectedWithdrawal.status)}\n                                            </div>\n                                          </div>\n                                        </CardContent>\n                                      </Card>\n                                    </div>\n\n                                    {/* Right Column - Actions */}\n                                    <div className=\"space-y-4\">\n                                      <Card className=\"border-2 border-finder-red/20\">\n                                        <CardHeader className=\"pb-3\">\n                                          <CardTitle className=\"text-base text-finder-red\">Update Status</CardTitle>\n                                        </CardHeader>\n                                        <CardContent className=\"space-y-4\">\n                                          <div>\n                                            <Label htmlFor=\"status\" className=\"text-sm font-semibold\">New Status</Label>\n                                            <Select value={newStatus} onValueChange={setNewStatus}>\n                                              <SelectTrigger className=\"mt-1 h-11\">\n                                                <SelectValue placeholder=\"Select new status\" />\n                                              </SelectTrigger>\n                                              <SelectContent>\n                                                <SelectItem value=\"pending\">\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <Clock className=\"w-4 h-4 text-yellow-600\" />\n                                                    Pending\n                                                  </div>\n                                                </SelectItem>\n                                                <SelectItem value=\"processing\">\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <AlertTriangle className=\"w-4 h-4 text-blue-600\" />\n                                                    Processing\n                                                  </div>\n                                                </SelectItem>\n                                                <SelectItem value=\"approved\">\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                                    Approved\n                                                  </div>\n                                                </SelectItem>\n                                                <SelectItem value=\"rejected\">\n                                                  <div className=\"flex items-center gap-2\">\n                                                    <XCircle className=\"w-4 h-4 text-red-600\" />\n                                                    Rejected\n                                                  </div>\n                                                </SelectItem>\n                                              </SelectContent>\n                                            </Select>\n                                          </div>\n\n                                          <div>\n                                            <Label htmlFor=\"notes\" className=\"text-sm font-semibold\">Admin Notes</Label>\n                                            <Textarea\n                                              id=\"notes\"\n                                              value={adminNotes}\n                                              onChange={(e) => setAdminNotes(e.target.value)}\n                                              placeholder=\"Add notes about this withdrawal decision...\"\n                                              rows={4}\n                                              className=\"mt-1\"\n                                            />\n                                            <p className=\"text-xs text-gray-500 mt-1\">\n                                              These notes will be visible to the finder\n                                            </p>\n                                          </div>\n\n                                          {/* Prominent Action Buttons */}\n                                          <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                                            <Button\n                                              variant=\"outline\"\n                                              onClick={() => setSelectedWithdrawal(null)}\n                                              className=\"h-11\"\n                                            >\n                                              Cancel\n                                            </Button>\n                                            <Button\n                                              onClick={handleUpdateWithdrawal}\n                                              disabled={updateWithdrawalMutation.isPending || !newStatus}\n                                              className=\"bg-finder-red hover:bg-finder-red-dark h-11 font-semibold\"\n                                            >\n                                              {updateWithdrawalMutation.isPending ? (\n                                                <div className=\"flex items-center gap-2\">\n                                                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                                                  Updating...\n                                                </div>\n                                              ) : (\n                                                \"Update Withdrawal\"\n                                              )}\n                                            </Button>\n                                          </div>\n                                        </CardContent>\n                                      </Card>\n\n                                      {/* Quick Action Buttons */}\n                                      <div className=\"grid grid-cols-2 gap-2\">\n                                        <Button\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => setNewStatus('approved')}\n                                          className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                                        >\n                                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                          Quick Approve\n                                        </Button>\n                                        <Button\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() => setNewStatus('rejected')}\n                                          className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                        >\n                                          <XCircle className=\"w-4 h-4 mr-1\" />\n                                          Quick Reject\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                    <div className=\"text-xs sm:text-sm text-gray-600 text-center sm:text-left\">\n                      Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredAndSortedWithdrawals.length)} of {filteredAndSortedWithdrawals.length}\n                    </div>\n                    <div className=\"flex items-center justify-center gap-1 sm:gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                        disabled={currentPage === 1}\n                        className=\"text-xs sm:text-sm\"\n                      >\n                        <ChevronLeft className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                        <span className=\"hidden sm:inline\">Previous</span>\n                      </Button>\n                      <div className=\"flex items-center gap-1\">\n                        {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {\n                          let page;\n                          if (totalPages <= 5) {\n                            page = i + 1;\n                          } else {\n                            if (currentPage <= 3) {\n                              page = i + 1;\n                            } else if (currentPage >= totalPages - 2) {\n                              page = totalPages - 4 + i;\n                            } else {\n                              page = currentPage - 2 + i;\n                            }\n                          }\n                          return (\n                            <Button\n                              key={page}\n                              variant={currentPage === page ? \"default\" : \"outline\"}\n                              size=\"sm\"\n                              onClick={() => setCurrentPage(page)}\n                              className={`w-8 h-8 p-0 text-xs ${currentPage === page ? \"bg-finder-red hover:bg-finder-red-dark\" : \"\"}`}\n                            >\n                              {page}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                        disabled={currentPage === totalPages}\n                        className=\"text-xs sm:text-sm\"\n                      >\n                        <span className=\"hidden sm:inline\">Next</span>\n                        <ChevronRight className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":57845},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthHeader } from \"@/components/AuthHeader\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nexport default function Login() {\n  const [, navigate] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [resetEmail, setResetEmail] = useState(\"\");\n  const [isResetting, setIsResetting] = useState(false);\n  const [resetDialogOpen, setResetDialogOpen] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(formData.email, formData.password);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully!\",\n      });\n      navigate(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsResetting(true);\n\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email: resetEmail }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Reset Email Sent\",\n          description: \"If an account with that email exists, we've sent you a password reset link.\",\n        });\n        setResetDialogOpen(false);\n        setResetEmail(\"\");\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: data.message || \"Failed to send reset email\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n      });\n    } finally {\n      setIsResetting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AuthHeader currentPage=\"login\" />\n\n      {/* Login Section */}\n      <section className=\"py-8 sm:py-16\">\n        <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Log In</h1>\n              <p className=\"text-gray-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\" className=\"text-finder-red hover:underline font-medium\">\n                  Sign Up\n                </Link>\n              </p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  className=\"mt-1 h-12 bg-white border-gray-300 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                  placeholder=\"\"\n                  style={{ \n                    borderColor: \"hsl(210, 20%, 90%)\",\n                  }}\n                  onFocus={(e) => {\n                    e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                    e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                  }}\n                  onBlur={(e) => {\n                    e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                    e.currentTarget.style.boxShadow = \"none\";\n                  }}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">Password</Label>\n                <div className=\"relative mt-1\">\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    required\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    className=\"pr-12 h-12 bg-white border-gray-300 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                    placeholder=\"\"\n                    style={{ \n                      borderColor: \"hsl(210, 20%, 90%)\",\n                    }}\n                    onFocus={(e) => {\n                      e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                      e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                    }}\n                    onBlur={(e) => {\n                      e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                      e.currentTarget.style.boxShadow = \"none\";\n                    }}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-3 font-medium\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Logging in...\" : \"Log In\"}\n              </Button>\n            </form>\n\n            {/* Forgot Password Dialog */}\n            <div className=\"text-center mt-4\">\n              <Dialog open={resetDialogOpen} onOpenChange={setResetDialogOpen}>\n                <DialogTrigger asChild>\n                  <button\n                    type=\"button\"\n                    className=\"text-sm text-finder-red hover:underline font-medium\"\n                  >\n                    Forgot your password?\n                  </button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Reset Password</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"reset-email\" className=\"text-gray-700 font-medium\">\n                        Email Address\n                      </Label>\n                      <Input\n                        id=\"reset-email\"\n                        type=\"email\"\n                        placeholder=\"Enter your email address\"\n                        value={resetEmail}\n                        onChange={(e) => setResetEmail(e.target.value)}\n                        required\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => setResetDialogOpen(false)}\n                        disabled={isResetting}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"flex-1 bg-finder-red hover:bg-finder-red-dark\"\n                        disabled={isResetting}\n                      >\n                        {isResetting ? \"Sending...\" : \"Send Reset Link\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8728},"client/src/pages/auth/register-finder.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Handshake, UserPlus } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Assume categories are fetched from an API or context\n// For demonstration purposes, let's mock categories data\nconst categories = [\n  { id: \"1\", name: \"Web Development\", isActive: true },\n  { id: \"2\", name: \"Mobile Development\", isActive: true },\n  { id: \"3\", name: \"UI/UX Design\", isActive: true },\n  { id: \"4\", name: \"Data Science\", isActive: false },\n  { id: \"5\", name: \"Cloud Computing\", isActive: true },\n  { id: \"6\", name: \"DevOps\", isActive: true },\n];\nconst categoriesLoading = false;\n\nexport default function RegisterFinder() {\n  const [, navigate] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    bio: \"\",\n    category: \"\", // Keep for backward compatibility if needed, but primarily use categories\n    categories: [] as string[],\n    skills: \"\",\n    availability: \"full-time\"\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [acceptedTerms, setAcceptedTerms] = useState(false);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Passwords do not match\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long\",\n      });\n      return;\n    }\n\n    if (!acceptedTerms) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please accept the terms and conditions\",\n      });\n      return;\n    }\n\n    if (formData.categories.length === 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please select at least one category\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Prepare skills for backend if needed (e.g., comma-separated string)\n      const skillsArray = formData.skills.split(',').map(skill => skill.trim()).filter(skill => skill !== '');\n\n      await register({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        password: formData.password,\n        phone: formData.phone,\n        role: 'finder',\n        bio: formData.bio,\n        category: formData.category, // Keep for backward compatibility\n        categories: formData.categories, // New multiple categories field\n        skills: skillsArray,\n        availability: formData.availability\n      });\n\n      toast({\n        title: \"Success!\",\n        description: \"Your finder account has been created successfully.\",\n      });\n\n      navigate(\"/finder/dashboard\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-finder-red text-white px-6 py-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Handshake className=\"w-6 h-6\" />\n            <span className=\"text-xl font-bold\">FinderMeister</span>\n          </Link>\n          <nav className=\"flex items-center space-x-6\">\n            <Link href=\"#\" className=\"hover:underline\">How it Works</Link>\n            <Link href=\"/login\" className=\"hover:underline\">Log In</Link>\n            <span className=\"bg-white text-finder-red px-3 py-1 rounded font-medium\">Sign Up</span>\n          </nav>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-md mx-auto py-12 px-6\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-3\">Sign Up as a Finder</h1>\n          <p className=\"text-gray-600\">Create an account to find products and services for clients.</p>\n        </div>\n\n        {/* User Icon */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"w-16 h-16 bg-finder-red/100 rounded-full flex items-center justify-center\">\n            <UserPlus className=\"w-8 h-8 text-white\" />\n          </div>\n        </div>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\" className=\"sr-only\">First name</Label>\n                  <Input\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    required\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    placeholder=\"First name\"\n                    className=\"h-12 border-gray-300 rounded-md\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\" className=\"sr-only\">Last name</Label>\n                  <Input\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    required\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    placeholder=\"Last name\"\n                    className=\"h-12 border-gray-300 rounded-md\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\" className=\"sr-only\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"Email\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\" className=\"sr-only\">Password</Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Password\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\" className=\"sr-only\">Confirm password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  placeholder=\"Confirm password\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\" className=\"sr-only\">Phone number</Label>\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  type=\"tel\"\n                  required\n                  value={formData.phone}\n                  onChange={handleInputChange}\n                  placeholder=\"Phone number\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              {/* Bio Input */}\n              <div>\n                <Label htmlFor=\"bio\" className=\"sr-only\">Bio</Label>\n                <Input\n                  id=\"bio\"\n                  name=\"bio\"\n                  value={formData.bio}\n                  onChange={handleInputChange}\n                  placeholder=\"Short bio (optional)\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              {/* Skills Input */}\n              <div>\n                <Label htmlFor=\"skills\" className=\"sr-only\">Skills</Label>\n                <Input\n                  id=\"skills\"\n                  name=\"skills\"\n                  value={formData.skills}\n                  onChange={handleInputChange}\n                  placeholder=\"Skills (comma-separated)\"\n                  className=\"h-12 border-gray-300 rounded-md\"\n                />\n              </div>\n\n              {/* Categories Selection */}\n              <div>\n                <Label htmlFor=\"categories\">Categories</Label>\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm text-gray-600\">Select all categories that match your skills and expertise:</p>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 max-h-48 overflow-y-auto p-3 border rounded-md bg-white/80\">\n                    {categoriesLoading ? (\n                      <div className=\"col-span-full text-center py-4 text-gray-500\">Loading categories...</div>\n                    ) : categories.length > 0 ? (\n                      categories\n                        .filter(category => category.isActive)\n                        .map((category) => (\n                          <label key={category.id} className=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.categories.includes(category.name)}\n                              onChange={(e) => {\n                                const isChecked = e.target.checked;\n                                setFormData(prev => ({\n                                  ...prev,\n                                  categories: isChecked\n                                    ? [...prev.categories, category.name]\n                                    : prev.categories.filter(cat => cat !== category.name)\n                                }));\n                              }}\n                              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm font-medium text-gray-700\">{category.name}</span>\n                          </label>\n                        ))\n                    ) : (\n                      <div className=\"col-span-full text-center py-4 text-gray-500\">No categories available</div>\n                    )}\n                  </div>\n                  {formData.categories.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {formData.categories.map((categoryName) => (\n                        <Badge key={categoryName} variant=\"secondary\" className=\"text-xs\">\n                          {categoryName}\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              setFormData(prev => ({\n                                ...prev,\n                                categories: prev.categories.filter(cat => cat !== categoryName)\n                              }));\n                            }}\n                            className=\"ml-1 text-gray-500 hover:text-gray-700\"\n                          >\n                            √ó\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Availability Selection */}\n              <div>\n                <Label htmlFor=\"availability\">Availability</Label>\n                <Select value={formData.availability} onValueChange={(value) => setFormData(prev => ({ ...prev, availability: value }))}>\n                  <SelectTrigger className=\"bg-white/80 h-12\">\n                    <SelectValue placeholder=\"Select your availability\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"full-time\">Full-time</SelectItem>\n                    <SelectItem value=\"part-time\">Part-time</SelectItem>\n                    <SelectItem value=\"contract\">Contract</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-start space-x-3 mb-6\">\n                <input\n                  type=\"checkbox\"\n                  id=\"acceptTermsFinder\"\n                  checked={acceptedTerms}\n                  onChange={(e) => setAcceptedTerms(e.target.checked)}\n                  className=\"mt-1 rounded border-gray-300 text-finder-red focus:ring-finder-red\"\n                />\n                <label htmlFor=\"acceptTermsFinder\" className=\"text-sm text-gray-600\">\n                  I agree to the{\" \"}\n                  <Link href=\"/terms-and-conditions\" className=\"text-finder-red hover:underline font-medium\">\n                    Terms and Conditions\n                  </Link>\n                </label>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading || !acceptedTerms || formData.categories.length === 0}\n                className=\"w-full h-12 bg-finder-red hover:bg-finder-red-dark text-white font-medium text-lg rounded-md\"\n              >\n                {isLoading ? \"Creating Account...\" : \"Sign Up\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center mt-6\">\n              <p className=\"text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" className=\"text-finder-red hover:underline font-medium\">\n                  Log In\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14680},"client/src/pages/auth/register.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthHeader } from \"@/components/AuthHeader\";\nimport { User, Eye, EyeOff } from \"lucide-react\";\n\nexport default function Register() {\n  const [, navigate] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [userType, setUserType] = useState<string>(\"\");\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    role: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [acceptedTerms, setAcceptedTerms] = useState(false);\n\n  // Get user type from URL params\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const type = params.get('type');\n    if (type === 'client' || type === 'finder') {\n      setUserType(type);\n      setFormData(prev => ({ ...prev, role: type }));\n    }\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Passwords do not match\",\n      });\n      return;\n    }\n\n    if (!formData.role) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please select your role\",\n      });\n      return;\n    }\n\n    if (!acceptedTerms) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Please accept the terms and conditions\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await register(formData);\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully!\",\n      });\n      navigate(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleRoleChange = (value: string) => {\n    setFormData({ ...formData, role: value });\n  };\n\n  // If we have a specific user type from URL, show specialized form\n  if (userType === 'finder') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AuthHeader currentPage=\"register\" />\n\n        <section className=\"py-8 sm:py-16\">\n          <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n            <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Sign Up as a Finder</h1>\n                <p className=\"text-gray-600 mb-6\">\n                  Create an account to find products and services for clients.\n                </p>\n                <div className=\"bg-finder-red rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                  <User className=\"w-8 h-8 text-white\" />\n                </div>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Input\n                      name=\"firstName\"\n                      type=\"text\"\n                      required\n                      value={formData.firstName}\n                      onChange={handleInputChange}\n                      placeholder=\"First name\"\n                      className=\"bg-gray-50 border-gray-300\"\n                    />\n                  </div>\n                  <div>\n                    <Input\n                      name=\"lastName\"\n                      type=\"text\"\n                      required\n                      value={formData.lastName}\n                      onChange={handleInputChange}\n                      placeholder=\"Last name\"\n                      className=\"bg-gray-50 border-gray-300\"\n                    />\n                  </div>\n                </div>\n\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"Email\"\n                  className=\"bg-gray-50 border-gray-300\"\n                />\n\n                <Input\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Password\"\n                  className=\"bg-gray-50 border-gray-300\"\n                />\n\n                <Input\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  placeholder=\"Confirm password\"\n                  className=\"bg-gray-50 border-gray-300\"\n                />\n\n                <Input\n                  name=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={handleInputChange}\n                  placeholder=\"Phone number\"\n                  className=\"bg-gray-50 border-gray-300\"\n                />\n\n                <div className=\"flex items-start space-x-3 mb-4\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"acceptTermsFinder\"\n                    checked={acceptedTerms}\n                    onChange={(e) => setAcceptedTerms(e.target.checked)}\n                    className=\"mt-1 rounded border-gray-300 text-finder-red focus:ring-finder-red\"\n                  />\n                  <label htmlFor=\"acceptTermsFinder\" className=\"text-sm text-gray-600\">\n                    I agree to the{\" \"}\n                    <Link href=\"/terms-and-conditions\" className=\"text-finder-red hover:underline font-medium\">\n                      Terms and Conditions\n                    </Link>\n                  </label>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-3 font-medium\"\n                  disabled={isLoading || !acceptedTerms}\n                >\n                  {isLoading ? \"Creating Account...\" : \"Sign Up\"}\n                </Button>\n\n                <p className=\"text-center text-gray-600\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/login\" className=\"text-finder-red hover:underline font-medium\">\n                    Log In\n                  </Link>\n                </p>\n              </form>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  // General registration page with role selection\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AuthHeader currentPage=\"register\" />\n\n      <section className=\"py-8 sm:py-16\">\n        <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Account</h1>\n              <p className=\"text-gray-600 mb-6\">\n                Join FinderMeister and start connecting with opportunities.\n              </p>\n              <div className=\"bg-finder-red rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                <User className=\"w-8 h-8 text-white\" />\n              </div>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"role\" className=\"text-gray-700 font-medium\">I am a</Label>\n                <Select value={formData.role} onValueChange={handleRoleChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select your role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"client\">Client - I need help finding things</SelectItem>\n                    <SelectItem value=\"finder\">Finder - I can help find things</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Input\n                    name=\"firstName\"\n                    type=\"text\"\n                    required\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    placeholder=\"First name\"\n                    className=\"bg-gray-50 border-gray-300\"\n                  />\n                </div>\n                <div>\n                  <Input\n                    name=\"lastName\"\n                    type=\"text\"\n                    required\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    placeholder=\"Last name\"\n                    className=\"bg-gray-50 border-gray-300\"\n                  />\n                </div>\n              </div>\n\n              <Input\n                name=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"Email address\"\n                className=\"bg-gray-50 border-gray-300\"\n              />\n\n              <div className=\"relative\">\n                <Input\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  required\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Password\"\n                  className=\"bg-gray-50 border-gray-300 pr-12\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n\n              <div className=\"relative\">\n                <Input\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleInputChange}\n                  placeholder=\"Confirm password\"\n                  className=\"bg-gray-50 border-gray-300 pr-12\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n\n              <div className=\"flex items-start space-x-3 mb-4\">\n                <input\n                  type=\"checkbox\"\n                  id=\"acceptTerms\"\n                  checked={acceptedTerms}\n                  onChange={(e) => setAcceptedTerms(e.target.checked)}\n                  className=\"mt-1 rounded border-gray-300 text-finder-red focus:ring-finder-red\"\n                />\n                <label htmlFor=\"acceptTerms\" className=\"text-sm text-gray-600\">\n                  I agree to the{\" \"}\n                  <Link href=\"/terms-and-conditions\" className=\"text-finder-red hover:underline font-medium\">\n                    Terms and Conditions\n                  </Link>\n                </label>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-3 font-medium\"\n                disabled={isLoading || !acceptedTerms}\n              >\n                {isLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n\n              <p className=\"text-center text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" className=\"text-finder-red hover:underline font-medium\">\n                  Log In\n                </Link>\n              </p>\n            </form>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":13095},"client/src/pages/auth/reset-password.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthHeader } from \"@/components/AuthHeader\";\nimport { Eye, EyeOff, CheckCircle, AlertCircle } from \"lucide-react\";\n\nexport default function ResetPassword() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [token, setToken] = useState(\"\");\n  const [formData, setFormData] = useState({\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPasswords, setShowPasswords] = useState({\n    newPassword: false,\n    confirmPassword: false,\n  });\n  const [resetStatus, setResetStatus] = useState<'pending' | 'success' | 'error'>('pending');\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    // Get token from URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlToken = urlParams.get('token');\n    \n    if (!urlToken) {\n      setResetStatus('error');\n      setErrorMessage(\"Invalid reset link. Please request a new password reset.\");\n    } else {\n      setToken(urlToken);\n    }\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (formData.newPassword !== formData.confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Passwords do not match\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.newPassword.length < 8) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Password must be at least 8 characters long\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token,\n          newPassword: formData.newPassword,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setResetStatus('success');\n        toast({\n          title: \"Success\",\n          description: \"Your password has been reset successfully!\",\n        });\n      } else {\n        setResetStatus('error');\n        setErrorMessage(data.message || \"Failed to reset password\");\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: data.message || \"Failed to reset password\",\n        });\n      }\n    } catch (error: any) {\n      setResetStatus('error');\n      setErrorMessage(\"Something went wrong. Please try again.\");\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const togglePasswordVisibility = (field: 'newPassword' | 'confirmPassword') => {\n    setShowPasswords(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  if (resetStatus === 'success') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AuthHeader currentPage=\"\" />\n        <section className=\"py-16\">\n          <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n            <Card className=\"text-center\">\n              <CardContent className=\"pt-6\">\n                <div className=\"mx-auto w-16 h-16 flex items-center justify-center bg-green-100 rounded-full mb-4\">\n                  <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Password Reset Successful</h1>\n                <p className=\"text-gray-600 mb-6\">Your password has been updated successfully.</p>\n                <Link href=\"/login\">\n                  <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                    Continue to Login\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  if (resetStatus === 'error') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <AuthHeader currentPage=\"\" />\n        <section className=\"py-16\">\n          <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n            <Card className=\"text-center\">\n              <CardContent className=\"pt-6\">\n                <div className=\"mx-auto w-16 h-16 flex items-center justify-center bg-red-100 rounded-full mb-4\">\n                  <AlertCircle className=\"w-8 h-8 text-red-600\" />\n                </div>\n                <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Reset Link Invalid</h1>\n                <p className=\"text-gray-600 mb-6\">{errorMessage}</p>\n                <Link href=\"/login\">\n                  <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                    Back to Login\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AuthHeader currentPage=\"\" />\n\n      <section className=\"py-8 sm:py-16\">\n        <div className=\"max-w-md mx-auto px-4 sm:px-6\">\n          <div className=\"bg-white rounded-lg shadow-sm border p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Reset Password</h1>\n              <p className=\"text-gray-600\">Enter your new password below</p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"newPassword\" className=\"text-gray-700 font-medium\">\n                  New Password\n                </Label>\n                <div className=\"relative mt-1\">\n                  <Input\n                    id=\"newPassword\"\n                    name=\"newPassword\"\n                    type={showPasswords.newPassword ? \"text\" : \"password\"}\n                    required\n                    value={formData.newPassword}\n                    onChange={handleInputChange}\n                    className=\"pr-12\"\n                    placeholder=\"Enter new password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility('newPassword')}\n                    className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPasswords.newPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\" className=\"text-gray-700 font-medium\">\n                  Confirm New Password\n                </Label>\n                <div className=\"relative mt-1\">\n                  <Input\n                    id=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    type={showPasswords.confirmPassword ? \"text\" : \"password\"}\n                    required\n                    value={formData.confirmPassword}\n                    onChange={handleInputChange}\n                    className=\"pr-12\"\n                    placeholder=\"Confirm new password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility('confirmPassword')}\n                    className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPasswords.confirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-3 font-medium\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center mt-6\">\n              <Link href=\"/login\" className=\"text-sm text-gray-500 hover:text-finder-red\">\n                Back to Login\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8838},"client/src/pages/client/browse-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ClientHeader from \"@/components/client-header\";\nimport { \n  Search, \n  Filter,\n  Plus,\n  Clock,\n  DollarSign,\n  Eye,\n  Tag,\n  Calendar,\n  TrendingUp,\n  Users,\n  FileText,\n  Grid,\n  List,\n  ChevronDown,\n  SortAsc,\n  SortDesc,\n  Briefcase,\n  Target,\n  Award,\n  Zap,\n  ArrowRight,\n  User,\n  CheckCircle2,\n  AlertCircle,\n  Loader2\n} from \"lucide-react\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\ninterface FindItem {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  budgetMin: string;\n  budgetMax: string;\n  timeframe?: string;\n  status: string;\n  createdAt: string;\n  updatedAt?: string;\n  clientId: string;\n  _count?: {\n    proposals: number;\n  };\n}\n\nexport default function BrowseRequests() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: finds = [], isLoading } = useQuery<FindItem[]>({\n    queryKey: ['/api/client/finds'],\n    enabled: !!user\n  });\n\n  const { data: categories = [] } = useQuery<Array<{id: string, name: string}>>({\n    queryKey: ['/api/categories'],\n    enabled: !!user\n  });\n\n  // Filter and sort finds\n  const filteredFinds = finds\n    .filter(find => {\n      const matchesSearch = find.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                           find.description.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesCategory = !selectedCategory || selectedCategory === \"all\" || find.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'newest':\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case 'oldest':\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case 'budget-high':\n          return parseInt(b.budgetMax || \"0\") - parseInt(a.budgetMax || \"0\");\n        case 'budget-low':\n          return parseInt(a.budgetMin || \"0\") - parseInt(b.budgetMin || \"0\");\n        case 'proposals':\n          return (b._count?.proposals || 0) - (a._count?.proposals || 0);\n        default:\n          return 0;\n      }\n    });\n\n  // Get status info\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'active':\n        return { color: 'bg-green-100 text-green-800 border-green-200', icon: 'üöÄ', label: 'Active' };\n      case 'completed':\n        return { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: '‚úÖ', label: 'Completed' };\n      case 'cancelled':\n        return { color: 'bg-red-100 text-red-800 border-red-200', icon: '‚ùå', label: 'Cancelled' };\n      default:\n        return { color: 'bg-amber-100 text-amber-800 border-amber-200', icon: '‚è≥', label: 'Pending' };\n    }\n  };\n\n  // Calculate stats\n  const stats = {\n    total: finds.length,\n    active: finds.filter(f => f.status === 'active').length,\n    completed: finds.filter(f => f.status === 'completed').length,\n    totalProposals: finds.reduce((sum, f) => sum + (f._count?.proposals || 0), 0)\n  };\n\n  // Redirect if not authenticated or not client\n  if (!user || user.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-96 p-8 text-center\">\n          <div className=\"w-20 h-20 bg-finder-red/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-10 h-10 text-finder-red\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600 mb-6\">This page is only accessible by clients.</p>\n          <Button onClick={() => navigate(\"/login\")} className=\"bg-finder-red hover:bg-finder-red/90\">\n            Sign In\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader currentPage=\"finds\" />\n\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-white border border-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n            <div className=\"h-24 bg-white border border-gray-200 rounded-lg\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <div key={i} className=\"h-64 bg-white border border-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader currentPage=\"finds\" />\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8\">\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-finder-red/10 rounded-lg flex items-center justify-center mx-auto mb-2 sm:mb-3\">\n                <Target className=\"w-5 h-5 sm:w-6 sm:h-6 text-finder-red\" />\n              </div>\n              <div className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-1\">{stats.total}</div>\n              <div className=\"text-xs sm:text-sm text-gray-500\">Total Finds</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2 sm:mb-3\">\n                <Zap className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n              </div>\n              <div className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-1\">{stats.active}</div>\n              <div className=\"text-xs sm:text-sm text-gray-500\">Active Finds</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2 sm:mb-3\">\n                <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-1\">{stats.totalProposals}</div>\n              <div className=\"text-xs sm:text-sm text-gray-500\">Total Proposals</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-2 sm:mb-3\">\n                <Award className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600\" />\n              </div>\n              <div className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-1\">{stats.completed}</div>\n              <div className=\"text-xs sm:text-sm text-gray-500\">Completed Finds</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"bg-white border border-gray-200 shadow-sm mb-8\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-6\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search your finds...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 bg-white border-gray-300 focus:border-finder-red focus:ring-finder-red/20\"\n                />\n              </div>\n\n              {/* Filters */}\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-full sm:w-40 bg-white border-gray-300\">\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category.id} value={category.name}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-full sm:w-40 bg-white border-gray-300\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"newest\">Newest First</SelectItem>\n                    <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                    <SelectItem value=\"budget-high\">Highest Budget</SelectItem>\n                    <SelectItem value=\"budget-low\">Lowest Budget</SelectItem>\n                    <SelectItem value=\"proposals\">Most Proposals</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    className={`flex-1 sm:flex-none ${viewMode === \"grid\" ? \"bg-finder-red hover:bg-finder-red/90\" : \"\"}`}\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    className={`flex-1 sm:flex-none ${viewMode === \"list\" ? \"bg-finder-red hover:bg-finder-red/90\" : \"\"}`}\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results */}\n        {filteredFinds.length === 0 ? (\n          <Card className=\"bg-white border border-gray-200 shadow-sm\">\n            <CardContent className=\"py-16 text-center\">\n              {searchQuery || selectedCategory ? (\n                <>\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Search className=\"w-8 h-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No results found</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Try adjusting your search terms or filters to find what you're looking for.\n                  </p>\n                  <Button \n                    onClick={() => {\n                      setSearchQuery(\"\");\n                      setSelectedCategory(\"\");\n                    }}\n                    variant=\"outline\"\n                    className=\"border-gray-300 hover:bg-gray-50\"\n                  >\n                    Clear Filters\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-16 h-16 bg-finder-red/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Target className=\"w-8 h-8 text-finder-red\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No finds yet</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Create your first find to connect with talented finders.\n                  </p>\n                  <Button \n                    onClick={() => navigate(\"/client/create-find\")}\n                    className=\"bg-finder-red hover:bg-finder-red/90 text-white shadow-sm hover:shadow-md transition-all duration-200\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Find\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className={`grid gap-4 ${\n            viewMode === \"grid\" \n              ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" \n              : \"grid-cols-1\"\n          }`}>\n            {filteredFinds.map((find) => {\n              const statusInfo = getStatusInfo(find.status);\n              const proposalCount = find._count?.proposals || 0;\n              \n              return (\n                <Card \n                  key={find.id}\n                  className=\"bg-white border border-gray-200 shadow-sm hover:shadow-lg hover:border-gray-300 transition-all duration-200 cursor-pointer group\"\n                  onClick={() => navigate(`/client/finds/${find.id}`)}\n                >\n                  {/* Header */}\n                  <div className=\"p-5 pb-4 border-b border-gray-100\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <Badge \n                        variant=\"secondary\"\n                        className={`text-xs font-medium px-2.5 py-1 ${\n                          find.status === 'active' ? 'bg-green-100 text-green-700 border-green-200' :\n                          find.status === 'completed' ? 'bg-blue-100 text-blue-700 border-blue-200' :\n                          find.status === 'cancelled' ? 'bg-red-100 text-red-700 border-red-200' :\n                          'bg-yellow-100 text-yellow-700 border-yellow-200'\n                        }`}\n                      >\n                        {find.status === 'active' ? 'üöÄ Active' :\n                         find.status === 'completed' ? '‚úÖ Completed' :\n                         find.status === 'cancelled' ? '‚ùå Cancelled' :\n                         '‚è≥ Pending'}\n                      </Badge>\n                      <div className=\"text-xs text-gray-500\">\n                        {formatDistanceToNow(new Date(find.createdAt))} ago\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-finder-red transition-colors leading-tight\">\n                      {find.title}\n                    </h3>\n                    \n                    <p className=\"text-gray-600 text-sm leading-relaxed line-clamp-2\">\n                      {find.description}\n                    </p>\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"p-5\">\n                    <div className=\"space-y-4\">\n                      {/* Budget and Timeline */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-1\">\n                          <div className=\"text-xs text-gray-500 font-medium\">Budget</div>\n                          <div className=\"text-sm font-semibold text-green-600\">\n                            ‚Ç¶{parseInt(find.budgetMin || \"0\").toLocaleString()} - ‚Ç¶{parseInt(find.budgetMax || \"0\").toLocaleString()}\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <div className=\"text-xs text-gray-500 font-medium\">Timeline</div>\n                          <div className=\"text-sm font-semibold text-gray-700\">\n                            {find.timeframe || \"Flexible\"}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Category and Stats */}\n                      <div className=\"flex items-center justify-between\">\n                        <Badge \n                          variant=\"outline\" \n                          className=\"text-xs capitalize border-finder-red/20 text-finder-red bg-finder-red/5\"\n                        >\n                          {find.category}\n                        </Badge>\n                        \n                        <div className=\"flex items-center space-x-3 text-xs text-gray-500\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Users className=\"w-3 h-3\" />\n                            <span>{proposalCount} {proposalCount === 1 ? 'proposal' : 'proposals'}</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Action Button */}\n                      <div className=\"pt-2\">\n                        <Button \n                          className=\"w-full bg-finder-red hover:bg-finder-red/90 text-white transition-all duration-200 text-sm font-medium\"\n                          size=\"sm\"\n                        >\n                          <span>View Details</span>\n                          <ArrowRight className=\"w-4 h-4 ml-2 group-hover:translate-x-0.5 transition-transform\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Results Summary */}\n        {filteredFinds.length > 0 && (\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500\">\n              Showing {filteredFinds.length} of {finds.length} finds\n              {searchQuery && ` for \"${searchQuery}\"`}\n              {selectedCategory && ` in ${selectedCategory}`}\n            </p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":19247},"client/src/pages/client/change-password.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ArrowLeft, Eye, EyeOff } from \"lucide-react\";\nimport ClientHeader from \"@/components/client-header\";\n\nexport default function ChangePassword() {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n  const [showPasswords, setShowPasswords] = useState({\n    current: false,\n    new: false,\n    confirm: false,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.newPassword !== formData.confirmPassword) {\n      alert(\"New passwords don't match\");\n      return;\n    }\n    \n    if (formData.newPassword.length < 6) {\n      alert(\"New password must be at least 6 characters\");\n      return;\n    }\n    \n    try {\n      const token = localStorage.getItem('findermeister_token');\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          currentPassword: formData.currentPassword,\n          newPassword: formData.newPassword\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert('Password changed successfully!');\n        setFormData({\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: '',\n        });\n      } else {\n        alert(data.message || 'Failed to change password');\n      }\n    } catch (error) {\n      console.error('Password change error:', error);\n      alert('Failed to change password. Please try again.');\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n    setShowPasswords(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader />\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto py-8 px-6\">\n        {/* Back Button */}\n        <Link href=\"/client/dashboard\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Change Password</h1>\n          <p className=\"text-gray-600\">Update your account password for security</p>\n        </div>\n\n        {/* Password Form */}\n        <Card className=\"max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle>Update Password</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"currentPassword\">Current Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"currentPassword\"\n                    name=\"currentPassword\"\n                    type={showPasswords.current ? \"text\" : \"password\"}\n                    value={formData.currentPassword}\n                    onChange={handleChange}\n                    placeholder=\"Enter current password\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700\"\n                    onClick={() => togglePasswordVisibility('current')}\n                  >\n                    {showPasswords.current ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"newPassword\">New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"newPassword\"\n                    name=\"newPassword\"\n                    type={showPasswords.new ? \"text\" : \"password\"}\n                    value={formData.newPassword}\n                    onChange={handleChange}\n                    placeholder=\"Enter new password\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700\"\n                    onClick={() => togglePasswordVisibility('new')}\n                  >\n                    {showPasswords.new ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    type={showPasswords.confirm ? \"text\" : \"password\"}\n                    value={formData.confirmPassword}\n                    onChange={handleChange}\n                    placeholder=\"Confirm new password\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700\"\n                    onClick={() => togglePasswordVisibility('confirm')}\n                  >\n                    {showPasswords.confirm ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <Link href=\"/client/dashboard\">\n                  <Button variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  className=\"bg-finder-red hover:bg-finder-red-dark text-white\"\n                  disabled={!formData.currentPassword || !formData.newPassword || !formData.confirmPassword}\n                >\n                  Update Password\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6745},"client/src/pages/client/contract-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Clock, \n  CheckCircle, \n  FileText, \n  Calendar, \n  MessageCircle,\n  Download,\n  Eye,\n  Star,\n  User,\n  AlertCircle,\n  Briefcase,\n  Shield,\n  TrendingUp,\n  Loader2,\n  Award,\n  FileCheck,\n  Timer,\n  CreditCard,\n  AlertTriangle\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ClientHeader from \"@/components/client-header\";\nimport { ContractDisputeModal } from \"@/components/ContractDisputeModal\";\n\ninterface ContractDetails {\n  id: string;\n  requestId: string;\n  proposalId: string;\n  amount: string;\n  escrowStatus: string;\n  isCompleted: boolean;\n  hasSubmission: boolean;\n  createdAt: string;\n  completedAt?: string;\n  request?: {\n    title: string;\n    description: string;\n    category?: string;\n    timeframe?: string;\n  };\n  finder?: {\n    name: string;\n    email?: string;\n    rating?: string;\n  };\n  orderSubmission?: {\n    id: string;\n    submissionText?: string;\n    attachmentPaths: string[];\n    status: string;\n    submittedAt: string;\n  };\n}\n\nexport default function ContractDetails() {\n  const { contractId } = useParams<{ contractId: string }>();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Payment modal state\n  const [paymentModal, setPaymentModal] = useState<{\n    isOpen: boolean;\n    contractId?: string;\n    amount?: number;\n    paymentUrl?: string;\n    reference?: string;\n    findTitle?: string;\n    finderName?: string;\n  }>({ isOpen: false });\n  \n  // Dispute modal state\n  const [isDisputeModalOpen, setIsDisputeModalOpen] = useState(false);\n\n  const { data: contract, isLoading } = useQuery<ContractDetails>({\n    queryKey: [\"/api/client/contracts\", contractId],\n    enabled: !!contractId,\n  });\n\n  const createConversation = useMutation({\n    mutationFn: async (proposalId: string) => {\n      return apiRequest(\"/api/messages/conversations\", {\n        method: \"POST\",\n        body: JSON.stringify({ proposalId }),\n      });\n    },\n    onSuccess: (data) => {\n      navigate(`/messages/${data.id}`);\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Unable to Start Conversation\",\n        description: \"Please try again later.\",\n      });\n    }\n  });\n\n  // Payment initialization mutation\n  const initializePaymentMutation = useMutation({\n    mutationFn: async (contractId: string) => {\n      return apiRequest(`/api/contracts/${contractId}/payment`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: (data) => {\n      if (data.authorization_url) {\n        setPaymentModal({\n          isOpen: true,\n          contractId: contractId,\n          amount: data.amount,\n          paymentUrl: data.authorization_url,\n          reference: data.reference,\n          findTitle: contract?.request?.title || 'Find Request',\n          finderName: contract?.finder?.name || 'Finder',\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Payment Setup Failed\",\n          description: \"Payment service is currently unavailable. Please contact support.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error('Payment initialization error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Payment Error\",\n        description: error.message || \"Unable to initialize payment. Please try again or contact support.\",\n      });\n    },\n  });\n\n  const handleMessageFinder = () => {\n    if (contract?.proposalId) {\n      createConversation.mutate(contract.proposalId);\n    }\n  };\n\n  const handleInitiatePayment = () => {\n    if (contractId) {\n      initializePaymentMutation.mutate(contractId);\n    }\n  };\n\n  // Redirect if not authenticated or not client\n  if (!user || user.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Shield className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Access Denied</h1>\n          <p className=\"text-slate-600 mb-6\">This contract is only accessible by clients.</p>\n          <Button onClick={() => navigate(\"/login\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n        <ClientHeader currentPage=\"contracts\" />\n\n        <main className=\"max-w-6xl mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-6 sm:p-8\">\n              <div className=\"h-8 bg-slate-200 rounded-lg w-1/3 mb-4\"></div>\n              <div className=\"h-32 bg-slate-200 rounded-lg mb-6\"></div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n              </div>\n            </div>\n            <div className=\"bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-6 sm:p-8\">\n              <div className=\"h-48 bg-slate-200 rounded-lg\"></div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"w-10 h-10 text-slate-400\" />\n          </div>\n          <h3 className=\"text-2xl font-semibold text-slate-900 mb-2\">Contract Not Found</h3>\n          <p className=\"text-slate-600 mb-6\">The contract you're looking for doesn't exist or has been removed.</p>\n          <Button \n            onClick={() => navigate(\"/client/contracts\")}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Contracts\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate progress based on status\n  const getContractProgress = () => {\n    if (contract.isCompleted) return 100;\n    if (contract.hasSubmission) return 75;\n    if (contract.escrowStatus === 'funded') return 50;\n    return 25;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'active':\n      case 'funded':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'submitted':\n        return 'bg-amber-100 text-amber-800 border-amber-200';\n      default:\n        return 'bg-slate-100 text-slate-700 border-slate-200';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"contracts\" />\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        {/* Contract Header */}\n        <div className=\"mb-8\">\n          <div className=\"text-center sm:text-left mb-6\">\n            <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-slate-900 mb-2\">\n              {contract.request?.title || \"Contract Details\"}\n            </h1>\n            <p className=\"text-sm sm:text-lg text-slate-600 mb-4\">\n              Working with {contract.finder?.name || \"Professional Finder\"}\n            </p>\n          </div>\n\n          {/* Progress Tracker */}\n          <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl mb-6\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-semibold text-slate-900\">Contract Progress</h3>\n                <span className=\"text-sm font-medium text-slate-600\">\n                  {getContractProgress()}% Complete\n                </span>\n              </div>\n              <Progress value={getContractProgress()} className=\"h-2 mb-4\" />\n              \n              <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-4 text-xs sm:text-sm\">\n                <div className=\"flex flex-col items-center p-2 rounded-lg bg-green-50\">\n                  <CheckCircle className=\"w-4 h-4 text-green-600 mb-1\" />\n                  <span className=\"text-green-700 font-medium\">Contract</span>\n                  <span className=\"text-green-600\">Signed</span>\n                </div>\n                \n                <div className={`flex flex-col items-center p-2 rounded-lg ${\n                  contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'bg-green-50' : 'bg-slate-50'\n                }`}>\n                  <Shield className={`w-4 h-4 mb-1 ${\n                    contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'text-green-600' : 'text-slate-400'\n                  }`} />\n                  <span className={`font-medium ${\n                    contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'text-green-700' : 'text-slate-500'\n                  }`}>Payment</span>\n                  <span className={contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'text-green-600' : 'text-slate-400'}>\n                    {contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'Secured' : 'Pending'}\n                  </span>\n                </div>\n                \n                <div className={`flex flex-col items-center p-2 rounded-lg ${\n                  contract.hasSubmission ? 'bg-green-50' : 'bg-slate-50'\n                }`}>\n                  <FileCheck className={`w-4 h-4 mb-1 ${\n                    contract.hasSubmission ? 'text-green-600' : 'text-slate-400'\n                  }`} />\n                  <span className={`font-medium ${\n                    contract.hasSubmission ? 'text-green-700' : 'text-slate-500'\n                  }`}>Work</span>\n                  <span className={contract.hasSubmission ? 'text-green-600' : 'text-slate-400'}>\n                    {contract.hasSubmission ? 'Submitted' : 'In Progress'}\n                  </span>\n                </div>\n                \n                <div className={`flex flex-col items-center p-2 rounded-lg ${\n                  contract.isCompleted ? 'bg-green-50' : 'bg-slate-50'\n                }`}>\n                  <Award className={`w-4 h-4 mb-1 ${\n                    contract.isCompleted ? 'text-green-600' : 'text-slate-400'\n                  }`} />\n                  <span className={`font-medium ${\n                    contract.isCompleted ? 'text-green-700' : 'text-slate-500'\n                  }`}>Complete</span>\n                  <span className={contract.isCompleted ? 'text-green-600' : 'text-slate-400'}>\n                    {contract.isCompleted ? 'Finished' : 'Pending'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8\">\n          {/* Left Column - Main Details */}\n          <div className=\"lg:col-span-2 space-y-6 sm:space-y-8\">\n            {/* Contract Overview */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Avatar className=\"w-12 h-12 sm:w-16 sm:h-16 border-2 border-blue-200\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-700 font-semibold text-sm sm:text-lg\">\n                        {(contract.finder?.name || \"F\").split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg sm:text-xl font-semibold text-slate-900 mb-1\">\n                        {contract.finder?.name || \"Professional Finder\"}\n                      </h3>\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <div className=\"flex items-center text-amber-500\">\n                          <Star className=\"w-4 h-4 fill-current\" />\n                          <span className=\"text-sm font-medium ml-1\">\n                            {contract.finder?.rating ? parseFloat(contract.finder.rating).toFixed(1) : '5.0'}\n                          </span>\n                        </div>\n                        <span className=\"text-slate-400\">‚Ä¢</span>\n                        <span className=\"text-sm text-slate-600\">Verified Professional</span>\n                      </div>\n                      {contract.finder?.email && (\n                        <p className=\"text-sm text-slate-500\">{contract.finder.email}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <Separator className=\"my-6\" />\n\n                {/* Project Details */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-slate-900 flex items-center\">\n                    <Briefcase className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    Project Details\n                  </h4>\n                  \n                  {contract.request?.description && (\n                    <div className=\"bg-slate-50/80 rounded-lg p-4\">\n                      <p className=\"text-slate-700 leading-relaxed\">\n                        {contract.request.description}\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {contract.request?.category && (\n                      <div>\n                        <Label className=\"text-slate-600\">Category</Label>\n                        <div className=\"font-medium text-slate-900\">{contract.request.category}</div>\n                      </div>\n                    )}\n                    {contract.request?.timeframe && (\n                      <div>\n                        <Label className=\"text-slate-600\">Timeline</Label>\n                        <div className=\"font-medium text-slate-900\">{contract.request.timeframe}</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Separator className=\"my-6\" />\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Button \n                    onClick={handleMessageFinder}\n                    disabled={createConversation.isPending}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                  >\n                    {createConversation.isPending ? (\n                      <>\n                        <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                        Connecting...\n                      </>\n                    ) : (\n                      <>\n                        <MessageCircle className=\"w-4 h-4 mr-2\" />\n                        Message Finder\n                      </>\n                    )}\n                  </Button>\n                  \n                  {contract.hasSubmission && (\n                    <Button \n                      onClick={() => navigate(`/orders/review/${contract.id}`)}\n                      variant=\"outline\" \n                      className=\"flex-1 border-green-200 text-green-700 hover:bg-green-50\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Review Work\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Work Submission */}\n            {contract.hasSubmission && contract.orderSubmission ? (\n              <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n                <CardContent className=\"p-6 sm:p-8\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-lg font-semibold text-slate-900 flex items-center\">\n                      <FileCheck className=\"w-5 h-5 mr-2 text-green-600\" />\n                      Work Submission\n                    </h3>\n                    <Badge className={getStatusColor(contract.orderSubmission.status)}>\n                      {contract.orderSubmission.status === \"accepted\" ? \"‚úÖ Accepted\" : \n                       contract.orderSubmission.status === \"submitted\" ? \"üìã Submitted\" : \n                       \"‚è≥ \" + contract.orderSubmission.status}\n                    </Badge>\n                  </div>\n\n                  <div className=\"bg-green-50/80 rounded-lg p-4 mb-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                          <Calendar className=\"w-5 h-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-green-900\">\n                            Submitted on {new Date(contract.orderSubmission.submittedAt).toLocaleDateString('en-US', {\n                              weekday: 'long',\n                              year: 'numeric',\n                              month: 'long',\n                              day: 'numeric'\n                            })}\n                          </p>\n                          <p className=\"text-sm text-green-700\">\n                            {contract.orderSubmission.attachmentPaths.length} attachment(s) included\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {contract.orderSubmission.submissionText && (\n                    <div className=\"mb-6\">\n                      <h4 className=\"font-medium text-slate-900 mb-3\">Submission Message:</h4>\n                      <div className=\"bg-slate-50/80 rounded-lg p-4\">\n                        <p className=\"text-slate-700 leading-relaxed\">\n                          {contract.orderSubmission.submissionText}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button \n                      onClick={() => navigate(`/orders/review/${contract.id}`)}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Review Full Submission\n                    </Button>\n                    {contract.orderSubmission.attachmentPaths.length > 0 && (\n                      <Button \n                        variant=\"outline\" \n                        className=\"flex-1 border-slate-200 hover:bg-slate-50\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download Files ({contract.orderSubmission.attachmentPaths.length})\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n                <CardContent className=\"p-6 sm:p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Timer className=\"w-8 h-8 text-amber-600\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">Work In Progress</h3>\n                  <p className=\"text-slate-600 mb-6\">\n                    {contract.finder?.name || \"The finder\"} is currently working on your project. \n                    You'll be notified once they submit their completed work.\n                  </p>\n                  <Button \n                    onClick={() => navigate(`/orders/review/${contract.id}`)}\n                    variant=\"outline\" \n                    className=\"border-blue-200 text-blue-700 hover:bg-blue-50\"\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Check Progress\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Column - Contract Info & Stats */}\n          <div className=\"space-y-6 sm:space-y-8\">\n            {/* Contract Summary */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <h3 className=\"font-semibold text-slate-900 mb-6 flex items-center\">\n                  Contract Summary\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-green-50/80 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm text-green-700\">Total Amount</p>\n                      <p className=\"text-2xl font-bold text-green-800\">\n                        ‚Ç¶{parseInt(contract.amount || \"0\").toLocaleString()}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                      <CreditCard className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-blue-50/80 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm text-blue-700\">Escrow Status</p>\n                      <p className=\"font-semibold text-blue-800 capitalize\">\n                        {contract.escrowStatus === 'funded' || contract.escrowStatus === 'held' ? 'üîí Secured' : '‚è≥ Processing'}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Shield className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-slate-50/80 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm text-slate-700\">Started On</p>\n                      <p className=\"font-semibold text-slate-800\">\n                        {new Date(contract.createdAt).toLocaleDateString('en-US', {\n                          month: 'short',\n                          day: 'numeric',\n                          year: 'numeric'\n                        })}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-slate-100 rounded-full flex items-center justify-center\">\n                      <Calendar className=\"w-6 h-6 text-slate-600\" />\n                    </div>\n                  </div>\n\n                  {contract.completedAt && (\n                    <div className=\"flex items-center justify-between p-4 bg-green-50/80 rounded-lg\">\n                      <div>\n                        <p className=\"text-sm text-green-700\">Completed On</p>\n                        <p className=\"font-semibold text-green-800\">\n                          {new Date(contract.completedAt).toLocaleDateString('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                            year: 'numeric'\n                          })}\n                        </p>\n                      </div>\n                      <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                        <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <h3 className=\"font-semibold text-slate-900 mb-4\">Quick Actions</h3>\n                <div className=\"space-y-3\">\n                  {/* Payment warning for pending escrow */}\n                  {contract.escrowStatus === 'pending' && (\n                    <div className=\"p-4 bg-amber-50 border border-amber-200 rounded-lg mb-3\">\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <AlertTriangle className=\"w-5 h-5 text-amber-600\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-amber-800\">Payment Required</p>\n                          <p className=\"text-xs text-amber-700\">This contract is pending payment. Work cannot begin until escrow is funded.</p>\n                        </div>\n                      </div>\n                      <Button \n                        onClick={handleInitiatePayment}\n                        disabled={initializePaymentMutation.isPending}\n                        className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                      >\n                        {initializePaymentMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                            Setting up payment...\n                          </>\n                        ) : (\n                          <>\n                            <CreditCard className=\"w-4 h-4 mr-2\" />\n                            Fund Contract Escrow\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                  \n                  <Button \n                    onClick={() => navigate(\"/client/contracts\")}\n                    variant=\"outline\" \n                    className=\"w-full justify-start border-slate-200 hover:bg-slate-50\"\n                  >\n                    <FileText className=\"w-4 h-4 mr-3\" />\n                    View All Contracts\n                  </Button>\n                  \n                  <Button \n                    onClick={() => navigate(\"/client/dashboard\")}\n                    variant=\"outline\" \n                    className=\"w-full justify-start border-slate-200 hover:bg-slate-50\"\n                  >\n                    <TrendingUp className=\"w-4 h-4 mr-3\" />\n                    Dashboard\n                  </Button>\n                  \n                  <Button \n                    onClick={() => navigate(\"/client/proposals\")}\n                    variant=\"outline\" \n                    className=\"w-full justify-start border-slate-200 hover:bg-slate-50\"\n                  >\n                    <Briefcase className=\"w-4 h-4 mr-3\" />\n                    View Proposals\n                  </Button>\n                  \n                  {/* Dispute Button */}\n                  <Button \n                    onClick={() => setIsDisputeModalOpen(true)}\n                    variant=\"outline\" \n                    className=\"w-full justify-start border-red-200 text-red-700 hover:bg-red-50\"\n                    data-testid=\"button-dispute-contract\"\n                  >\n                    <AlertTriangle className=\"w-4 h-4 mr-3\" />\n                    Report Issue\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Help & Support */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8 text-center\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <AlertCircle className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-slate-900 mb-2\">Need Help?</h3>\n                <p className=\"text-sm text-slate-600 mb-4\">\n                  Have questions about your contract or need assistance?\n                </p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"border-blue-200 text-blue-700 hover:bg-blue-50\"\n                  onClick={() => navigate(\"/support\")}\n                >\n                  Contact Support\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      {/* Payment Modal - Removed for Flutterwave streamlining */}\n      \n      {/* Dispute Modal */}\n      <ContractDisputeModal\n        isOpen={isDisputeModalOpen}\n        onClose={() => setIsDisputeModalOpen(false)}\n        contractId={contractId || ''}\n        contractTitle={contract?.request?.title}\n      />\n    </div>\n  );\n}\n\n// Helper component for labels\nfunction Label({ className = \"\", children }: { className?: string; children: React.ReactNode }) {\n  return (\n    <p className={`text-xs font-medium text-slate-500 mb-1 ${className}`}>\n      {children}\n    </p>\n  );\n}","size_bytes":30669},"client/src/pages/client/contracts.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { \n  Clock, \n  CheckCircle, \n\n  MessageCircle, \n  FileText, \n  TrendingUp, \n  Shield, \n  Star, \n  ArrowRight,\n  Calendar,\n  User,\n  Briefcase,\n  Award,\n  Eye\n} from \"lucide-react\";\nimport ClientHeader from \"@/components/client-header\";\nimport StartConversationButton from \"@/components/StartConversationButton\";\n\ninterface Contract {\n  id: string;\n  requestId: string;\n  finderId: string;\n  proposalId: string;\n  amount: string;\n  escrowStatus: string;\n  isCompleted: boolean;\n  createdAt: string;\n  completedAt?: string;\n  hasSubmission?: boolean;\n  request?: {\n    title: string;\n    description: string;\n  };\n  finder?: {\n    name: string;\n    rating?: string;\n  };\n}\n\nexport default function ClientContracts() {\n  const { user } = useAuth();\n\n  const { data: contracts = [], isLoading } = useQuery({\n    queryKey: ['/api/client/contracts'],\n    enabled: !!user,\n  }) as { data: Contract[], isLoading: boolean };\n\n  // Format currency in Naira\n  const formatCurrency = (amount: string | number | null) => {\n    if (amount === null || amount === undefined) return '‚Ç¶0';\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(numAmount);\n  };\n\n  // Calculate stats\n  const activeContracts = contracts.filter(c => !c.isCompleted).length;\n  const completedContracts = contracts.filter(c => c.isCompleted).length;\n  const totalSpent = contracts\n    .filter(c => c.isCompleted)\n    .reduce((sum, c) => sum + parseFloat(c.amount), 0);\n\n  // Helper functions for contract status\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-orange-100 text-orange-700 border-orange-200';\n      case 'funded':\n        return 'bg-blue-100 text-blue-700 border-blue-200';\n      case 'completed':\n        return 'bg-emerald-100 text-emerald-700 border-emerald-200';\n      case 'disputed':\n        return 'bg-red-100 text-red-700 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-700 border-gray-200';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Pending Funding';\n      case 'funded':\n        return 'Funded';\n      case 'completed':\n        return 'Completed';\n      case 'disputed':\n        return 'Disputed';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const timeAgo = (timestamp: string) => {\n    const now = new Date();\n    const then = new Date(timestamp);\n    const diffInSeconds = Math.floor((now.getTime() - then.getTime()) / 1000);\n\n    if (diffInSeconds < 60) return `${diffInSeconds} seconds ago`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n    return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-red-50 to-slate-100 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 bg-grid-white/[0.02] -z-10\" />\n      <div className=\"absolute top-0 -left-4 w-72 h-72 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob -z-10\" style={{ backgroundColor: \"hsl(1, 81%, 63%)\" }} />\n      <div className=\"absolute top-0 -right-4 w-72 h-72 bg-slate-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000 -z-10\" />\n      <div className=\"absolute -bottom-8 left-20 w-72 h-72 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-4000 -z-10\" style={{ backgroundColor: \"hsl(1, 81%, 73%)\" }} />\n\n      <ClientHeader currentPage=\"contracts\" />\n\n      <div className=\"relative z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header Section */}\n          <div className=\"mb-12\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-4xl sm:text-5xl font-bold bg-clip-text text-transparent mb-4\" style={{ backgroundImage: \"linear-gradient(to right, hsl(213, 27%, 16%), hsl(1, 81%, 53%))\" }}>\n                Active Contracts\n              </h1>\n              <p className=\"text-slate-600 text-lg max-w-2xl mx-auto\">\n                Manage your ongoing projects and track completed work with talented finders\n              </p>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8\">\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl transition-all duration-500 hover:shadow-3xl hover:scale-105\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                    <Briefcase className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-slate-900 mb-2\">{activeContracts}</div>\n                  <div className=\"text-sm text-slate-600 font-medium\">Active Contracts</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl transition-all duration-500 hover:shadow-3xl hover:scale-105\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center\" style={{ background: \"linear-gradient(to right, hsl(147, 78%, 42%), hsl(159, 100%, 36%))\" }}>\n                    <CheckCircle className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-slate-900 mb-2\">{completedContracts}</div>\n                  <div className=\"text-sm text-slate-600 font-medium\">Completed Finds</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl transition-all duration-500 hover:shadow-3xl hover:scale-105\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 mx-auto mb-4 rounded-full flex items-center justify-center\" style={{ background: \"linear-gradient(to right, hsl(42, 92%, 56%), hsl(45, 100%, 51%))\" }}>\n                    <TrendingUp className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-slate-900 mb-2\">{formatCurrency(totalSpent)}</div>\n                  <div className=\"text-sm text-slate-600 font-medium\">Total Invested</div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl animate-pulse\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-slate-200 rounded-full\"></div>\n                        <div>\n                          <div className=\"h-5 bg-slate-200 rounded w-40 mb-2\"></div>\n                          <div className=\"h-4 bg-slate-200 rounded w-24\"></div>\n                        </div>\n                      </div>\n                      <div className=\"h-8 bg-slate-200 rounded w-20\"></div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-4 bg-slate-200 rounded w-full mb-2\"></div>\n                    <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-4\"></div>\n                    <div className=\"flex gap-3\">\n                      <div className=\"h-9 bg-slate-200 rounded w-24\"></div>\n                      <div className=\"h-9 bg-slate-200 rounded w-20\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : contracts.length === 0 ? (\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl\">\n              <CardContent className=\"text-center py-16\">\n                <div className=\"w-24 h-24 mx-auto mb-6 rounded-full flex items-center justify-center\" style={{ background: \"linear-gradient(to right, hsl(210, 20%, 95%), hsl(1, 81%, 95%))\" }}>\n                  <Briefcase className=\"w-12 h-12\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                </div>\n                <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">Ready to Start Your First Contract?</h3>\n                <p className=\"text-slate-600 mb-8 max-w-md mx-auto text-lg\">\n                  Post a find request and connect with talented finders to get your projects completed professionally.\n                </p>\n                <div className=\"space-y-4\">\n                  <Link href=\"/client/create-find\">\n                    <Button \n                      size=\"lg\" \n                      className=\"text-white shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105 px-8 py-4\"\n                      style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}\n                    >\n                      <FileText className=\"w-5 h-5 mr-2\" />\n                      Post Your First Find\n                    </Button>\n                  </Link>\n                  <div className=\"text-sm text-slate-500\">\n                    Or <Link href=\"/client/browse-finds\" className=\"text-finder-red hover:underline\">browse existing finds</Link>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {contracts.map((contract) => (\n                <Card key={contract.id} className=\"bg-white/80 backdrop-blur-xl border-white/30 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-105 group\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"w-12 h-12 border-2 border-white shadow-lg\">\n                          <AvatarFallback className=\"text-white font-bold\" style={{ background: \"linear-gradient(to bottom right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                            {(contract.finder?.name || \"F\")\n                              .split(' ')\n                              .map(n => n[0])\n                              .join('')\n                              .toUpperCase()\n                              .slice(0, 2)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <CardTitle className=\"text-lg font-bold text-slate-900 group-hover:text-finder-red transition-colors\">\n                            {contract.request?.title || \"Contract\"}\n                          </CardTitle>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Badge \n                              className={`${contract.isCompleted \n                                ? 'bg-emerald-100 text-emerald-700 border-emerald-200' \n                                : 'bg-blue-100 text-blue-700 border-blue-200'\n                              } border shadow-sm`}\n                            >\n                              {contract.isCompleted ? (\n                                <>\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Completed\n                                </>\n                              ) : (\n                                <>\n                                  <Clock className=\"w-3 h-3 mr-1\" />\n                                  Active\n                                </>\n                              )}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-xl font-bold\" style={{ color: \"hsl(1, 81%, 53%)\" }}>\n                          {formatCurrency(contract.amount)}\n                        </div>\n                        <div className=\"text-xs text-slate-500 font-medium\">\n                          {contract.isCompleted && contract.completedAt ? \n                            `Completed ${new Date(contract.completedAt).toLocaleDateString()}` :\n                            `Started ${new Date(contract.createdAt).toLocaleDateString()}`\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center text-sm text-slate-600 bg-slate-50/80 rounded-lg p-3\">\n                      <User className=\"w-4 h-4 mr-2\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                      <span className=\"font-medium\">Working with {contract.finder?.name || \"Finder\"}</span>\n                      {contract.finder?.rating && (\n                        <div className=\"flex items-center ml-2 text-amber-500\">\n                          <Star className=\"w-3 h-3 fill-current\" />\n                          <span className=\"text-xs font-medium ml-1\">\n                            {parseFloat(contract.finder.rating).toFixed(1)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    <p className=\"text-slate-600 line-clamp-2 text-sm leading-relaxed\">\n                      {contract.request?.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-3 pt-2\">\n                      <StartConversationButton \n                        proposalId={contract.proposalId}\n                        finderName={contract.finder?.name || \"Finder\"}\n                        variant=\"outline\"\n                        className=\"flex-1 hover:bg-finder-red hover:text-white hover:border-finder-red transition-all duration-200\"\n                      >\n                        <MessageCircle className=\"w-4 h-4 mr-2\" />\n                        Message Finder\n                      </StartConversationButton>\n\n                      {!contract.isCompleted && !contract.hasSubmission && (\n                        <Link href={`/client/contracts/${contract.id}`}>\n                          <Button \n                            size=\"sm\" \n                            className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                            style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Details\n                          </Button>\n                        </Link>\n                      )}\n\n                      {!contract.isCompleted && contract.hasSubmission && (\n                        <Link href={`/orders/review/${contract.id}`}>\n                          <Button \n                            size=\"sm\" \n                            className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                            style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}\n                          >\n                            <Star className=\"w-4 h-4 mr-1\" />\n                            Review Work\n                          </Button>\n                        </Link>\n                      )}\n\n                      {contract.isCompleted && (\n                        <Link href={`/orders/review/${contract.id}`}>\n                          <Button size=\"sm\" variant=\"secondary\" className=\"shadow-lg hover:shadow-xl transition-all\">\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View Details\n                          </Button>\n                        </Link>\n                      )}\n\n                      {/* Payment Button for pending contracts */}\n                      {!contract.isCompleted && contract.escrowStatus === 'pending' && (\n                        <Link href={`/client/fund-contract/${contract.id}`}>\n                          <Button\n                            size=\"sm\"\n                            className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                            style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}\n                          >\n                            <Shield className=\"w-4 h-4 mr-1\" />\n                            Fund Contract\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17793},"client/src/pages/client/create-request.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport ClientHeader from \"@/components/client-header\";\nimport { \n  Search, \n  ArrowLeft, \n  PlusCircle, \n  Clock, \n  MapPin, \n  Banknote, \n  Tag,\n  FileText,\n  Upload,\n  CheckCircle2,\n  AlertCircle,\n  X,\n  Loader2,\n  ExternalLink\n} from \"lucide-react\";\nimport type { Category } from \"@shared/schema\";\n\nexport default function CreateRequest() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    minBudget: \"\",\n    maxBudget: \"\",\n    timeframe: \"\",\n    location: \"\",\n    requirements: \"\"\n  });\n\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [step, setStep] = useState(1);\n\n  // Redirect if not authenticated or not a client\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/login\");\n      return;\n    }\n    \n    // Only clients can create finds\n    if (user.role !== 'client') {\n      navigate(\"/\"); // Redirect to home page\n      return;\n    }\n  }, [user, navigate]);\n\n  // Fetch categories for dropdown\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    enabled: !!user\n  });\n\n  // Fetch admin settings for high budget thresholds\n  const { data: adminSettings } = useQuery<{[key: string]: string}>({\n    queryKey: ['/api/admin/settings'],\n    enabled: !!user\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = localStorage.getItem('findermeister_token');\n      const formDataObj = new FormData();\n      \n      // Add text fields to FormData\n      formDataObj.append('title', data.title);\n      formDataObj.append('description', data.description);\n      formDataObj.append('category', data.category);\n      formDataObj.append('budgetMin', data.budgetMin);\n      formDataObj.append('budgetMax', data.budgetMax);\n      formDataObj.append('timeframe', data.timeframe);\n      formDataObj.append('clientId', data.clientId);\n      if (data.location) formDataObj.append('location', data.location);\n      if (data.requirements) formDataObj.append('requirements', data.requirements);\n      \n      // Add files to FormData\n      selectedFiles.forEach((file) => {\n        formDataObj.append('attachments', file);\n      });\n\n      const response = await fetch(\"/api/client/finds\", {\n        method: \"POST\",\n        headers: {\n          ...(token ? { Authorization: `Bearer ${token}` } : {}),\n          // Don't set Content-Type, let browser handle it for multipart/form-data\n        },\n        body: formDataObj,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create find\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/client/finds'] });\n      \n      toast({\n        title: \"Find Posted Successfully!\",\n        description: \"Your find is now live and visible to finders.\",\n      });\n      \n      // Reset form\n      setFormData({\n        title: \"\",\n        description: \"\",\n        category: \"\",\n        minBudget: \"\",\n        maxBudget: \"\",\n        timeframe: \"\",\n        location: \"\",\n        requirements: \"\"\n      });\n      \n      setSelectedFiles([]);\n      setStep(1);\n      \n      // Navigate to dashboard\n      setTimeout(() => {\n        navigate(\"/client/dashboard\");\n      }, 1500);\n    },\n    onError: (error: any) => {\n      // Check if this is a verification error\n      if (error.verificationRequired || error.message?.includes(\"verification required\")) {\n        toast({\n          variant: \"destructive\",\n          title: \"Account Verification Required\",\n          description: error.message || \"You must verify your account before posting finds.\",\n          action: (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                navigate(\"/verification\");\n              }}\n              className=\"bg-white hover:bg-gray-50 text-gray-900 border-gray-300\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Verify Account\n            </Button>\n          ),\n        });\n      } \n      // Check if this is a findertokens error with purchase info\n      else if (error.needsToPurchaseTokens && error.purchaseUrl) {\n        toast({\n          variant: \"destructive\",\n          title: \"Insufficient Findertokens\",\n          description: error.message,\n          action: (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                navigate(error.purchaseUrl);\n              }}\n              className=\"bg-white hover:bg-gray-50 text-gray-900 border-gray-300\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Buy Tokens\n            </Button>\n          ),\n        });\n      } else if (error.message && (error.message.includes(\"findertokens\") || error.message.includes(\"Insufficient\"))) {\n        toast({\n          variant: \"destructive\",\n          title: \"Insufficient Findertokens\",\n          description: error.message + \" Go to Token Management to purchase findertokens.\",\n          action: (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                navigate(\"/client/tokens\");\n              }}\n              className=\"bg-white hover:bg-gray-50 text-gray-900 border-gray-300\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Buy Tokens\n            </Button>\n          ),\n        });\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to Post Find\",\n          description: error.message || \"Please try again later\",\n        });\n      }\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.title || !formData.description) {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please fill in title and description\",\n      });\n      return;\n    }\n\n    // Validate category selection\n    if (!formData.category || formData.category === 'loading' || formData.category === 'none') {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please select a valid category\",\n      });\n      return;\n    }\n\n    // Validate budget\n    if (!formData.minBudget || !formData.maxBudget) {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please enter both minimum and maximum budget\",\n      });\n      return;\n    }\n    \n    const minBudget = parseInt(formData.minBudget);\n    const maxBudget = parseInt(formData.maxBudget);\n\n    if (isNaN(minBudget) || isNaN(maxBudget)) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid Budget\",\n        description: \"Please enter valid numbers for budget\",\n      });\n      return;\n    }\n\n    if (minBudget >= maxBudget) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid Budget Range\",\n        description: \"Maximum budget must be higher than minimum budget\",\n      });\n      return;\n    }\n\n    // Validate timeframe\n    if (!formData.timeframe) {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please select a timeframe\",\n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      category: formData.category,\n      budgetMin: minBudget.toString(),\n      budgetMax: maxBudget.toString(),\n      timeframe: formData.timeframe,\n      location: formData.location,\n      requirements: formData.requirements,\n      clientId: user?.id\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSelectChange = (name: string, value: string) => {\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length + selectedFiles.length > 5) {\n      toast({\n        variant: \"destructive\",\n        title: \"Too Many Files\",\n        description: \"You can upload a maximum of 5 files\",\n      });\n      return;\n    }\n    \n    const validFiles = files.filter(file => file.size <= 10 * 1024 * 1024); // 10MB limit\n    if (validFiles.length !== files.length) {\n      toast({\n        variant: \"destructive\",\n        title: \"File Size Error\",\n        description: \"Some files exceed the 10MB limit and were not added\",\n      });\n    }\n    \n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const nextStep = () => {\n    if (step === 1) {\n      // Validate basic info before proceeding\n      if (!formData.title || !formData.description || !formData.category) {\n        toast({\n          variant: \"destructive\",\n          title: \"Missing Information\",\n          description: \"Please fill in all required fields\",\n        });\n        return;\n      }\n    }\n    if (step === 2) {\n      // Validate detailed info before proceeding\n      if (!formData.minBudget || !formData.maxBudget || !formData.timeframe) {\n        toast({\n          variant: \"destructive\",\n          title: \"Missing Information\",\n          description: \"Please fill in budget and timeframe\",\n        });\n        return;\n      }\n    }\n    setStep(prev => prev + 1);\n  };\n\n  const prevStep = () => setStep(prev => prev - 1);\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"create-find\" />\n\n      {/* Mobile Progress Bar */}\n      <div className=\"bg-white/60 border-b border-slate-200/60\">\n        <div className=\"max-w-4xl mx-auto px-3 sm:px-6 lg:px-8 py-3 sm:py-4\">\n          <div className=\"flex items-center\">\n            {/* Step 1 */}\n            <div className={`flex items-center flex-shrink-0 ${step >= 1 ? 'text-blue-600' : 'text-slate-400'}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-semibold ${\n                step >= 1 ? 'bg-blue-600 text-white' : 'bg-slate-200 text-slate-400'\n              }`}>\n                1\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm font-medium hidden sm:block\">Info</span>\n            </div>\n            <div className={`flex-1 h-0.5 sm:h-1 rounded-full mx-2 sm:mx-4 ${step >= 2 ? 'bg-blue-600' : 'bg-slate-200'}`} />\n            \n            {/* Step 2 */}\n            <div className={`flex items-center flex-shrink-0 ${step >= 2 ? 'text-blue-600' : 'text-slate-400'}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-semibold ${\n                step >= 2 ? 'bg-blue-600 text-white' : 'bg-slate-200 text-slate-400'\n              }`}>\n                2\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm font-medium hidden sm:block\">Details</span>\n            </div>\n            <div className={`flex-1 h-0.5 sm:h-1 rounded-full mx-2 sm:mx-4 ${step >= 3 ? 'bg-blue-600' : 'bg-slate-200'}`} />\n            \n            {/* Step 3 */}\n            <div className={`flex items-center flex-shrink-0 ${step >= 3 ? 'text-blue-600' : 'text-slate-400'}`}>\n              <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-semibold ${\n                step >= 3 ? 'bg-blue-600 text-white' : 'bg-slate-200 text-slate-400'\n              }`}>\n                3\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm font-medium hidden sm:block\">Review</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        <div className=\"mb-6 sm:mb-8 text-center\">\n          <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-slate-900 mb-2\">Post a New Find</h1>\n          <p className=\"text-sm sm:text-lg text-slate-600 max-w-2xl mx-auto\">\n            Tell finders exactly what you need help finding and connect with the right experts\n          </p>\n        </div>\n\n        <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n          <CardContent className=\"p-4 sm:p-6 lg:p-8\">\n            <form onSubmit={handleSubmit}>\n              {/* Step 1: Basic Information */}\n              {step === 1 && (\n                <div className=\"space-y-6 sm:space-y-8\">\n                  <div className=\"text-center mb-6 sm:mb-8\">\n                    <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Search className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600\" />\n                    </div>\n                    <h2 className=\"text-xl sm:text-2xl font-semibold text-slate-900 mb-2\">What are you looking for?</h2>\n                    <p className=\"text-sm sm:text-base text-slate-600\">Start with the basics - we'll gather more details next</p>\n                  </div>\n\n                  <div className=\"space-y-4 sm:space-y-6\">\n                    <div>\n                      <Label htmlFor=\"title\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <FileText className=\"w-4 h-4 mr-2 text-blue-600\" />\n                        Find Title *\n                      </Label>\n                      <Input\n                        id=\"title\"\n                        name=\"title\"\n                        required\n                        value={formData.title}\n                        onChange={handleInputChange}\n                        placeholder=\"e.g., Find a reliable graphic designer for logo design\"\n                        className=\"h-12 sm:h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"category\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <Tag className=\"w-4 h-4 mr-2 text-blue-600\" />\n                        Category *\n                      </Label>\n                      <Select value={formData.category} onValueChange={(value) => handleSelectChange('category', value)}>\n                        <SelectTrigger className=\"h-12 sm:h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20\">\n                          <SelectValue placeholder=\"Choose the best category for your find\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categoriesLoading ? (\n                            <SelectItem value=\"loading\" disabled>Loading categories...</SelectItem>\n                          ) : categories.length > 0 ? (\n                            categories\n                              .filter(category => category.isActive)\n                              .map((category) => (\n                                <SelectItem key={category.id} value={category.name}>\n                                  {category.name}\n                                </SelectItem>\n                              ))\n                          ) : (\n                            <SelectItem value=\"none\" disabled>No categories available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"description\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <FileText className=\"w-4 h-4 mr-2 text-blue-600\" />\n                        Description *\n                      </Label>\n                      <Textarea\n                        id=\"description\"\n                        name=\"description\"\n                        required\n                        value={formData.description}\n                        onChange={handleInputChange}\n                        placeholder=\"Provide specific details about what you're looking for, any requirements, and what success looks like...\"\n                        className=\"min-h-[120px] sm:min-h-[140px] text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 resize-none\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end pt-4 sm:pt-6\">\n                    <Button \n                      type=\"button\" \n                      onClick={nextStep}\n                      className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white px-6 sm:px-8 py-3 text-sm sm:text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                    >\n                      Continue to Details\n                      <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5 ml-2 rotate-180\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Detailed Information */}\n              {step === 2 && (\n                <div className=\"space-y-6 sm:space-y-8\">\n                  <div className=\"text-center mb-6 sm:mb-8\">\n                    <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <PlusCircle className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-600\" />\n                    </div>\n                    <h2 className=\"text-xl sm:text-2xl font-semibold text-slate-900 mb-2\">Project Details</h2>\n                    <p className=\"text-sm sm:text-base text-slate-600\">Help finders understand your budget and timeline</p>\n                  </div>\n\n                  <div className=\"space-y-4 sm:space-y-6\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n                      <div>\n                        <Label htmlFor=\"minBudget\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                          <Banknote className=\"w-4 h-4 mr-2 text-green-600\" />\n                          Min Budget (‚Ç¶) *\n                        </Label>\n                        <Input\n                          id=\"minBudget\"\n                          name=\"minBudget\"\n                          type=\"number\"\n                          required\n                          min=\"1000\"\n                          value={formData.minBudget}\n                          onChange={handleInputChange}\n                          placeholder=\"5000\"\n                          className=\"h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-green-500 focus:ring-green-500/20\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"maxBudget\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                          <Banknote className=\"w-4 h-4 mr-2 text-green-600\" />\n                          Max Budget (‚Ç¶) *\n                        </Label>\n                        <Input\n                          id=\"maxBudget\"\n                          name=\"maxBudget\"\n                          type=\"number\"\n                          required\n                          min=\"1000\"\n                          value={formData.maxBudget}\n                          onChange={handleInputChange}\n                          placeholder=\"25000\"\n                          className=\"h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-green-500 focus:ring-green-500/20\"\n                        />\n                      </div>\n                    </div>\n\n                    {/* High Budget Warning */}\n                    {adminSettings && formData.maxBudget && parseInt(formData.maxBudget) >= parseInt(adminSettings.highBudgetThreshold || \"100000\") && (\n                      <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                        <div className=\"flex items-start\">\n                          <AlertCircle className=\"w-5 h-5 text-purple-600 mr-3 mt-0.5 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-semibold text-purple-800 mb-1\">High Budget Posting</h4>\n                            <p className=\"text-sm text-purple-700 mb-2\">\n                              Your budget (‚Ç¶{parseInt(formData.maxBudget).toLocaleString()}) qualifies as a high-budget posting. \n                              This requires <strong>{adminSettings.highBudgetTokenCost || \"5\"} findertokens</strong> to post.\n                            </p>\n                            <p className=\"text-xs text-purple-600\">\n                              High-budget posts get priority visibility and attract experienced finders.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    <div>\n                      <Label htmlFor=\"timeframe\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <Clock className=\"w-4 h-4 mr-2 text-orange-600\" />\n                        Timeline *\n                      </Label>\n                      <Select value={formData.timeframe} onValueChange={(value) => handleSelectChange(\"timeframe\", value)}>\n                        <SelectTrigger className=\"h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-orange-500 focus:ring-orange-500/20\">\n                          <SelectValue placeholder=\"When do you need this completed?\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1-3 days\">1-3 days (Urgent)</SelectItem>\n                          <SelectItem value=\"1 week\">Within 1 week</SelectItem>\n                          <SelectItem value=\"2 weeks\">Within 2 weeks</SelectItem>\n                          <SelectItem value=\"1 month\">Within 1 month</SelectItem>\n                          <SelectItem value=\"2-3 months\">2-3 months</SelectItem>\n                          <SelectItem value=\"flexible\">Flexible timeline</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"location\" className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <MapPin className=\"w-4 h-4 mr-2 text-purple-600\" />\n                        Location\n                      </Label>\n                      <Input\n                        id=\"location\"\n                        name=\"location\"\n                        value={formData.location}\n                        onChange={handleInputChange}\n                        placeholder=\"Lagos, Nigeria or Remote/Online\"\n                        className=\"h-12 text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-purple-500 focus:ring-purple-500/20\"\n                      />\n                      <p className=\"text-xs sm:text-sm text-slate-500 mt-2\">Leave blank if location doesn't matter</p>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"requirements\" className=\"text-slate-700 font-semibold mb-2 block text-sm sm:text-base\">\n                        Special Requirements\n                      </Label>\n                      <Textarea\n                        id=\"requirements\"\n                        name=\"requirements\"\n                        value={formData.requirements}\n                        onChange={handleInputChange}\n                        placeholder=\"Any specific skills, certifications, tools, or other requirements...\"\n                        className=\"min-h-[100px] text-sm sm:text-lg bg-white/80 border-slate-200 focus:border-slate-500 focus:ring-slate-500/20 resize-none\"\n                      />\n                    </div>\n\n                    {/* Mobile-optimized File Upload */}\n                    <div>\n                      <Label className=\"text-slate-700 font-semibold flex items-center mb-2 text-sm sm:text-base\">\n                        <Upload className=\"w-4 h-4 mr-2 text-indigo-600\" />\n                        Supporting Files\n                      </Label>\n                      <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-4 sm:p-6 bg-slate-50/50 hover:bg-slate-100/50 transition-colors\">\n                        <div className=\"text-center\">\n                          <Upload className=\"w-8 h-8 sm:w-10 sm:h-10 text-slate-400 mx-auto mb-2\" />\n                          <Label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                            <span className=\"text-blue-600 hover:text-blue-700 font-medium text-sm sm:text-base\">Upload files</span>\n                            <span className=\"text-slate-500 text-sm sm:text-base\"> or tap here</span>\n                          </Label>\n                          <input\n                            id=\"file-upload\"\n                            type=\"file\"\n                            multiple\n                            onChange={handleFileSelect}\n                            className=\"hidden\"\n                            accept=\"image/*,.pdf,.doc,.docx,.txt\"\n                          />\n                          <p className=\"text-xs sm:text-sm text-slate-500 mt-1\">\n                            Images, PDFs, documents up to 10MB each (max 5 files)\n                          </p>\n                        </div>\n                        \n                        {selectedFiles.length > 0 && (\n                          <div className=\"mt-4 space-y-2\">\n                            {selectedFiles.map((file, index) => (\n                              <div key={index} className=\"flex items-center justify-between bg-white rounded-lg p-3 shadow-sm\">\n                                <div className=\"flex items-center space-x-3 min-w-0 flex-1\">\n                                  <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center flex-shrink-0\">\n                                    <FileText className=\"w-4 h-4 text-blue-600\" />\n                                  </div>\n                                  <div className=\"min-w-0 flex-1\">\n                                    <p className=\"text-sm font-medium text-slate-700 truncate\">{file.name}</p>\n                                    <p className=\"text-xs text-slate-500\">{(file.size / 1024 / 1024).toFixed(1)} MB</p>\n                                  </div>\n                                </div>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => removeFile(index)}\n                                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50 flex-shrink-0 p-2\"\n                                >\n                                  <X className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col-reverse sm:flex-row items-center justify-between pt-4 sm:pt-6 border-t border-slate-200 gap-3 sm:gap-0\">\n                    <Button \n                      type=\"button\" \n                      onClick={prevStep}\n                      variant=\"outline\"\n                      className=\"w-full sm:w-auto px-4 sm:px-6 py-3 font-medium\"\n                    >\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      onClick={nextStep}\n                      className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white px-6 sm:px-8 py-3 text-sm sm:text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                    >\n                      Review & Post\n                      <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5 ml-2 rotate-180\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Review & Submit */}\n              {step === 3 && (\n                <div className=\"space-y-6 sm:space-y-8\">\n                  <div className=\"text-center mb-6 sm:mb-8\">\n                    <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <CheckCircle2 className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600\" />\n                    </div>\n                    <h2 className=\"text-xl sm:text-2xl font-semibold text-slate-900 mb-2\">Review Your Find</h2>\n                    <p className=\"text-sm sm:text-base text-slate-600\">Double-check everything looks good before posting</p>\n                  </div>\n\n                  {/* Review Summary */}\n                  <div className=\"bg-slate-50 rounded-xl p-4 sm:p-6 space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-slate-900 mb-2 text-sm sm:text-base\">{formData.title}</h3>\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 text-xs sm:text-sm\">\n                        {formData.category}\n                      </Badge>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div>\n                      <h4 className=\"font-medium text-slate-700 mb-2 text-sm sm:text-base\">Description</h4>\n                      <p className=\"text-slate-600 leading-relaxed text-sm sm:text-base\">{formData.description}</p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4 pt-4\">\n                      <div className=\"text-center p-3 bg-white rounded-lg border\">\n                        <Banknote className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-600 mx-auto mb-1\" />\n                        <div className=\"text-xs sm:text-sm font-medium text-slate-900\">\n                          ‚Ç¶{parseInt(formData.minBudget || \"0\").toLocaleString()} - ‚Ç¶{parseInt(formData.maxBudget || \"0\").toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-slate-500\">Budget</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg border\">\n                        <Clock className=\"w-4 h-4 sm:w-5 sm:h-5 text-orange-600 mx-auto mb-1\" />\n                        <div className=\"text-xs sm:text-sm font-medium text-slate-900\">{formData.timeframe}</div>\n                        <div className=\"text-xs text-slate-500\">Timeline</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg border\">\n                        <MapPin className=\"w-4 h-4 sm:w-5 sm:h-5 text-purple-600 mx-auto mb-1\" />\n                        <div className=\"text-xs sm:text-sm font-medium text-slate-900\">\n                          {formData.location || \"Any location\"}\n                        </div>\n                        <div className=\"text-xs text-slate-500\">Location</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-lg border\">\n                        <Upload className=\"w-4 h-4 sm:w-5 sm:h-5 text-indigo-600 mx-auto mb-1\" />\n                        <div className=\"text-xs sm:text-sm font-medium text-slate-900\">{selectedFiles.length}</div>\n                        <div className=\"text-xs text-slate-500\">Files</div>\n                      </div>\n                    </div>\n\n                    {formData.requirements && (\n                      <>\n                        <Separator />\n                        <div>\n                          <h4 className=\"font-medium text-slate-700 mb-2 text-sm sm:text-base\">Special Requirements</h4>\n                          <p className=\"text-slate-600 text-sm sm:text-base\">{formData.requirements}</p>\n                        </div>\n                      </>\n                    )}\n                  </div>\n\n                  {/* Important Notice */}\n                  <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 flex items-start space-x-3\">\n                    <AlertCircle className=\"w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-amber-800 mb-1 text-sm sm:text-base\">Important Notice</h4>\n                      <p className=\"text-xs sm:text-sm text-amber-700\">\n                        Once posted, your find will be visible to all finders on the platform. \n                        You'll receive proposals and can communicate with interested finders through our messaging system.\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col-reverse sm:flex-row items-center justify-between pt-4 sm:pt-6 border-t border-slate-200 gap-3 sm:gap-0\">\n                    <Button \n                      type=\"button\" \n                      onClick={prevStep}\n                      variant=\"outline\"\n                      className=\"w-full sm:w-auto px-4 sm:px-6 py-3 font-medium\"\n                    >\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Edit\n                    </Button>\n                    <Button \n                      type=\"submit\"\n                      disabled={createRequestMutation.isPending}\n                      className=\"w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-6 sm:px-8 py-3 text-sm sm:text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                    >\n                      {createRequestMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"animate-spin w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n                          Posting Find...\n                        </>\n                      ) : (\n                        <>\n                          <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n                          Post My Find\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </form>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":36053},"client/src/pages/client/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Calendar } from \"lucide-react\";\nimport ClientHeader from \"@/components/client-header\";\nimport type { Find, Proposal } from \"@shared/schema\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function ClientDashboard() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n\n  // Format currency in Naira\n  const formatCurrency = (amount: string | number | null) => {\n    if (amount === null || amount === undefined) return '‚Ç¶0';\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `‚Ç¶${Math.round(numAmount / 100)}`;\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 1) return '1 day ago';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 14) return '1 week ago';\n    if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n    return `${Math.ceil(diffDays / 30)} months ago`;\n  };\n\n  const { data: requests = [], isLoading: requestsLoading } = useQuery<Find[]>({\n    queryKey: ['/api/client/finds'],\n    enabled: !!user && user.role === 'client'\n  });\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<any[]>({\n    queryKey: ['/api/client/proposals'],\n    enabled: !!user && user.role === 'client'\n  });\n\n  // Check if user is a client, redirect if not\n  if (user && user.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">{t('common.access_denied')}</h1>\n          <p className=\"text-gray-600 mb-4\">{t('common.client_only_page')}</p>\n          <Link href=\"/finder/dashboard\">\n            <Button>{t('navigation.finder_dashboard')}</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (requestsLoading || proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader currentPage=\"dashboard\" />\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto py-8 px-6\">\n        {/* Header Section */}\n        <div className=\"mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Finds</h1>\n            <p className=\"text-gray-600\">Manage your posted finds and track their progress</p>\n          </div>\n          <div className=\"mt-4 sm:mt-0 flex gap-3\">\n            <Link href=\"/client/create-find\">\n              <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Post New Find\n              </Button>\n            </Link>\n            <Link href=\"/client/proposals\">\n              <Button variant=\"outline\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                View Proposals\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Status Filter Tabs */}\n        <div className=\"mb-6\">\n          <div className=\"flex gap-1 bg-gray-100 p-1 rounded-lg w-fit\">\n            <button className=\"px-4 py-2 text-sm font-medium text-white bg-finder-red rounded-md\">\n              Open Requests\n            </button>\n          </div>\n        </div>\n\n        {/* Requests Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {requests.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Search className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No finds posted yet</h3>\n                <p className=\"text-gray-600 mb-6\">Start by posting your first find to connect with talented finders</p>\n                <Link href=\"/client/create-find\">\n                  <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Post Your First Find\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"overflow-hidden\">\n                {/* Table Header - Hidden on mobile */}\n                <div className=\"hidden lg:block bg-gray-50 px-6 py-4 border-b border-gray-200\">\n                  <div className=\"grid grid-cols-12 gap-4 text-sm font-medium text-gray-700\">\n                    <div className=\"col-span-5\">Title</div>\n                    <div className=\"col-span-2\">Budget</div>\n                    <div className=\"col-span-2\">Posted</div>\n                    <div className=\"col-span-2\">Status</div>\n                    <div className=\"col-span-1\"></div>\n                  </div>\n                </div>\n\n                {/* Table Rows */}\n                <div className=\"divide-y divide-gray-200\">\n                  {requests.map((request: Find) => (\n                    <div key={request.id} className=\"px-4 sm:px-6 py-4 hover:bg-gray-50 transition-colors\">\n                      {/* Desktop Layout */}\n                      <div className=\"hidden lg:grid lg:grid-cols-12 gap-4 items-center\">\n                        {/* Title Column */}\n                        <div className=\"col-span-5\">\n                          <h3 className=\"font-medium text-gray-900 mb-1\">{request.title}</h3>\n                          <p className=\"text-sm text-gray-600 line-clamp-2\">\n                            {request.description}\n                          </p>\n                        </div>\n\n                        {/* Budget Column */}\n                        <div className=\"col-span-2\">\n                          <div className=\"text-sm font-semibold text-green-600\">\n                            {formatCurrency(request.budgetMin)} - {formatCurrency(request.budgetMax)}\n                          </div>\n                        </div>\n\n                        {/* Posted Column */}\n                        <div className=\"col-span-2\">\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Calendar className=\"w-4 h-4 mr-1\" />\n                            {formatDate(request.createdAt || '')}\n                          </div>\n                        </div>\n\n                        {/* Status Column */}\n                        <div className=\"col-span-2\">\n                          <Badge \n                            variant={\n                              (request.status === 'active' || request.status === 'open') ? 'default' :\n                              request.status === 'in_progress' ? 'secondary' :\n                              request.status === 'completed' ? 'outline' :\n                              'destructive'\n                            }\n                            className={\n                              (request.status === 'active' || request.status === 'open') ? 'bg-blue-100 text-blue-700 hover:bg-blue-200' :\n                              request.status === 'in_progress' ? 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200' :\n                              request.status === 'completed' ? 'bg-green-100 text-green-700 hover:bg-green-200' :\n                              'bg-red-100 text-red-700 hover:bg-red-200'\n                            }\n                          >\n                            {request.status === 'active' || request.status === 'open' ? 'Open' : \n                             request.status === 'in_progress' ? 'In Progress' :\n                             request.status === 'completed' ? 'Completed' :\n                             request.status?.replace('_', ' ') || 'Pending'}\n                          </Badge>\n                        </div>\n\n                        {/* Action Column */}\n                        <div className=\"col-span-1\">\n                          <Link href={`/client/finds/${request.id}`}>\n                            <Button size=\"sm\" variant=\"ghost\" className=\"text-finder-red hover:text-finder-red-dark hover:bg-finder-red/10\">\n                              View\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n\n                      {/* Mobile/Tablet Layout */}\n                      <div className=\"lg:hidden space-y-3\">\n                        {/* Title and Action Row */}\n                        <div className=\"flex justify-between items-start gap-3\">\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-medium text-gray-900 text-sm sm:text-base truncate\">{request.title}</h3>\n                            <p className=\"text-xs sm:text-sm text-gray-600 mt-1 line-clamp-2\">\n                              {request.description}\n                            </p>\n                          </div>\n                          <div className=\"flex-shrink-0\">\n                            <Link href={`/client/finds/${request.id}`}>\n                              <Button size=\"sm\" variant=\"ghost\" className=\"text-finder-red hover:text-finder-red-dark hover:bg-finder-red/10 px-2 sm:px-3\">\n                                <span className=\"hidden sm:inline\">View</span>\n                                <span className=\"sm:hidden text-xs\">View</span>\n                              </Button>\n                            </Link>\n                          </div>\n                        </div>\n\n                        {/* Details Row */}\n                        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-4 text-xs sm:text-sm\">\n                          {/* Budget */}\n                          <div>\n                            <span className=\"text-gray-500 font-medium\">Budget: </span>\n                            <span className=\"font-semibold text-green-600\">\n                              {formatCurrency(request.budgetMin)} - {formatCurrency(request.budgetMax)}\n                            </span>\n                          </div>\n\n                          {/* Posted Date */}\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 text-gray-500\" />\n                            <span className=\"text-gray-600\">{formatDate(request.createdAt || '')}</span>\n                          </div>\n\n                          {/* Status */}\n                          <div className=\"flex items-center\">\n                            <Badge \n                              variant={\n                                (request.status === 'active' || request.status === 'open') ? 'default' :\n                                request.status === 'in_progress' ? 'secondary' :\n                                request.status === 'completed' ? 'outline' :\n                                'destructive'\n                              }\n                              className={`text-xs ${\n                                (request.status === 'active' || request.status === 'open') ? 'bg-blue-100 text-blue-700 hover:bg-blue-200' :\n                                request.status === 'in_progress' ? 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200' :\n                                request.status === 'completed' ? 'bg-green-100 text-green-700 hover:bg-green-200' :\n                                'bg-red-100 text-red-700 hover:bg-red-200'\n                              }`}\n                            >\n                              {request.status === 'active' || request.status === 'open' ? 'Open' : \n                               request.status === 'in_progress' ? 'In Progress' :\n                               request.status === 'completed' ? 'Completed' :\n                               request.status?.replace('_', ' ') || 'Pending'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Stats */}\n        {requests.length > 0 && (\n          <div className=\"mt-8 grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                  {requests.filter((r: Find) => r.status === 'open' || r.status === 'active').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Open Finds</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600 mb-1\">\n                  {requests.filter((r: Find) => r.status === 'in_progress').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">In Progress</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-600 mb-1\">\n                  {requests.filter((r: Find) => r.status === 'completed').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Completed</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-purple-600 mb-1\">\n                  {proposals.length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Total Proposals</div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14574},"client/src/pages/client/mobile-dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Eye, Cog, ChevronRight, FileEdit } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport ClientHeader from \"@/components/client-header\";\nimport logoImage from \"@assets/findermeister logo real_1756395091374.jpg\";\n\nexport default function ClientMobileDashboard() {\n  const { user } = useAuth();\n\n  const userName = user?.firstName || \"Tosin\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <ClientHeader currentPage=\"dashboard\" />\n      \n      {/* Mobile Phone Frame - Match exact mockup */}\n      <div className=\"max-w-sm mx-auto min-h-screen bg-white shadow-2xl border border-gray-200 rounded-2xl overflow-hidden relative mt-4\">\n        {/* User Profile Section */}\n        <div className=\"bg-finder-red px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center mr-3 shadow-sm\">\n              <div className=\"w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center\">\n                <span className=\"text-xs text-white font-medium\">üë§</span>\n              </div>\n            </div>\n            <span className=\"text-white text-xl font-semibold\">{userName}</span>\n          </div>\n          <ChevronRight className=\"h-5 w-5 text-white\" />\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"px-4 py-6 bg-white flex-1\">\n          {/* Action Grid - Exact 2x2 Layout */}\n          <div className=\"grid grid-cols-2 gap-4 mb-12\">\n            {/* Post a Request - Top Left */}\n            <Link href=\"/client/create-find\">\n              <div className=\"flex flex-col items-center justify-center py-8 px-4 cursor-pointer hover:bg-gray-50 rounded-lg transition-colors\">\n                <div className=\"w-16 h-16 bg-finder-red rounded-xl flex items-center justify-center mb-3 shadow-sm\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-1 bg-white rounded mb-1\"></div>\n                    <div className=\"w-6 h-1 bg-white rounded mb-1\"></div>\n                    <div className=\"w-4 h-4 bg-white rounded-full flex items-center justify-center\">\n                      <span className=\"text-finder-red text-xs font-bold\">+</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">Post a</div>\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">Find</div>\n                </div>\n              </div>\n            </Link>\n\n            {/* View Proposals - Top Right */}\n            <Link href=\"/client/proposals\">\n              <div className=\"flex flex-col items-center justify-center py-8 px-4 cursor-pointer hover:bg-gray-50 rounded-lg transition-colors\">\n                <div className=\"w-16 h-16 bg-finder-red rounded-xl flex items-center justify-center mb-3 shadow-sm\">\n                  <div className=\"w-8 h-8 border-2 border-white rounded-full flex items-center justify-center relative\">\n                    <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-white rounded-full\"></div>\n                    <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-white rounded-full\"></div>\n                    <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-white rounded-full\"></div>\n                    <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-white rounded-full\"></div>\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">View</div>\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">Proposals</div>\n                </div>\n              </div>\n            </Link>\n\n            {/* My Contracts - Bottom Left */}\n            <Link href=\"/client/browse-requests\">\n              <div className=\"flex flex-col items-center justify-center py-8 px-4 cursor-pointer hover:bg-gray-50 rounded-lg transition-colors\">\n                <div className=\"w-16 h-16 bg-finder-red rounded-xl flex items-center justify-center mb-3 shadow-sm\">\n                  <div className=\"flex flex-col space-y-1\">\n                    <div className=\"w-8 h-1 bg-white rounded\"></div>\n                    <div className=\"w-6 h-1 bg-white rounded\"></div>\n                    <div className=\"w-7 h-1 bg-white rounded\"></div>\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">My</div>\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">Contracts</div>\n                </div>\n              </div>\n            </Link>\n\n            {/* Settings - Bottom Right */}\n            <Link href=\"/client/profile\">\n              <div className=\"flex flex-col items-center justify-center py-8 px-4 cursor-pointer hover:bg-gray-50 rounded-lg transition-colors\">\n                <div className=\"w-16 h-16 bg-finder-red rounded-xl flex items-center justify-center mb-3 shadow-sm\">\n                  <div className=\"w-8 h-8 border-2 border-white rounded-full flex items-center justify-center relative\">\n                    <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                    <div className=\"absolute -top-1 w-1 h-3 bg-white rounded\"></div>\n                    <div className=\"absolute -right-1 w-3 h-1 bg-white rounded\"></div>\n                    <div className=\"absolute -bottom-1 w-1 h-3 bg-white rounded\"></div>\n                    <div className=\"absolute -left-1 w-3 h-1 bg-white rounded\"></div>\n                    <div className=\"absolute top-0 right-0 w-1 h-1 bg-white rounded-full\"></div>\n                    <div className=\"absolute bottom-0 right-0 w-1 h-1 bg-white rounded-full\"></div>\n                    <div className=\"absolute bottom-0 left-0 w-1 h-1 bg-white rounded-full\"></div>\n                    <div className=\"absolute top-0 left-0 w-1 h-1 bg-white rounded-full\"></div>\n                  </div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-900 font-semibold text-sm leading-tight\">Settings</div>\n                </div>\n              </div>\n            </Link>\n          </div>\n        </div>\n\n        {/* Bottom Tagline - Positioned at bottom */}\n        <div className=\"absolute bottom-8 left-0 right-0\">\n          <div className=\"text-center px-4\">\n            <p className=\"text-gray-500 text-base font-medium leading-snug\">\n              One successful find<br />\n              at a time\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7087},"client/src/pages/client/post-request.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/ui/navigation\";\nimport MobileNav from \"@/components/ui/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthService } from \"@/lib/auth\";\nimport ClientHeader from \"@/components/client-header\";\n\nexport default function PostRequest() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    budgetMin: \"\",\n    budgetMax: \"\",\n    timeframe: \"\",\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...AuthService.getAuthHeaders(),\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/requests/my'] });\n      toast({\n        title: \"Request posted successfully\",\n        description: \"Your request is now live and finders can submit proposals.\",\n      });\n      setLocation('/client/dashboard');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to post request\",\n        description: error instanceof Error ? error.message : \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated || user?.role !== 'client') {\n    return <div>Access denied</div>;\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.budgetMin || !formData.budgetMax) {\n      toast({\n        title: \"Budget required\",\n        description: \"Please provide both minimum and maximum budget.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      category: formData.category,\n      budgetMin: parseFloat(formData.budgetMin),\n      budgetMax: parseFloat(formData.budgetMax),\n      timeframe: formData.timeframe,\n    });\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"create-find\" />\n\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bold text-finder-text\">\n              Post a Request\n            </CardTitle>\n            <p className=\"text-finder-text-light\">\n              Fill out the details of what you're looking for, and finders can submit proposals to help.\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"What are you looking for?\"\n                  value={formData.title}\n                  onChange={(e) => handleChange('title', e.target.value)}\n                  required\n                  className=\"focus:ring-finder-red focus:border-finder-red\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <Select value={formData.category} onValueChange={(value) => handleChange('category', value)}>\n                  <SelectTrigger className=\"focus:ring-finder-red focus:border-finder-red\">\n                    <SelectValue placeholder=\"Select a category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"electronics\">Electronics</SelectItem>\n                    <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                    <SelectItem value=\"fashion\">Fashion & Accessories</SelectItem>\n                    <SelectItem value=\"home\">Home & Garden</SelectItem>\n                    <SelectItem value=\"automotive\">Automotive</SelectItem>\n                    <SelectItem value=\"books\">Books & Media</SelectItem>\n                    <SelectItem value=\"services\">Services</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  rows={4}\n                  placeholder=\"Provide detailed information about what you need found, including specifications, preferred brands, condition requirements, etc.\"\n                  value={formData.description}\n                  onChange={(e) => handleChange('description', e.target.value)}\n                  required\n                  className=\"focus:ring-finder-red focus:border-finder-red resize-none\"\n                />\n              </div>\n\n              <div>\n                <Label>Budget Range</Label>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"budgetMin\" className=\"text-sm\">Minimum ($)</Label>\n                    <Input\n                      id=\"budgetMin\"\n                      type=\"number\"\n                      placeholder=\"50\"\n                      value={formData.budgetMin}\n                      onChange={(e) => handleChange('budgetMin', e.target.value)}\n                      required\n                      className=\"focus:ring-finder-red focus:border-finder-red\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"budgetMax\" className=\"text-sm\">Maximum ($)</Label>\n                    <Input\n                      id=\"budgetMax\"\n                      type=\"number\"\n                      placeholder=\"200\"\n                      value={formData.budgetMax}\n                      onChange={(e) => handleChange('budgetMax', e.target.value)}\n                      required\n                      className=\"focus:ring-finder-red focus:border-finder-red\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"timeframe\">Timeframe</Label>\n                <Select value={formData.timeframe} onValueChange={(value) => handleChange('timeframe', value)}>\n                  <SelectTrigger className=\"focus:ring-finder-red focus:border-finder-red\">\n                    <SelectValue placeholder=\"Select timeframe\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"asap\">ASAP (1-2 days)</SelectItem>\n                    <SelectItem value=\"week\">Within a week</SelectItem>\n                    <SelectItem value=\"two_weeks\">Within 2 weeks</SelectItem>\n                    <SelectItem value=\"month\">Within a month</SelectItem>\n                    <SelectItem value=\"no_rush\">No rush</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-finder-red hover:bg-finder-red-dark font-semibold py-3\"\n                disabled={createRequestMutation.isPending}\n              >\n                {createRequestMutation.isPending ? \"Posting Request...\" : \"Submit Request\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":8433},"client/src/pages/client/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  User, \n  Mail, \n  Phone, \n  Calendar, \n  MapPin, \n  Briefcase,\n  Edit,\n  Save,\n  Eye,\n  Users,\n  Target,\n  Award,\n  TrendingUp,\n  Settings,\n  Lock,\n  Camera,\n  CheckCircle2,\n  AlertCircle,\n  Loader2,\n  FileText,\n  Clock,\n  Star\n} from \"lucide-react\";\nimport { useQueryClient, useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport ClientHeader from \"@/components/client-header\";\nimport AdminHeader from \"@/components/admin-header\";\n\nexport default function ClientProfile() {\n  const [, navigate] = useLocation();\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Get userId from URL parameters (direct userId in path)\n  const params = useParams();\n  const urlParams = new URLSearchParams(window.location.search);\n  const queryUserId = urlParams.get('userId');\n  \n  // Handle both nameSlug and direct userId routes\n  const viewUserId = queryUserId || params.userId;\n  const isAdminViewing = user?.role === 'admin' && !!viewUserId;\n  \n  // Fetch user's requests for statistics\n  const { data: requests = [] } = useQuery({\n    queryKey: ['/api/client/finds'],\n    queryFn: () => apiRequest('/api/client/finds'),\n    enabled: !isAdminViewing && user?.role === 'client',\n  });\n  \n  // Fetch user data if admin is viewing another user's profile\n  const { data: profileUser, isLoading: profileLoading, error: profileError } = useQuery({\n    queryKey: ['/api/admin/users', viewUserId],\n    queryFn: () => {\n      console.log('Fetching profile user for:', viewUserId);\n      return apiRequest(`/api/admin/users/${viewUserId}`);\n    },\n    enabled: Boolean(isAdminViewing && viewUserId),\n  });\n\n  // Use either the profile user (for admin viewing) or the logged-in user (for self-viewing)\n  const displayUser = isAdminViewing ? profileUser : user;\n\n  // Debug logging\n  console.log('Profile page state:', {\n    user,\n    authLoading,\n    isAdminViewing,\n    viewUserId,\n    displayUser,\n    profileLoading,\n    profileError,\n    userRole: user?.role,\n    displayUserExists: !!displayUser\n  });\n\n  // Additional check: if we have a user but no displayUser, something is wrong\n  if (user && !authLoading && !displayUser) {\n    console.error('User exists but displayUser is null:', { user, isAdminViewing, profileUser });\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <AlertCircle className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Profile Loading Error</h1>\n          <p className=\"text-slate-600 mb-6\">There was an issue loading your profile. Please try refreshing the page.</p>\n          <Button onClick={() => window.location.reload()} className=\"bg-blue-600 hover:bg-blue-700\">\n            Refresh Page\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: displayUser?.firstName || '',\n    lastName: displayUser?.lastName || '',\n    email: displayUser?.email || '',\n    phone: displayUser?.phone || '',\n  });\n\n  // Update form data when user data loads/changes\n  useEffect(() => {\n    if (displayUser) {\n      setFormData({\n        firstName: displayUser.firstName || '',\n        lastName: displayUser.lastName || '',\n        email: displayUser.email || '',\n        phone: displayUser.phone || '',\n      });\n    }\n  }, [displayUser]);\n\n  const updateProfile = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      // Only allow self-editing for now (admins can view but not edit from this page)\n      if (isAdminViewing) {\n        throw new Error(\"Admins can view but not edit client profiles from this page\");\n      }\n      return apiRequest('/api/auth/update-profile', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      setFormData({\n        firstName: data.user.firstName,\n        lastName: data.user.lastName,\n        email: data.user.email,\n        phone: data.user.phone || '',\n      });\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n      });\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfile.mutate(formData);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleCancel = () => {\n    if (displayUser) {\n      setFormData({\n        firstName: displayUser.firstName || '',\n        lastName: displayUser.lastName || '',\n        email: displayUser.email || '',\n        phone: displayUser.phone || '',\n      });\n    }\n    setIsEditing(false);\n  };\n\n  // Show loading state while auth is loading\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Loader2 className=\"w-10 h-10 text-blue-600 animate-spin\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Loading...</h1>\n          <p className=\"text-slate-600\">Please wait while we load your profile.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Access control: allow clients to view their own profile, or admins to view any client profile\n  if (!user || (user.role !== 'client' && user.role !== 'admin')) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Access Denied</h1>\n          <p className=\"text-slate-600 mb-6\">This page is only accessible by clients or admins.</p>\n          <Button onClick={() => navigate(\"/login\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // If admin is viewing without a specific userId, show error\n  if (user.role === 'admin' && !viewUserId) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Users className=\"w-10 h-10 text-orange-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">User ID Required</h1>\n          <p className=\"text-slate-600 mb-6\">Please provide a userId parameter to view a client profile.</p>\n          <Button onClick={() => navigate(\"/admin/users\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Back to Users\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Show loading state while profile is loading for admin\n  if (isAdminViewing && profileLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Loader2 className=\"w-10 h-10 text-blue-600 animate-spin\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Loading Profile...</h1>\n          <p className=\"text-slate-600\">Please wait while we load the user profile.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state if profile loading failed for admin\n  if (isAdminViewing && profileError) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <AlertCircle className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Profile Not Found</h1>\n          <p className=\"text-slate-600 mb-6\">The requested user profile could not be loaded.</p>\n          <Button onClick={() => navigate(\"/admin/users\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Back to Users\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Ensure we have a displayUser before proceeding\n  if (!displayUser) {\n    console.warn('No displayUser available, redirecting to access denied');\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Profile Not Available</h1>\n          <p className=\"text-slate-600 mb-6\">Unable to load profile data. Please try again.</p>\n          <Button onClick={() => navigate(\"/client/dashboard\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Go to Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Get real client statistics from the requests data\n  const clientStats = {\n    totalFinds: requests?.length || 0,\n    activeFinds: requests?.filter((r: any) => r.status === 'open' || r.status === 'in_progress').length || 0,\n    completedFinds: requests?.filter((r: any) => r.status === 'completed').length || 0,\n    totalSpent: 0, // This would need to be calculated from completed contracts\n    joinDate: displayUser?.createdAt || new Date().toISOString()\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-red-50 to-slate-100 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 bg-grid-white/[0.02] -z-10\" />\n      <div className=\"absolute top-0 -left-4 w-72 h-72 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob -z-10\" style={{ backgroundColor: \"hsl(1, 81%, 63%)\" }} />\n      <div className=\"absolute top-0 -right-4 w-72 h-72 bg-slate-300 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-2000 -z-10\" />\n      <div className=\"absolute -bottom-8 left-20 w-72 h-72 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-blob animation-delay-4000 -z-10\" style={{ backgroundColor: \"hsl(1, 81%, 73%)\" }} />\n\n      {isAdminViewing ? (\n        <AdminHeader currentPage=\"users\" />\n      ) : (\n        <ClientHeader currentPage=\"profile\" />\n      )}\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 sm:gap-12\">\n          {/* Left Column - Profile Overview */}\n          <div className=\"lg:col-span-1 space-y-8\">\n            {/* Profile Card */}\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl shadow-slate-200/25 hover:shadow-3xl transition-all duration-500 group\">\n              <CardContent className=\"p-8 sm:p-10 text-center\">\n                <div className=\"relative mb-8\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-24 h-24 sm:w-28 sm:h-28 mx-auto border-4 border-white shadow-2xl ring-4 transition-all duration-300 group-hover:ring-opacity-70 ring-red-200\">\n                      <AvatarFallback className=\"text-white text-2xl sm:text-3xl font-bold\" style={{ background: \"linear-gradient(to bottom right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                        {((displayUser?.firstName || \"\") + (displayUser?.lastName || \"\"))\n                          .split(' ')\n                          .map((n: string) => n[0])\n                          .join('')\n                          .toUpperCase()\n                          .slice(0, 2)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"absolute inset-0 w-24 h-24 sm:w-28 sm:h-28 mx-auto rounded-full animate-pulse\" style={{ background: \"linear-gradient(to bottom right, hsl(1, 81%, 63%, 0.2), hsl(1, 81%, 53%, 0.2))\" }} />\n                  </div>\n                  <button className=\"absolute -bottom-2 -right-2 w-10 h-10 rounded-full flex items-center justify-center shadow-xl hover:shadow-2xl hover:scale-110 transition-all duration-200 ring-2 ring-white\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                    <Camera className=\"w-5 h-5 text-white\" />\n                  </button>\n                </div>\n                \n                <h2 className=\"text-2xl sm:text-3xl font-bold bg-clip-text text-transparent mb-3\" style={{ backgroundImage: \"linear-gradient(to right, hsl(213, 27%, 16%), hsl(1, 81%, 53%))\" }}>\n                  {displayUser?.firstName} {displayUser?.lastName}\n                </h2>\n                <p className=\"text-slate-600 mb-6 font-medium\">{displayUser?.email}</p>\n                \n                <div className=\"flex items-center justify-center space-x-1 mb-8\">\n                  <div className=\"flex items-center bg-gradient-to-r from-blue-50 to-indigo-50 p-3 rounded-full\">\n                    <Calendar className=\"w-5 h-5 text-blue-600 mr-2\" />\n                    <span className=\"text-sm text-slate-700 font-medium\">\n                      Member since {format(new Date(clientStats.joinDate), 'MMM yyyy')}\n                    </span>\n                  </div>\n                </div>\n\n                <Badge className=\"text-white border-0 px-4 py-2 mb-8 shadow-lg\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                  <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                  Verified Client\n                </Badge>\n\n                <div className=\"space-y-4 text-sm\">\n                  <div className=\"flex items-center justify-center bg-slate-50/80 rounded-full py-2 px-4\">\n                    <Calendar className=\"w-4 h-4 mr-3\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                    <span className=\"font-medium text-slate-700\">Joined {format(new Date(clientStats.joinDate), 'MMM yyyy')}</span>\n                  </div>\n                  <div className=\"flex items-center justify-center bg-slate-50/80 rounded-full py-2 px-4\">\n                    <MapPin className=\"w-4 h-4 mr-3\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                    <span className=\"font-medium text-slate-700\">Nigeria</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card className=\"backdrop-blur-xl border-white/30 shadow-2xl hover:shadow-3xl transition-all duration-500\" style={{ background: \"linear-gradient(135deg, hsl(1, 81%, 95%, 0.8), hsl(210, 20%, 95%, 0.8))\", boxShadow: \"0 25px 50px -12px hsl(1, 81%, 53%, 0.25)\" }}>\n              <CardContent className=\"p-8 sm:p-10\">\n                <h3 className=\"font-bold text-slate-900 mb-6 flex items-center text-lg\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center mr-3\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                    <TrendingUp className=\"w-4 h-4 text-white\" />\n                  </div>\n                  Client Statistics\n                </h3>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between bg-white/60 rounded-2xl p-4 hover:bg-white/80 transition-all duration-200\">\n                    <span className=\"text-sm font-medium text-slate-700 flex items-center\">\n                      <div className=\"w-6 h-6 rounded-full flex items-center justify-center mr-3\" style={{ backgroundColor: \"hsl(1, 81%, 95%)\" }}>\n                        <Target className=\"w-3 h-3\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                      </div>\n                      Total Finds\n                    </span>\n                    <span className=\"font-bold text-xl text-slate-900\">{clientStats.totalFinds}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between bg-white/60 rounded-2xl p-4 hover:bg-white/80 transition-all duration-200\">\n                    <span className=\"text-sm font-medium text-slate-700 flex items-center\">\n                      <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                        <Eye className=\"w-3 h-3 text-green-600\" />\n                      </div>\n                      Active Finds\n                    </span>\n                    <span className=\"font-bold text-xl text-green-600\">{clientStats.activeFinds}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between bg-white/60 rounded-2xl p-4 hover:bg-white/80 transition-all duration-200\">\n                    <span className=\"text-sm font-medium text-slate-700 flex items-center\">\n                      <div className=\"w-6 h-6 bg-slate-100 rounded-full flex items-center justify-center mr-3\">\n                        <Award className=\"w-3 h-3 text-slate-600\" />\n                      </div>\n                      Completed\n                    </span>\n                    <span className=\"font-bold text-xl text-slate-600\">{clientStats.completedFinds}</span>\n                  </div>\n\n                  <div className=\"rounded-2xl p-6 text-center text-white shadow-lg\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                    <div className=\"text-3xl font-bold mb-2\">\n                      {clientStats.totalFinds}\n                    </div>\n                    <div className=\"text-sm opacity-90 font-medium\">Total Requests</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Profile Details */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Personal Information */}\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl shadow-slate-200/25 hover:shadow-3xl transition-all duration-500\">\n              <CardHeader className=\"pb-6\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                  <CardTitle className=\"flex items-center text-slate-900 text-xl\">\n                    <div className=\"w-8 h-8 rounded-lg flex items-center justify-center mr-3\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                      <User className=\"w-4 h-4 text-white\" />\n                    </div>\n                    Personal Information\n                  </CardTitle>\n                  {!isEditing ? (\n                    <Button \n                      onClick={() => setIsEditing(true)}\n                      className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                      style={{ \n                        background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\",\n                        backgroundImage: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\"\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 71%, 43%), hsl(1, 61%, 33%))\";\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\";\n                      }}\n                      size=\"sm\"\n                    >\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit Profile\n                    </Button>\n                  ) : (\n                    <div className=\"flex space-x-3\">\n                      <Button \n                        onClick={handleCancel}\n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"border-slate-300 hover:bg-slate-50 transition-all duration-200\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleSubmit}\n                        disabled={updateProfile.isPending}\n                        size=\"sm\"\n                        className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                        style={{ \n                          background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\",\n                          backgroundImage: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\"\n                        }}\n                        onMouseEnter={(e) => {\n                          e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 71%, 43%), hsl(1, 61%, 33%))\";\n                        }}\n                        onMouseLeave={(e) => {\n                          e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\";\n                        }}\n                      >\n                        {updateProfile.isPending ? (\n                          <>\n                            <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                            Saving...\n                          </>\n                        ) : (\n                          <>\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Save Changes\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-8 sm:p-10\">\n                {isEditing ? (\n                  <form onSubmit={handleSubmit} className=\"space-y-8\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-8\">\n                      <div>\n                        <Label htmlFor=\"firstName\" className=\"text-slate-700 font-semibold text-sm mb-3 block\">First Name</Label>\n                        <Input\n                          id=\"firstName\"\n                          name=\"firstName\"\n                          value={formData.firstName}\n                          onChange={handleChange}\n                          placeholder=\"Enter your first name\"\n                          className=\"h-12 bg-white/80 backdrop-blur-sm border-slate-200/60 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                          style={{ \n                            borderColor: \"hsl(210, 20%, 90%)\",\n                          }}\n                          onFocus={(e) => {\n                            e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                            e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                          }}\n                          onBlur={(e) => {\n                            e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                            e.currentTarget.style.boxShadow = \"none\";\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\" className=\"text-slate-700 font-semibold text-sm mb-3 block\">Last Name</Label>\n                        <Input\n                          id=\"lastName\"\n                          name=\"lastName\"\n                          value={formData.lastName}\n                          onChange={handleChange}\n                          placeholder=\"Enter your last name\"\n                          className=\"h-12 bg-white/80 backdrop-blur-sm border-slate-200/60 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                          style={{ \n                            borderColor: \"hsl(210, 20%, 90%)\",\n                          }}\n                          onFocus={(e) => {\n                            e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                            e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                          }}\n                          onBlur={(e) => {\n                            e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                            e.currentTarget.style.boxShadow = \"none\";\n                          }}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-slate-700 font-semibold text-sm mb-3 block\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleChange}\n                        placeholder=\"Enter your email address\"\n                        className=\"h-12 bg-white/80 backdrop-blur-sm border-slate-200/60 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                        style={{ \n                          borderColor: \"hsl(210, 20%, 90%)\",\n                        }}\n                        onFocus={(e) => {\n                          e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                          e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                        }}\n                        onBlur={(e) => {\n                          e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                          e.currentTarget.style.boxShadow = \"none\";\n                        }}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"text-slate-700 font-semibold text-sm mb-3 block\">Phone Number</Label>\n                      <Input\n                        id=\"phone\"\n                        name=\"phone\"\n                        value={formData.phone}\n                        onChange={handleChange}\n                        placeholder=\"Enter your phone number\"\n                        className=\"h-12 bg-white/80 backdrop-blur-sm border-slate-200/60 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\"\n                        style={{ \n                          borderColor: \"hsl(210, 20%, 90%)\",\n                        }}\n                        onFocus={(e) => {\n                          e.currentTarget.style.borderColor = \"hsl(1, 81%, 53%)\";\n                          e.currentTarget.style.boxShadow = \"0 0 0 3px hsl(1, 81%, 90%)\";\n                        }}\n                        onBlur={(e) => {\n                          e.currentTarget.style.borderColor = \"hsl(210, 20%, 90%)\";\n                          e.currentTarget.style.boxShadow = \"none\";\n                        }}\n                      />\n                    </div>\n                  </form>\n                ) : (\n                  <div className=\"space-y-8\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-8\">\n                      <div className=\"bg-slate-50/80 rounded-2xl p-6 hover:bg-slate-50 transition-all duration-200\">\n                        <div className=\"text-sm font-semibold text-slate-500 mb-3 uppercase tracking-wider\">First Name</div>\n                        <div className=\"text-slate-900 font-semibold text-lg\">{displayUser?.firstName || 'Not provided'}</div>\n                      </div>\n                      <div className=\"bg-slate-50/80 rounded-2xl p-6 hover:bg-slate-50 transition-all duration-200\">\n                        <div className=\"text-sm font-semibold text-slate-500 mb-3 uppercase tracking-wider\">Last Name</div>\n                        <div className=\"text-slate-900 font-semibold text-lg\">{displayUser?.lastName || 'Not provided'}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-slate-50/80 rounded-2xl p-6 hover:bg-slate-50 transition-all duration-200\">\n                      <div className=\"text-sm font-semibold text-slate-500 mb-3 uppercase tracking-wider flex items-center\">\n                        <Mail className=\"w-4 h-4 mr-2\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                        Email Address\n                      </div>\n                      <div className=\"text-slate-900 font-semibold text-lg\">{displayUser?.email}</div>\n                    </div>\n\n                    <div className=\"bg-slate-50/80 rounded-2xl p-6 hover:bg-slate-50 transition-all duration-200\">\n                      <div className=\"text-sm font-semibold text-slate-500 mb-3 uppercase tracking-wider flex items-center\">\n                        <Phone className=\"w-4 h-4 mr-2\" style={{ color: \"hsl(1, 81%, 53%)\" }} />\n                        Phone Number\n                      </div>\n                      <div className=\"text-slate-900 font-semibold text-lg\">{displayUser?.phone || 'Not provided'}</div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Account Settings */}\n            <Card className=\"bg-white/80 backdrop-blur-xl border-white/20 shadow-2xl shadow-slate-200/25 hover:shadow-3xl transition-all duration-500\">\n              <CardHeader className=\"pb-6\">\n                <CardTitle className=\"flex items-center text-slate-900 text-xl\">\n                  <div className=\"w-8 h-8 rounded-lg flex items-center justify-center mr-3\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                    <Settings className=\"w-4 h-4 text-white\" />\n                  </div>\n                  Account Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-8 sm:p-10\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 p-6 rounded-2xl transition-all duration-300 border\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 95%, 0.8), hsl(210, 20%, 95%, 0.8))\", borderColor: \"hsl(1, 81%, 90%, 0.5)\" }}>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 rounded-2xl flex items-center justify-center shadow-lg\" style={{ background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\" }}>\n                        <Lock className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-slate-900 text-lg\">Password Security</h4>\n                        <p className=\"text-sm text-slate-600\">Update your account password</p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={() => navigate(\"/client/change-password\")}\n                      className=\"text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                      style={{ \n                        background: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\",\n                        backgroundImage: \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\"\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 71%, 43%), hsl(1, 61%, 33%))\";\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundImage = \"linear-gradient(to right, hsl(1, 81%, 53%), hsl(1, 71%, 43%))\";\n                      }}\n                      size=\"sm\"\n                    >\n                      Change Password\n                    </Button>\n                  </div>\n\n                  \n                </div>\n              </CardContent>\n            </Card>\n\n            \n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":34201},"client/src/pages/client/proposal-detail.tsx":{"content":"import { useParams, Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, User, Clock, DollarSign } from \"lucide-react\";\nimport ClientHeader from \"@/components/client-header\";\nimport StartConversationButton from \"@/components/StartConversationButton\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Proposal } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ntype ProposalWithDetails = Proposal & {\n  finder: {\n    id: string;\n    user: { firstName: string; lastName: string; email: string; };\n    completedJobs: number;\n    rating: number;\n  };\n  request: {\n    title: string;\n    description: string;\n    category: string;\n    budgetMin: string;\n    budgetMax: string;\n  };\n};\n\nexport default function ProposalDetail() {\n  const params = useParams();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const proposalId = params.id as string;\n  const [paymentModal, setPaymentModal] = useState<{\n    isOpen: boolean;\n    contractId?: string;\n    amount?: number;\n    paymentUrl?: string;\n    reference?: string;\n    findTitle?: string;\n    finderName?: string;\n  }>({ isOpen: false });\n\n  const { data: proposal, isLoading } = useQuery<ProposalWithDetails>({\n    queryKey: ['/api/proposals', proposalId],\n    enabled: !!proposalId && !!user\n  });\n\n  const acceptProposal = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/proposals/${id}/accept`, { method: \"POST\" });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/proposals', proposalId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/client/requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/client/proposals'] });\n\n      if (data.success && data.payment && data.payment.required) {\n        // Open payment modal with the contract details\n        setPaymentModal({\n          isOpen: true,\n          contractId: data.contract.id,\n          amount: data.payment.amount,\n          paymentUrl: data.payment.paymentUrl,\n          reference: data.payment.reference,\n          findTitle: data.contract.findTitle || proposal?.request.title || 'Find Request',\n          finderName: data.contract.finderName || (proposal ? `${proposal.finder.user.firstName} ${proposal.finder.user.lastName}` : 'Finder'),\n        });\n\n        toast({\n          title: \"Contract Created!\",\n          description: \"Please complete payment to fund the escrow and start work.\",\n        });\n      } else {\n        toast({\n          title: \"Success\",\n          description: \"Proposal accepted and contract created!\",\n        });\n        window.location.href = \"/client/contracts\";\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to accept proposal and create contract. Please try again.\",\n      });\n    }\n  });\n\n  const handleAcceptProposal = (id: string) => {\n    acceptProposal.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader />\n        <div className=\"container mx-auto py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center mb-6\">\n              <Link href=\"/client/proposals\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Proposals\n                </Button>\n              </Link>\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n              </div>\n            </div>\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!proposal && !isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader />\n        <div className=\"container mx-auto py-8\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Proposal Not Found</h1>\n            <p className=\"text-gray-600 mb-6\">The proposal you're looking for doesn't exist or you don't have permission to view it.</p>\n            <Link href=\"/client/proposals\">\n              <Button>Back to Proposals</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // If still loading or proposal not ready, don't render the main content\n  if (!proposal) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader />\n        <div className=\"container mx-auto py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center mb-6\">\n              <Link href=\"/client/proposals\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Proposals\n                </Button>\n              </Link>\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n              </div>\n            </div>\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n        <ClientHeader />\n\n        <div className=\"container mx-auto py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center mb-6\">\n              <Link href=\"/client/proposals\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Proposals\n                </Button>\n              </Link>\n              <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Proposal Details</h1>\n              <p className=\"text-gray-600\">for \"{proposal.request.title}\"</p>\n            </div>\n          </div>\n\n          {/* Proposal Overview */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>\n                  Proposal from{' '}\n                  <Link href={`/finder-profile/${proposal.finder.id}`} className=\"text-finder-red hover:text-red-800 hover:underline cursor-pointer\">\n                    {proposal.finder.user.firstName} {proposal.finder.user.lastName}\n                  </Link>\n                </span>\n                <Badge variant={proposal.status === 'accepted' ? 'default' : 'secondary'}>\n                  {proposal.status === 'pending' ? 'Active' : proposal.status}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Finder Profile Summary */}\n              <div className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"w-12 h-12 bg-finder-red/20 rounded-full flex items-center justify-center\">\n                  <User className=\"w-6 h-6 text-finder-red\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-gray-900\">\n                    <Link href={`/finder-profile/${proposal.finder.id}`} className=\"text-finder-red hover:text-red-800 hover:underline cursor-pointer\">\n                      {proposal.finder.user.firstName} {proposal.finder.user.lastName}\n                    </Link>\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">\n                    {proposal.finder.completedJobs || 0} jobs completed ‚Ä¢ {proposal.finder.rating || 5.0}‚òÖ rating\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-green-600\">‚Ç¶{parseInt(proposal.price).toLocaleString()}</div>\n                  <div className=\"text-sm text-gray-600 flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-1\" />\n                    {proposal.timeline}\n                  </div>\n                </div>\n              </div>\n\n              {/* Proposal Content */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-3\">Approach & Methodology</h4>\n                <p className=\"text-gray-700 leading-relaxed\">{proposal.approach}</p>\n              </div>\n\n              {/* Additional Notes */}\n              {proposal.notes && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Additional Notes</h4>\n                  <p className=\"text-gray-700 leading-relaxed\">{proposal.notes}</p>\n                </div>\n              )}\n\n              {/* Request Context */}\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">Request Context</h4>\n                <div className=\"bg-white p-4 rounded-lg border\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h5 className=\"font-medium\">{proposal.request.title}</h5>\n                    <Badge variant=\"outline\">{proposal.request.category}</Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mb-2\">{proposal.request.description}</p>\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    Budget: ${proposal.request.budgetMin} - ${proposal.request.budgetMax}\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4 pt-4 border-t\">\n                <div className=\"flex-1\">\n                  <StartConversationButton\n                    proposalId={proposal.id}\n                    finderName={`${proposal.finder.user.firstName} ${proposal.finder.user.lastName}`}\n                  />\n                </div>\n                {proposal.status === 'pending' && (\n                  <Button\n                    onClick={() => handleAcceptProposal(proposal.id)}\n                    className=\"bg-finder-red hover:bg-finder-red-dark text-white flex-1\"\n                    disabled={acceptProposal.isPending}\n                  >\n                    {acceptProposal.isPending ? \"Accepting...\" : \"Accept Proposal\"}\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Payment Modal - Removed for Flutterwave streamlining */}\n    </div>\n  );\n}","size_bytes":11613},"client/src/pages/client/request-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Clock, \n  DollarSign, \n  MapPin, \n  User, \n  Star, \n  MessageCircle,\n  Calendar,\n  Tag,\n  FileText,\n  Eye,\n  Users,\n  CheckCircle2,\n  TrendingUp,\n  AlertCircle,\n  Briefcase,\n  Share2,\n  Filter,\n  Loader2,\n  Package,\n  Award\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport ClientHeader from \"@/components/client-header\";\n\ninterface FindDetails {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  budgetMin: string;\n  budgetMax: string;\n  timeframe?: string;\n  status: string;\n  attachments?: string[];\n  createdAt: string;\n  updatedAt?: string;\n  clientId: string;\n  client?: {\n    firstName: string;\n    lastName: string;\n  };\n  _count?: {\n    proposals: number;\n  };\n}\n\ninterface Proposal {\n  id: string;\n  findId: string;\n  finderId: string;\n  amount: string;\n  price: string; // Added price field\n  deliveryTime: string;\n  status: string;\n  createdAt: string;\n  finder?: {\n    id: string;\n    userId: string;\n    user: {\n      firstName: string;\n      lastName: string;\n    };\n    completedJobs: number;\n    rating: number;\n  };\n}\n\nexport default function RequestDetails() {\n  const { id: findId } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: find, isLoading: findLoading } = useQuery<FindDetails>({\n    queryKey: ['/api/finds', findId],\n    enabled: !!findId && !!user\n  });\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<Proposal[]>({\n    queryKey: ['/api/finds', findId, 'proposals'],\n    enabled: !!findId && !!user && !!find\n  });\n\n  const acceptProposal = useMutation({\n    mutationFn: async (proposalId: string) => {\n      return apiRequest(`/api/proposals/${proposalId}/accept`, {\n        method: 'POST'\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finds', findId, 'proposals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finds', findId] });\n      \n      if (data.payment && data.payment.required) {\n        toast({\n          title: \"Proposal Accepted!\",\n          description: \"Please complete payment to fund the escrow and start work.\",\n        });\n        // You can add payment modal logic here if needed\n      } else {\n        toast({\n          title: \"Proposal Accepted!\",\n          description: \"The proposal has been accepted and a contract has been created.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error('Accept proposal error:', error);\n      const errorMessage = error.message || \"Please try again later.\";\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to Accept Proposal\",\n        description: errorMessage,\n      });\n    }\n  });\n\n  // Redirect if not authenticated or not client\n  if (!user || user.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Access Denied</h1>\n          <p className=\"text-slate-600 mb-6\">This find is only accessible by clients.</p>\n          <Button onClick={() => navigate(\"/login\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (findLoading || proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n        <ClientHeader currentPage=\"finds\" />\n\n        <main className=\"max-w-6xl mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-6 sm:p-8\">\n              <div className=\"h-8 bg-slate-200 rounded-lg w-1/2 mb-4\"></div>\n              <div className=\"h-32 bg-slate-200 rounded-lg mb-6\"></div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n                <div className=\"h-20 bg-slate-200 rounded-lg\"></div>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 h-96 bg-white/70 backdrop-blur-sm rounded-2xl\"></div>\n              <div className=\"h-96 bg-white/70 backdrop-blur-sm rounded-2xl\"></div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!find) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"w-10 h-10 text-slate-400\" />\n          </div>\n          <h3 className=\"text-2xl font-semibold text-slate-900 mb-2\">Find Not Found</h3>\n          <p className=\"text-slate-600 mb-6\">The find you're looking for doesn't exist or has been removed.</p>\n          <Button \n            onClick={() => navigate(\"/client/dashboard\")}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate status metrics\n  const proposalCount = find._count?.proposals || proposals.length || 0;\n  const statusColor = find.status === 'active' \n    ? 'bg-green-100 text-green-800 border-green-200'\n    : find.status === 'completed'\n    ? 'bg-blue-100 text-blue-800 border-blue-200'\n    : 'bg-amber-100 text-amber-800 border-amber-200';\n\n  const statusIcon = find.status === 'active' \n    ? 'üöÄ'\n    : find.status === 'completed'\n    ? '‚úÖ'\n    : '‚è≥';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"finds\" />\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        {/* Find Header */}\n        <div className=\"mb-8\">\n          <div className=\"text-center sm:text-left mb-6\">\n            <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-slate-900 mb-2\">\n              {find.title}\n            </h1>\n            <p className=\"text-sm sm:text-lg text-slate-600 mb-4\">\n              Posted on {format(new Date(find.createdAt), 'MMM d, yyyy')} ‚Ä¢ {proposalCount} proposals received\n            </p>\n          </div>\n\n          {/* Quick Stats */}\n          <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl mb-6\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <DollarSign className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-slate-600 mb-1\">Budget Range</p>\n                  <p className=\"text-sm sm:text-lg font-bold text-green-600\">\n                    ‚Ç¶{parseInt(find.budgetMin || \"0\").toLocaleString()} - ‚Ç¶{parseInt(find.budgetMax || \"0\").toLocaleString()}\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Users className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-slate-600 mb-1\">Proposals</p>\n                  <p className=\"text-sm sm:text-lg font-bold text-blue-600\">{proposalCount}</p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Clock className=\"w-6 h-6 text-amber-600\" />\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-slate-600 mb-1\">Timeline</p>\n                  <p className=\"text-sm sm:text-lg font-bold text-amber-600\">\n                    {find.timeframe || \"Flexible\"}\n                  </p>\n                </div>\n\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <Tag className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-slate-600 mb-1\">Category</p>\n                  <p className=\"text-sm sm:text-lg font-bold text-purple-600 capitalize\">\n                    {find.category}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8\">\n          {/* Left Column - Find Details */}\n          <div className=\"lg:col-span-2 space-y-6 sm:space-y-8\">\n            {/* Description */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-slate-900\">\n                  <FileText className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Project Description\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6 sm:p-8\">\n                <div className=\"bg-slate-50/80 rounded-lg p-6 mb-6\">\n                  <p className=\"text-slate-700 leading-relaxed whitespace-pre-wrap\">\n                    {find.description}\n                  </p>\n                </div>\n\n                {/* Attachments */}\n                {find.attachments && find.attachments.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">Attachments ({find.attachments.length})</h4>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                      {find.attachments.map((attachment, index) => (\n                        <div \n                          key={index}\n                          className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-slate-200 hover:shadow-md transition-shadow\"\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                              <Package className=\"w-5 h-5 text-blue-600\" />\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium text-slate-900\">\n                                attachment-{index + 1}\n                              </p>\n                              <p className=\"text-xs text-slate-500\">\n                                Click to download\n                              </p>\n                            </div>\n                          </div>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-slate-200 hover:bg-slate-50\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Proposals */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center text-slate-900\">\n                    <Users className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Proposals ({proposals.length})\n                  </div>\n                  {proposals.length > 0 && (\n                    <Button \n                      onClick={() => navigate(`/client/proposals?findId=${findId}`)}\n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"border-blue-200 text-blue-700 hover:bg-blue-50\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-1\" />\n                      View All\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6 sm:p-8\">\n                {proposals.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Users className=\"w-8 h-8 text-slate-400\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">No Proposals Yet</h3>\n                    <p className=\"text-slate-600 mb-6\">\n                      Your find is live and finders will start submitting proposals soon.\n                    </p>\n                    <Button \n                      onClick={() => navigate(\"/client/dashboard\")}\n                      variant=\"outline\" \n                      className=\"border-slate-200 hover:bg-slate-50\"\n                    >\n                      <TrendingUp className=\"w-4 h-4 mr-2\" />\n                      View Dashboard\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {proposals.slice(0, 3).map((proposal) => (\n                      <div \n                        key={proposal.id}\n                        className=\"p-4 bg-white rounded-lg border border-slate-200 hover:shadow-md transition-shadow\"\n                      >\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-start space-x-3\">\n                            <Avatar className=\"w-10 h-10 border-2 border-blue-200\">\n                              <AvatarFallback className=\"bg-blue-100 text-blue-700 font-semibold text-sm\">\n                                {((proposal.finder?.user.firstName || \"\") + (proposal.finder?.user.lastName || \"\"))\n                                  .split(' ')\n                                  .map(n => n[0])\n                                  .join('')\n                                  .toUpperCase()\n                                  .slice(0, 2)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <h4 className=\"font-medium text-slate-900\">\n                                {proposal.finder?.user.firstName} {proposal.finder?.user.lastName}\n                              </h4>\n                              <div className=\"flex items-center space-x-2 text-sm text-slate-500\">\n                                <div className=\"flex items-center\">\n                                  <Star className=\"w-3 h-3 text-amber-500 fill-current mr-1\" />\n                                  <span>{proposal.finder?.rating || 4.8}</span>\n                                </div>\n                                <span>‚Ä¢</span>\n                                <span>{proposal.finder?.completedJobs || 0} completed</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <Badge \n                            variant=\"outline\"\n                            className={proposal.status === 'pending' \n                              ? 'border-amber-200 text-amber-700'\n                              : proposal.status === 'accepted'\n                              ? 'border-green-200 text-green-700'\n                              : 'border-slate-200 text-slate-700'\n                            }\n                          >\n                            {proposal.status}\n                          </Badge>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                          <div>\n                            <p className=\"text-xs text-slate-500 mb-1\">Proposal Amount</p>\n                            <p className=\"font-semibold text-green-600\">\n                              ‚Ç¶{parseFloat(proposal.price || \"0\").toLocaleString()}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-slate-500 mb-1\">Delivery Time</p>\n                            <p className=\"font-semibold text-blue-600\">\n                              {proposal.timeline || proposal.deliveryTime || \"Not specified\"}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                          <Button \n                            onClick={() => navigate(`/client/proposals/${proposal.id}`)}\n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"flex-1 border-blue-200 text-blue-700 hover:bg-blue-50\"\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View Details\n                          </Button>\n\n                          {proposal.status === 'pending' && (\n                            <Button \n                              onClick={() => acceptProposal.mutate(proposal.id)}\n                              disabled={acceptProposal.isPending}\n                              size=\"sm\"\n                              className=\"flex-1 bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                            >\n                              {acceptProposal.isPending ? (\n                                <>\n                                  <Loader2 className=\"animate-spin w-4 h-4 mr-1\" />\n                                  Accepting...\n                                </>\n                              ) : (\n                                <>\n                                  <CheckCircle2 className=\"w-4 h-4 mr-1\" />\n                                  Accept\n                                </>\n                              )}\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n\n                    {proposals.length > 3 && (\n                      <div className=\"text-center pt-4\">\n                        <Button \n                          onClick={() => navigate(`/client/proposals?findId=${findId}`)}\n                          variant=\"outline\" \n                          className=\"border-slate-200 hover:bg-slate-50\"\n                        >\n                          View {proposals.length - 3} More Proposals\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Actions & Info */}\n          <div className=\"space-y-6 sm:space-y-8\">\n            {/* Quick Actions */}\n            <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <h3 className=\"font-semibold text-slate-900 mb-4\">Quick Actions</h3>\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={() => navigate(\"/client/proposals\")}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                  >\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    View All Proposals\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full border-slate-200 hover:bg-slate-50\"\n                  >\n                    <Share2 className=\"w-4 h-4 mr-2\" />\n                    Share Find\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Find Stats */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <h3 className=\"font-semibold text-slate-900 mb-4 flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Find Performance\n                </h3>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-slate-600\">Proposals</span>\n                    <span className=\"font-semibold text-slate-900\">{proposals.length}</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-slate-600\">Response Rate</span>\n                    <span className=\"font-semibold text-green-600\">\n                      {proposals.length > 0 ? Math.round((proposals.length / 127) * 100) : 0}%\n                    </span>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                      {proposals.length > 0 ? Math.round(proposals.reduce((sum, p) => sum + parseInt(p.price || \"0\"), 0) / proposals.length) : 0}\n                    </div>\n                    <div className=\"text-xs text-slate-600\">Average Proposal Amount (‚Ç¶)</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Help & Tips */}\n            <Card className=\"bg-gradient-to-br from-amber-50 to-orange-50 border-amber-200/60 shadow-xl\">\n              <CardContent className=\"p-6 sm:p-8 text-center\">\n                <div className=\"w-12 h-12 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Award className=\"w-6 h-6 text-amber-600\" />\n                </div>\n                <h3 className=\"font-semibold text-slate-900 mb-2\">Pro Tip</h3>\n                <p className=\"text-sm text-slate-600 mb-4\">\n                  Respond to proposals quickly to keep finders engaged and improve your response rate.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"border-amber-200 text-amber-700 hover:bg-amber-50\"\n                  onClick={() => navigate(\"/support/help-center\")}\n                >\n                  Learn More\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":24174},"client/src/pages/client/tokens.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ClientHeader from \"@/components/client-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Wallet,\n  Plus,\n  Minus,\n  Clock,\n  TrendingUp,\n  Banknote,\n  CreditCard,\n  Zap,\n  Award,\n  Star\n} from \"lucide-react\";\nimport type { Transaction, TokenPackage } from \"@shared/schema\";\nimport FlutterwavePaymentModal from \"@/components/FlutterwavePaymentModal\";\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n};\n\nexport default function ClientTokens() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [purchasingPackage, setPurchasingPackage] = useState<string | null>(null);\n  const [flutterwaveModal, setFlutterwaveModal] = useState<{\n    isOpen: boolean;\n    packageId: string;\n    packageName: string;\n    packagePrice: number;\n    tokenCount: number;\n  }>({\n    isOpen: false,\n    packageId: '',\n    packageName: '',\n    packagePrice: 0,\n    tokenCount: 0\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading, refetch: refetchTransactions } = useQuery<Transaction[]>({\n    queryKey: ['/api/client/transactions'],\n    enabled: !!user\n  });\n\n  const { data: balanceData, refetch: refetchBalance } = useQuery({\n    queryKey: ['/api/client/balance'],\n    enabled: !!user\n  });\n\n  const { data: tokenPackages = [], isLoading: packagesLoading } = useQuery<TokenPackage[]>({\n    queryKey: ['/api/token-packages'],\n    enabled: !!user\n  });\n\n  const currentBalance = (balanceData as any)?.balance || 0;\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'findertoken_purchase': return <Plus className=\"w-4 h-4 text-green-600\" />;\n      case 'find_posting': return <Minus className=\"w-4 h-4 text-finder-red\" />;\n      case 'refund': return <Plus className=\"w-4 h-4 text-blue-600\" />;\n      default: return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'findertoken_purchase': return 'text-green-600';\n      case 'find_posting': return 'text-finder-red';\n      case 'refund': return 'text-blue-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getTransactionSign = (type: string) => {\n    return type === 'findertoken_purchase' || type === 'refund' ? '+' : '-';\n  };\n\n  const handlePurchasePackage = async (packageId: string) => {\n    const packageToPurchase = tokenPackages.find(pkg => pkg.id === packageId);\n    if (!packageToPurchase) {\n      toast({\n        title: \"Error\",\n        description: \"Package not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Open Flutterwave payment modal\n    setFlutterwaveModal({\n      isOpen: true,\n      packageId: packageToPurchase.id,\n      packageName: packageToPurchase.name,\n      packagePrice: parseFloat(packageToPurchase.price),\n      tokenCount: packageToPurchase.tokenCount\n    });\n  };\n\n  const handlePaymentSuccess = () => {\n    toast({\n      title: \"Payment Successful!\",\n      description: \"Tokens have been added to your account\",\n    });\n    refetchBalance();\n    refetchTransactions();\n  };\n\n  if (transactionsLoading || packagesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n        <ClientHeader currentPage=\"tokens\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading token information...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"tokens\" />\n\n      <div className=\"container mx-auto p-6 max-w-6xl\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Wallet className=\"h-8 w-8 text-finder-red\" />\n          <h1 className=\"text-3xl font-bold text-gray-900\">Findertoken Balance</h1>\n        </div>\n\n        {/* Balance Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-finder-red to-red-600 text-white\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg font-medium flex items-center gap-2\">\n                <Wallet className=\"w-5 h-5\" />\n                Current Balance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold\">{currentBalance} Tokens</div>\n              <p className=\"text-red-100 text-sm\">Available for posting finds</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg font-medium flex items-center gap-2 text-gray-700\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Total Purchased\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {transactions\n                  .filter(t => t.type === 'findertoken_purchase')\n                  .reduce((sum, t) => sum + t.amount, 0)} Tokens\n              </div>\n              <p className=\"text-gray-600 text-sm\">Lifetime purchases</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-lg font-medium flex items-center gap-2 text-gray-700\">\n                <Banknote className=\"w-5 h-5\" />\n                Total Spent\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {transactions\n                  .filter(t => t.type === 'find_posting')\n                  .reduce((sum, t) => sum + Math.abs(t.amount), 0)} Tokens\n              </div>\n              <p className=\"text-gray-600 text-sm\">Used for posting finds</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Token Packages */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                Purchase Findertokens\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {tokenPackages.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-8\">No token packages available</p>\n              ) : (\n                <div className=\"grid gap-3\">\n                  {tokenPackages\n                    .filter(pkg => pkg.isActive)\n                    .map((tokenPackage) => (\n                      <div\n                        key={tokenPackage.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors\"\n                        data-testid={`token-package-${tokenPackage.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h3 className=\"font-semibold\">{tokenPackage.name}</h3>\n                            {tokenPackage.name.toLowerCase().includes('popular') && (\n                              <Badge variant=\"default\" className=\"bg-finder-red\">\n                                <Star className=\"w-3 h-3 mr-1\" />\n                                Popular\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2\">{tokenPackage.description}</p>\n                          <div className=\"flex items-center gap-4 text-sm\">\n                            <span className=\"flex items-center gap-1\">\n                              <Zap className=\"w-4 h-4 text-yellow-500\" />\n                              {tokenPackage.tokenCount} Tokens\n                            </span>\n                            <span className=\"font-medium text-finder-red\">\n                              {formatCurrency(tokenPackage.price)}\n                            </span>\n                          </div>\n                        </div>\n                        <div>\n                          <Button\n                            onClick={() => handlePurchasePackage(tokenPackage.id)}\n                            className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                            size=\"lg\"\n                            data-testid={`purchase-button-${tokenPackage.id}`}\n                          >\n                            <CreditCard className=\"w-4 h-4 mr-2\" />\n                            Purchase with Flutterwave\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Transaction History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Transaction History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {transactions.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-8\">No transactions yet</p>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {transactions.slice(0, 10).map((transaction) => (\n                    <div\n                      key={transaction.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                      data-testid={`transaction-${transaction.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        {getTransactionIcon(transaction.type)}\n                        <div>\n                          <p className=\"font-medium text-sm\">\n                            {transaction.type === 'findertoken_purchase' && 'Token Purchase'}\n                            {transaction.type === 'find_posting' && 'Find Posted'}\n                            {transaction.type === 'refund' && 'Refund'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {transaction.createdAt ? new Date(transaction.createdAt).toLocaleDateString() : 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`font-medium ${getTransactionColor(transaction.type)}`}>\n                          {getTransactionSign(transaction.type)}{transaction.amount} tokens\n                        </p>\n                        {(transaction as any).metadata?.price && (\n                          <p className=\"text-xs text-gray-500\">\n                            {formatCurrency((transaction as any).metadata.price)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <FlutterwavePaymentModal\n        isOpen={flutterwaveModal.isOpen}\n        onClose={() => setFlutterwaveModal(prev => ({ ...prev, isOpen: false }))}\n        packageId={flutterwaveModal.packageId}\n        packageName={flutterwaveModal.packageName}\n        packagePrice={flutterwaveModal.packagePrice}\n        tokenCount={flutterwaveModal.tokenCount}\n        onPaymentSuccess={handlePaymentSuccess}\n      />\n    </div>\n  );\n}","size_bytes":12499},"client/src/pages/client/view-proposals.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ClientHeader from \"@/components/client-header\";\nimport { \n  ArrowLeft, \n  User, \n  MessageCircle, \n  Clock, \n  DollarSign, \n  Star,\n  CheckCircle2,\n  Mail,\n  Calendar,\n  Briefcase,\n  Filter,\n  Search,\n  Loader2\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Proposal } from \"@shared/schema\";\n\nexport default function ViewProposals() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<any[]>({\n    queryKey: ['/api/client/proposals'],\n    enabled: !!user && user.role === 'client'\n  });\n\n  const acceptProposal = useMutation({\n    mutationFn: async (proposalId: string) => {\n      return apiRequest(\"/api/proposals/\" + proposalId + \"/accept\", {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/client/proposals'] });\n      toast({\n        title: \"Proposal Accepted!\",\n        description: \"You can now start working with this finder.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to Accept Proposal\",\n        description: \"Please try again later.\",\n      });\n    }\n  });\n\n  const createConversation = useMutation({\n    mutationFn: async (proposalId: string) => {\n      console.log('Creating conversation for proposal:', proposalId);\n      \n      return apiRequest(\"/api/messages/conversations\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          proposalId: proposalId\n        }),\n      });\n    },\n    onSuccess: (data) => {\n      console.log('Navigation to conversation:', data.id);\n      navigate(`/messages/${data.id}`);\n    },\n    onError: (error: any) => {\n      console.error('Conversation creation error:', error);\n      console.log('Error message to show user:', error.message);\n      toast({\n        variant: \"destructive\",\n        title: \"Unable to Start Conversation\",\n        description: \"Please try again later.\",\n      });\n    }\n  });\n\n  const handleMessageFinder = (proposalId: string) => {\n    createConversation.mutate(proposalId);\n  };\n\n  // Redirect if not authenticated or not client\n  if (!user || user.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-10 h-10 text-red-600\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Access Denied</h1>\n          <p className=\"text-slate-600 mb-6\">This page is only available for clients.</p>\n          <Button onClick={() => navigate(\"/finder/dashboard\")} className=\"bg-blue-600 hover:bg-blue-700\">\n            Go to Finder Dashboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8\">\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Loader2 className=\"w-8 h-8 text-blue-600 animate-spin\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-slate-900 mb-2\">Loading Proposals</h2>\n          <p className=\"text-slate-600\">Please wait while we fetch your proposals...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <ClientHeader currentPage=\"proposals\" />\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8 text-center sm:text-left\">\n          <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-slate-900 mb-2\">\n            Received Proposals\n          </h1>\n          <p className=\"text-sm sm:text-lg text-slate-600 mb-4\">\n            Review proposals from talented finders and choose the best match for your project\n          </p>\n          \n          {/* Quick Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-center\">\n            <Button \n              onClick={() => navigate(\"/client/create-find\")}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n            >\n              <Search className=\"w-4 h-4 mr-2\" />\n              Post New Find\n            </Button>\n            <Button \n              onClick={() => navigate(\"/client/dashboard\")}\n              variant=\"outline\" \n              className=\"border-slate-200 hover:bg-slate-50\"\n            >\n              <Briefcase className=\"w-4 h-4 mr-2\" />\n              View My Finds\n            </Button>\n          </div>\n        </div>\n\n        {/* Proposals Section */}\n        {proposals.length === 0 ? (\n          /* Empty State */\n          <Card className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl\">\n            <CardContent className=\"p-8 sm:p-12 text-center\">\n              <div className=\"w-16 h-16 sm:w-20 sm:h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Mail className=\"w-8 h-8 sm:w-10 sm:h-10 text-slate-400\" />\n              </div>\n              <h3 className=\"text-xl sm:text-2xl font-semibold text-slate-900 mb-3\">No Proposals Yet</h3>\n              <p className=\"text-sm sm:text-base text-slate-600 mb-6 max-w-md mx-auto\">\n                Finders will submit their proposals for your finds here. Once you post a find, qualified finders will start sending proposals.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  onClick={() => navigate(\"/client/create-find\")}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Post Your First Find\n                </Button>\n                <Button \n                  onClick={() => navigate(\"/browse-requests\")}\n                  variant=\"outline\"\n                  className=\"border-slate-200 hover:bg-slate-50\"\n                >\n                  Browse Public Finds\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          /* Proposals Grid */\n          <div className=\"space-y-4 sm:space-y-6\">\n            {proposals.map((proposal: any) => (\n              <Card key={proposal.id} className=\"bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-xl hover:shadow-2xl transition-all duration-300 group\">\n                <CardContent className=\"p-6 sm:p-8\">\n                  {/* Mobile Layout */}\n                  <div className=\"block lg:hidden space-y-6\">\n                    {/* Finder Header */}\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"w-12 h-12 border-2 border-blue-200\">\n                          <AvatarFallback className=\"bg-blue-100 text-blue-700 font-semibold\">\n                            {(proposal.finderName || \"Unknown\").split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h3 className=\"text-lg font-semibold text-slate-900 mb-1\">\n                            {proposal.finderName || \"Unknown Finder\"}\n                          </h3>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge \n                              variant={proposal.status === 'pending' ? 'default' : 'secondary'}\n                              className={`text-xs ${proposal.status === 'pending' \n                                ? 'bg-green-100 text-green-800 border-green-300' \n                                : 'bg-slate-100 text-slate-700 border-slate-300'\n                              }`}\n                            >\n                              {proposal.status === 'pending' ? '‚ú® Available' : proposal.status}\n                            </Badge>\n                            <div className=\"flex items-center text-amber-500\">\n                              <Star className=\"w-3 h-3 fill-current\" />\n                              <span className=\"text-xs font-medium ml-1\">4.9</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Find Details */}\n                    {proposal.findTitle && (\n                      <div className=\"bg-slate-50/80 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-slate-900 mb-1\">Find:</h4>\n                        <p className=\"text-sm text-slate-700\">{proposal.findTitle}</p>\n                      </div>\n                    )}\n\n                    {/* Proposal Details */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-green-50/80 rounded-lg p-4 text-center\">\n                        <div className=\"text-lg font-bold text-green-700\">\n                          ‚Ç¶{proposal.price ? parseInt(proposal.price).toLocaleString() : 'TBD'}\n                        </div>\n                        <div className=\"text-xs text-green-600\">Proposed Price</div>\n                      </div>\n                      <div className=\"bg-blue-50/80 rounded-lg p-4 text-center\">\n                        <Clock className=\"w-5 h-5 text-blue-600 mx-auto mb-2\" />\n                        <div className=\"text-sm font-semibold text-blue-700\">\n                          {proposal.timeline || 'To be discussed'}\n                        </div>\n                        <div className=\"text-xs text-blue-600\">Timeline</div>\n                      </div>\n                    </div>\n\n                    {/* Proposal Message */}\n                    {proposal.coverLetter && (\n                      <div>\n                        <h4 className=\"font-medium text-slate-900 mb-2\">Proposal Message:</h4>\n                        <p className=\"text-sm text-slate-700 bg-slate-50/80 rounded-lg p-4 leading-relaxed\">\n                          {proposal.coverLetter.length > 150 \n                            ? `${proposal.coverLetter.slice(0, 150)}...` \n                            : proposal.coverLetter\n                          }\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Action Buttons - Mobile */}\n                    <div className=\"flex flex-col space-y-3 pt-4 border-t border-slate-200\">\n                      {proposal.status === 'pending' ? (\n                        <>\n                          <Button \n                            onClick={() => acceptProposal.mutate(proposal.id)}\n                            disabled={acceptProposal.isPending}\n                            className=\"w-full bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                          >\n                            {acceptProposal.isPending ? (\n                              <>\n                                <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                Hiring...\n                              </>\n                            ) : (\n                              <>\n                                <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                                Hire This Finder\n                              </>\n                            )}\n                          </Button>\n                          <Button \n                            onClick={() => handleMessageFinder(proposal.id)}\n                            disabled={createConversation.isPending}\n                            variant=\"outline\" \n                            className=\"w-full border-blue-200 text-blue-700 hover:bg-blue-50\"\n                          >\n                            {createConversation.isPending ? (\n                              <>\n                                <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                Starting Chat...\n                              </>\n                            ) : (\n                              <>\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Message Finder\n                              </>\n                            )}\n                          </Button>\n                        </>\n                      ) : (\n                        <>\n                          <Badge variant=\"secondary\" className=\"w-full justify-center py-3 bg-green-100 text-green-800 border-green-200\">\n                            ‚úÖ Hired & Active\n                          </Badge>\n                          <Button \n                            onClick={() => handleMessageFinder(proposal.id)}\n                            disabled={createConversation.isPending}\n                            variant=\"outline\" \n                            className=\"w-full border-blue-200 text-blue-700 hover:bg-blue-50\"\n                          >\n                            {createConversation.isPending ? (\n                              <>\n                                <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                Starting Chat...\n                              </>\n                            ) : (\n                              <>\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Continue Chat\n                              </>\n                            )}\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Desktop Layout */}\n                  <div className=\"hidden lg:block\">\n                    <div className=\"flex items-start justify-between\">\n                      {/* Left Section - Finder Info */}\n                      <div className=\"flex items-start space-x-6 flex-1\">\n                        <Avatar className=\"w-16 h-16 border-2 border-blue-200\">\n                          <AvatarFallback className=\"bg-blue-100 text-blue-700 font-semibold text-lg\">\n                            {(proposal.finderName || \"Unknown\").split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2)}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div>\n                              <h3 className=\"text-xl font-semibold text-slate-900 mb-1\">\n                                {proposal.finderName || \"Unknown Finder\"}\n                              </h3>\n                              <div className=\"flex items-center space-x-3\">\n                                <Badge \n                                  variant={proposal.status === 'pending' ? 'default' : 'secondary'}\n                                  className={`${proposal.status === 'pending' \n                                    ? 'bg-green-100 text-green-800 border-green-300' \n                                    : 'bg-slate-100 text-slate-700 border-slate-300'\n                                  }`}\n                                >\n                                  {proposal.status === 'pending' ? '‚ú® Available' : '‚úÖ Hired'}\n                                </Badge>\n                                <div className=\"flex items-center text-amber-500\">\n                                  <Star className=\"w-4 h-4 fill-current\" />\n                                  <span className=\"text-sm font-medium ml-1\">4.9 (127 reviews)</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            {/* Price Display */}\n                            <div className=\"text-right\">\n                              <div className=\"text-2xl font-bold text-green-700\">\n                                ‚Ç¶{proposal.price ? parseInt(proposal.price).toLocaleString() : 'TBD'}\n                              </div>\n                              <div className=\"text-sm text-slate-600\">Proposed Price</div>\n                            </div>\n                          </div>\n\n                          {/* Timeline & Find Info */}\n                          <div className=\"flex items-center space-x-6 mb-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"w-4 h-4 text-slate-500\" />\n                              <span className=\"text-sm text-slate-700\">\n                                {proposal.timeline || 'Timeline: To be discussed'}\n                              </span>\n                            </div>\n                            {proposal.findTitle && (\n                              <div className=\"flex items-center space-x-2\">\n                                <Briefcase className=\"w-4 h-4 text-slate-500\" />\n                                <span className=\"text-sm text-slate-700 font-medium\">\n                                  {proposal.findTitle}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Proposal Message */}\n                          {proposal.coverLetter && (\n                            <div className=\"bg-slate-50/80 rounded-lg p-4 mb-4\">\n                              <h4 className=\"font-medium text-slate-900 mb-2\">Proposal Message:</h4>\n                              <p className=\"text-sm text-slate-700 leading-relaxed\">\n                                {proposal.coverLetter.length > 300 \n                                  ? `${proposal.coverLetter.slice(0, 300)}...` \n                                  : proposal.coverLetter\n                                }\n                              </p>\n                            </div>\n                          )}\n\n                          {/* Action Buttons - Desktop */}\n                          <div className=\"flex items-center space-x-3\">\n                            {proposal.status === 'pending' ? (\n                              <>\n                                <Button \n                                  onClick={() => acceptProposal.mutate(proposal.id)}\n                                  disabled={acceptProposal.isPending}\n                                  className=\"bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-6\"\n                                >\n                                  {acceptProposal.isPending ? (\n                                    <>\n                                      <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                      Hiring...\n                                    </>\n                                  ) : (\n                                    <>\n                                      <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                                      Hire Finder\n                                    </>\n                                  )}\n                                </Button>\n                                <Button \n                                  onClick={() => handleMessageFinder(proposal.id)}\n                                  disabled={createConversation.isPending}\n                                  variant=\"outline\" \n                                  className=\"border-blue-200 text-blue-700 hover:bg-blue-50 px-6\"\n                                >\n                                  {createConversation.isPending ? (\n                                    <>\n                                      <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                      Starting...\n                                    </>\n                                  ) : (\n                                    <>\n                                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                      Message\n                                    </>\n                                  )}\n                                </Button>\n                              </>\n                            ) : (\n                              <Button \n                                onClick={() => handleMessageFinder(proposal.id)}\n                                disabled={createConversation.isPending}\n                                variant=\"outline\" \n                                className=\"border-blue-200 text-blue-700 hover:bg-blue-50 px-6\"\n                              >\n                                {createConversation.isPending ? (\n                                  <>\n                                    <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n                                    Starting Chat...\n                                  </>\n                                ) : (\n                                  <>\n                                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                    Continue Chat\n                                  </>\n                                )}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Bottom Actions */}\n        {proposals.length > 0 && (\n          <div className=\"mt-12 text-center\">\n            <div className=\"bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-6 sm:p-8\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">Need More Options?</h3>\n              <p className=\"text-slate-600 mb-4\">\n                Post additional finds or browse other clients' public requests\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  onClick={() => navigate(\"/client/create-find\")}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Post Another Find\n                </Button>\n                <Button \n                  onClick={() => navigate(\"/browse-requests\")}\n                  variant=\"outline\"\n                  className=\"border-slate-200 hover:bg-slate-50\"\n                >\n                  Browse Public Finds\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":23996},"client/src/pages/finder/browse-requests.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { Search, ArrowLeft } from \"lucide-react\";\nimport type { Find } from \"@shared/schema\";\n\nexport default function BrowseFinds() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [budgetFilter, setBudgetFilter] = useState(\"all\");\n\n  const { data: finds = [], isLoading } = useQuery<Find[]>({\n    queryKey: ['/api/finder/finds']\n  });\n\n  // Filter finds based on search and filters\n  const filteredFinds = finds.filter(find => {\n    const matchesSearch = find.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         find.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || find.category === categoryFilter;\n    const matchesBudget = budgetFilter === \"all\" || \n      (budgetFilter === \"under-100\" && parseInt(find.budgetMax || \"0\") < 100) ||\n      (budgetFilter === \"100-500\" && parseInt(find.budgetMax || \"0\") >= 100 && parseInt(find.budgetMax || \"0\") <= 500) ||\n      (budgetFilter === \"over-500\" && parseInt(find.budgetMax || \"0\") > 500);\n    \n    return matchesSearch && matchesCategory && matchesBudget;\n  });\n\n  const getTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"1 day ago\";\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 14) return \"1 week ago\";\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return `${Math.floor(diffDays / 30)} months ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading finds...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader currentPage=\"browse\" />\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto py-4 sm:py-8 px-4 sm:px-6\">\n        <div className=\"mb-6 sm:mb-8\">\n          <Link href=\"/finder/dashboard\" className=\"inline-flex items-center text-gray-600 hover:text-gray-900 mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Browse Requests</h1>\n          <p className=\"text-gray-600 text-sm sm:text-base\">Find opportunities that match your skills and interests.</p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-6 sm:mb-8\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"space-y-4 sm:space-y-0 sm:grid sm:grid-cols-2 lg:grid-cols-4 sm:gap-4\">\n              <div className=\"sm:col-span-2 lg:col-span-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search finds...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"product\">Product Search</SelectItem>\n                    <SelectItem value=\"service\">Service Provider</SelectItem>\n                    <SelectItem value=\"vendor\">Vendor/Supplier</SelectItem>\n                    <SelectItem value=\"location\">Location/Venue</SelectItem>\n                    <SelectItem value=\"information\">Information Research</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Select value={budgetFilter} onValueChange={setBudgetFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Budget Range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Any Budget</SelectItem>\n                    <SelectItem value=\"under-100\">Under ‚Ç¶100</SelectItem>\n                    <SelectItem value=\"100-500\">‚Ç¶100 - ‚Ç¶500</SelectItem>\n                    <SelectItem value=\"over-500\">Over ‚Ç¶500</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Summary */}\n        <div className=\"mb-4 flex justify-between items-center\">\n          <p className=\"text-gray-600\">\n            Showing {filteredFinds.length} find{filteredFinds.length !== 1 ? 's' : ''}\n            {searchQuery && ` matching \"${searchQuery}\"`}\n          </p>\n          <span className=\"text-sm font-medium text-finder-red\">Open Requests</span>\n        </div>\n\n        {/* Request Table */}\n        {filteredFinds.length === 0 ? (\n          <div className=\"text-center py-20\">\n            <div className=\"bg-gray-50 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6\">\n              <Search className=\"w-12 h-12 text-gray-300\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-3\">No finds found</h3>\n            <p className=\"text-gray-500 text-lg max-w-md mx-auto\">Try adjusting your search criteria or check back later for new opportunities.</p>\n          </div>\n        ) : (\n          <Card className=\"bg-white shadow-sm\">\n            <CardContent className=\"p-0\">\n              {/* Desktop Table View */}\n              <div className=\"hidden lg:block overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50 border-b\">\n                    <tr>\n                      <th className=\"text-left py-4 px-6 font-semibold text-gray-900\">Title</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-gray-900\">Budget</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-gray-900\">Posted</th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-gray-900\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredFinds.map((find: Find, index) => (\n                      <tr \n                        key={find.id} \n                        className={`border-b hover:bg-gray-50 transition-colors ${\n                          index % 2 === 0 ? 'bg-white' : 'bg-gray-50/30'\n                        }`}\n                      >\n                        <td className=\"py-4 px-6\">\n                          <div>\n                            <h3 className=\"font-medium text-gray-900 hover:text-finder-red transition-colors cursor-pointer\">\n                              {find.title}\n                            </h3>\n                            <p className=\"text-sm text-gray-500 mt-1 line-clamp-1\">\n                              {find.description}\n                            </p>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <span className=\"font-semibold text-green-600\">\n                            ‚Ç¶{parseInt(find.budgetMin || \"0\").toLocaleString()} - ‚Ç¶{parseInt(find.budgetMax || \"0\").toLocaleString()}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <span className=\"text-gray-600\">\n                            {getTimeAgo(find.createdAt || \"\")}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-6\">\n                          <Link href={`/finder/finds/${find.id}`}>\n                            <Button \n                              size=\"sm\" \n                              className=\"bg-finder-red hover:bg-finder-red-dark text-white\"\n                            >\n                              View Details\n                            </Button>\n                          </Link>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Mobile/Tablet Card View */}\n              <div className=\"lg:hidden divide-y divide-gray-200\">\n                {filteredFinds.map((find: Find) => (\n                  <div key={find.id} className=\"px-4 sm:px-6 py-4 hover:bg-gray-50 transition-colors\">\n                    <div className=\"space-y-3\">\n                      {/* Title and Action Row */}\n                      <div className=\"flex justify-between items-start gap-3\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-medium text-gray-900 text-sm sm:text-base truncate hover:text-finder-red transition-colors cursor-pointer\">\n                            {find.title}\n                          </h3>\n                          <p className=\"text-xs sm:text-sm text-gray-500 mt-1 line-clamp-2\">\n                            {find.description}\n                          </p>\n                        </div>\n                        <div className=\"flex-shrink-0\">\n                          <Link href={`/finder/finds/${find.id}`}>\n                            <Button \n                              size=\"sm\" \n                              className=\"bg-finder-red hover:bg-finder-red-dark text-white px-2 sm:px-3\"\n                            >\n                              <span className=\"hidden sm:inline\">View Details</span>\n                              <span className=\"sm:hidden text-xs\">View</span>\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n\n                      {/* Details Row */}\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-4 text-xs sm:text-sm\">\n                        {/* Budget */}\n                        <div>\n                          <span className=\"text-gray-500 font-medium\">Budget: </span>\n                          <span className=\"font-semibold text-green-600\">\n                            ‚Ç¶{parseInt(find.budgetMin || \"0\").toLocaleString()} - ‚Ç¶{parseInt(find.budgetMax || \"0\").toLocaleString()}\n                          </span>\n                        </div>\n\n                        {/* Posted Date */}\n                        <div className=\"text-gray-600\">\n                          <span className=\"text-gray-500 font-medium\">Posted: </span>\n                          {getTimeAgo(find.createdAt || \"\")}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11896},"client/src/pages/finder/contract-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  Calendar, \n  CheckCircle, \n  Clock, \n  Upload,\n  FileText,\n  User,\n  Briefcase,\n  AlertTriangle,\n  Calculator,\n  TrendingUp\n} from \"lucide-react\";\nimport { ContractDisputeModal } from \"@/components/ContractDisputeModal\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n};\n\ninterface ContractDetails {\n  id: string;\n  requestId: string;\n  proposalId: string;\n  amount: string;\n  escrowStatus: string;\n  isCompleted: boolean;\n  hasSubmission: boolean;\n  createdAt: string;\n  completedAt?: string;\n  request?: {\n    title: string;\n    description: string;\n  };\n  orderSubmission?: {\n    id: string;\n    submissionText?: string;\n    attachmentPaths: string[];\n    status: string;\n    submittedAt: string;\n  };\n}\n\nexport default function FinderContractDetails() {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n  const [match, params] = useRoute(\"/finder/contracts/:contractId\");\n  const contractId = params?.contractId;\n  \n  // Dispute modal state\n  const [isDisputeModalOpen, setIsDisputeModalOpen] = useState(false);\n\n  const { data: contract, isLoading } = useQuery<ContractDetails>({\n    queryKey: ['/api/finder/contracts', contractId],\n    enabled: !!user && !!contractId\n  });\n\n  // Get admin settings for fee calculations\n  const { data: adminSettings } = useQuery({\n    queryKey: ['/api/admin/settings'],\n    enabled: !!contract\n  });\n\n  // Calculate earnings with fee breakdown\n  const calculateEarnings = () => {\n    if (!contract || !adminSettings) return null;\n    \n    const contractAmount = parseFloat(contract.amount);\n    const feePercentage = parseFloat(adminSettings.finderEarningsChargePercentage || '5');\n    const feeAmount = contractAmount * (feePercentage / 100);\n    const netEarnings = contractAmount - feeAmount;\n    \n    return {\n      grossAmount: contractAmount,\n      feeAmount,\n      netEarnings,\n      feePercentage\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading contract details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"max-w-4xl mx-auto py-8 px-6\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">{t('contract.contract_not_found')}</h1>\n            <p className=\"text-gray-600 mb-6\">{t('contract.contract_not_found_desc')}</p>\n            <Link href=\"/finder/contracts\">\n              <Button>{t('navigation.contracts')}</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (contract: ContractDetails) => {\n    if (contract.isCompleted) {\n      return <Badge className=\"bg-green-100 text-green-800\">{t('contract.completed')}</Badge>;\n    }\n    if (contract.hasSubmission) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">{t('contract.under_review')}</Badge>;\n    }\n    return <Badge className=\"bg-blue-100 text-blue-800\">{t('contract.in_progress')}</Badge>;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n      \n      <div className=\"max-w-4xl mx-auto py-8 px-6\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <Link href=\"/finder/contracts\">\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              {t('common.back')} {t('navigation.contracts')}\n            </Button>\n          </Link>\n          \n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {contract.request?.title || t('contract.contract_details')}\n              </h1>\n              <p className=\"text-gray-600\">\n                {t('contract.contract_id')}: {contract.id}\n              </p>\n            </div>\n            {getStatusBadge(contract)}\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"space-y-6\">\n          {/* Contract Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Briefcase className=\"w-5 h-5 mr-2\" />\n                {t('contract.contract_overview')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">{t('contract.contract_value')}</p>\n                    <p className=\"text-xl font-semibold text-green-600\">{formatCurrency(contract.amount)}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">{t('contract.started')}</p>\n                    <p className=\"font-medium\">{formatDate(contract.createdAt)}</p>\n                  </div>\n                </div>\n\n                {contract.completedAt && (\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <p className=\"text-sm text-gray-600\">{t('contract.completed')}</p>\n                      <p className=\"font-medium\">{formatDate(contract.completedAt)}</p>\n                      {contract.orderSubmission?.autoReleaseDate && (\n                        <p className=\"text-xs text-gray-500\">\n                          Funds release: {formatDate(contract.orderSubmission.autoReleaseDate)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <Separator />\n              \n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Project Description</h4>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  {contract.request?.description || 'No description available.'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Submission Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Work Submission\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {contract.isCompleted ? (\n                <div className=\"flex items-center space-x-3 text-green-600\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                  <div>\n                    <p className=\"font-medium\">Work Completed</p>\n                    <p className=\"text-sm text-gray-600\">This contract has been successfully completed.</p>\n                  </div>\n                </div>\n              ) : contract.hasSubmission ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3 text-yellow-600\">\n                    <Clock className=\"w-6 h-6\" />\n                    <div>\n                      <p className=\"font-medium\">Under Review</p>\n                      <p className=\"text-sm text-gray-600\">\n                        Your work has been submitted and is being reviewed by the client.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4\">\n                    <Link href={`/orders/submit/${contract.id}`}>\n                      <Button variant=\"outline\">\n                        <FileText className=\"w-4 h-4 mr-2\" />\n                        View Submission Details\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3 text-blue-600\">\n                    <Upload className=\"w-6 h-6\" />\n                    <div>\n                      <p className=\"font-medium\">Ready for Submission</p>\n                      <p className=\"text-sm text-gray-600\">\n                        Complete your work and submit it for client review.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"pt-4\">\n                    <Link href={`/orders/submit/${contract.id}`}>\n                      <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Submit Work\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Earnings Breakdown */}\n          {calculateEarnings() && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calculator className=\"w-5 h-5 mr-2\" />\n                  Earnings Breakdown\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-blue-600 font-medium\">Contract Value</span>\n                      <TrendingUp className=\"w-4 h-4 text-blue-600\" />\n                    </div>\n                    <p className=\"text-xl font-bold text-blue-700\">\n                      {formatCurrency(calculateEarnings()!.grossAmount)}\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-red-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-red-600 font-medium\">Platform Fee ({calculateEarnings()!.feePercentage}%)</span>\n                    </div>\n                    <p className=\"text-xl font-bold text-red-700\">\n                      -{formatCurrency(calculateEarnings()!.feeAmount)}\n                    </p>\n                  </div>\n                  \n                  <div className=\"bg-green-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-green-600 font-medium\">Your Earnings</span>\n                    </div>\n                    <p className=\"text-xl font-bold text-green-700\">\n                      {formatCurrency(calculateEarnings()!.netEarnings)}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 p-3 rounded-lg\">\n                  <p className=\"text-xs text-gray-600\">\n                    * Platform fee is automatically deducted from contract value. \n                    {contract.escrowStatus === 'released' ? \n                      'Earnings have been added to your available balance.' : \n                      contract.escrowStatus === 'completed' ?\n                      'Earnings will be added to your balance once payment is released.' :\n                      'Earnings will be calculated once work is completed and approved.'}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Escrow Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Escrow Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 rounded-full ${\n                  contract.escrowStatus === 'released' ? 'bg-green-500' :\n                  contract.escrowStatus === 'completed' ? 'bg-blue-500' :\n                  contract.escrowStatus === 'in_progress' ? 'bg-yellow-500' :\n                  'bg-gray-500'\n                }`}></div>\n                <div>\n                  <p className=\"font-medium capitalize\">\n                    {contract.escrowStatus?.replace('_', ' ') || 'Unknown'}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    {contract.escrowStatus === 'held' && 'Payment is securely held in escrow'}\n                    {contract.escrowStatus === 'in_progress' && 'Work is in progress, payment held in escrow'}\n                    {contract.escrowStatus === 'completed' && 'Work completed, payment ready for release'}\n                    {contract.escrowStatus === 'released' && 'Payment has been released to you'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Additional Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Additional Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button \n                  onClick={() => setIsDisputeModalOpen(true)}\n                  variant=\"outline\" \n                  className=\"w-full justify-start border-red-200 text-red-700 hover:bg-red-50\"\n                  data-testid=\"button-dispute-contract\"\n                >\n                  <AlertTriangle className=\"w-4 h-4 mr-3\" />\n                  {t('dispute.report_issue')}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Dispute Modal */}\n      <ContractDisputeModal\n        isOpen={isDisputeModalOpen}\n        onClose={() => setIsDisputeModalOpen(false)}\n        contractId={contractId || ''}\n        contractTitle={contract?.request?.title}\n      />\n    </div>\n  );\n}","size_bytes":15423},"client/src/pages/finder/contracts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { SupportWidget } from \"@/components/support-widget\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Clock, CheckCircle, Upload, ExternalLink, MapPin, FileText, AlertCircle, TrendingUp, Calculator } from \"lucide-react\";\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n};\n\nexport default function FinderContracts() {\n  const { user } = useAuth();\n\n  const { data: contracts = [], isLoading } = useQuery({\n    queryKey: ['/api/finder/contracts'],\n    enabled: !!user\n  });\n\n  // Get admin settings for fee calculations\n  const { data: adminSettings } = useQuery({\n    queryKey: ['/api/admin/settings'],\n    enabled: contracts.length > 0\n  });\n\n  console.log('Finder Contracts Data:', contracts); // Debug log\n\n  // Calculate net earnings for a contract\n  const calculateNetEarnings = (contractAmount: string) => {\n    if (!adminSettings) return parseFloat(contractAmount);\n    \n    const amount = parseFloat(contractAmount);\n    const feePercentage = parseFloat(adminSettings.finderEarningsChargePercentage || '5');\n    const feeAmount = amount * (feePercentage / 100);\n    return amount - feeAmount;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader currentPage=\"contracts\" />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading your contracts...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (contract: any) => {\n    if (contract.isCompleted) {\n      return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Completed</Badge>;\n    }\n    if (contract.hasSubmission) {\n      return <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">Under Review</Badge>;\n    }\n    return <Badge variant=\"default\" className=\"bg-orange-100 text-orange-800\">In Progress</Badge>;\n  };\n\n  const getEscrowStatusBadge = (status: string) => {\n    switch (status) {\n      case 'held':\n        return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-800\">Escrowed</Badge>;\n      case 'released':\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Released</Badge>;\n      case 'disputed':\n        return <Badge variant=\"destructive\">Disputed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader currentPage=\"contracts\" />\n\n      <div className=\"max-w-6xl mx-auto py-8 px-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Active Contracts</h1>\n          <p className=\"text-gray-600\">View and manage your ongoing work contracts and submissions.</p>\n        </div>\n\n        {contracts.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No active contracts</h3>\n              <p className=\"text-gray-600 mb-6\">You don't have any active contracts at the moment. Start by browsing available opportunities and submitting proposals.</p>\n              <Link href=\"/finder/browse-finds\">\n                <Button>Browse Available Finds</Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {contracts.map((contract: any) => (\n              <Link key={contract.id} href={`/finder/contracts/${contract.id}`}>\n                <Card className=\"border hover:shadow-md transition-shadow cursor-pointer\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl text-gray-900 mb-2 flex items-center\">\n                          {contract.request?.title || 'Contract Details'}\n                          {!contract.hasSubmission && !contract.isCompleted && (\n                            <AlertCircle className=\"w-5 h-5 text-orange-500 ml-2\" title=\"Awaiting submission\" />\n                          )}\n                        </CardTitle>\n                        <p className=\"text-gray-600 line-clamp-2\">\n                          {contract.request?.description || 'No description available'}\n                        </p>\n                      </div>\n                      <div className=\"flex flex-col items-end space-y-2\">\n                        {getStatusBadge(contract)}\n                        {getEscrowStatusBadge(contract.escrowStatus)}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-6\">\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex items-center text-blue-600 text-sm\">\n                            <span className=\"font-medium\">{formatCurrency(contract.amount)}</span>\n                            <span className=\"ml-1 text-xs text-gray-500\">(gross)</span>\n                          </div>\n                          {(contract.isCompleted || contract.escrowStatus === 'completed') && adminSettings && (\n                            <div className=\"flex items-center text-green-600 text-sm font-semibold\">\n                              <Calculator className=\"w-3 h-3 mr-1\" />\n                              <span>{formatCurrency(calculateNetEarnings(contract.amount))}</span>\n                              <span className=\"ml-1 text-xs text-gray-500\">(earned)</span>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex items-center text-gray-600 text-sm\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          Started {new Date(contract.createdAt).toLocaleDateString()}\n                        </div>\n                        {contract.isCompleted && contract.completedAt && (\n                          <div className=\"flex items-center text-green-600 text-sm\">\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Completed {new Date(contract.completedAt).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        {contract.hasSubmission ? (\n                          <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200\">\n                            <Upload className=\"w-3 h-3 mr-1\" />\n                            Submitted\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-orange-600 border-orange-200\">\n                            <Upload className=\"w-3 h-3 mr-1\" />\n                            Submit Work\n                          </Badge>\n                        )}\n                        <ExternalLink className=\"w-4 h-4 text-gray-400\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        )}\n      </div>\n      <SupportWidget context=\"contracts\" />\n    </div>\n  );\n}","size_bytes":8220},"client/src/pages/finder/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { SupportWidget } from \"@/components/support-widget\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Search, Banknote, Clock, Trophy, Plus, Coins } from \"lucide-react\";\nimport type { Find, Proposal, User } from \"@shared/schema\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function FinderDashboard() {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n\n  const { data: availableFinds = [], isLoading: findsLoading } = useQuery<Find[]>({\n    queryKey: ['/api/finder/finds'],\n    enabled: !!user\n  });\n\n  const { data: myProposals = [], isLoading: proposalsLoading } = useQuery<any[]>({\n    queryKey: ['/api/finder/proposals'],\n    enabled: !!user\n  });\n\n  const { data: finder } = useQuery({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user\n  });\n\n  if (findsLoading || proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader currentPage=\"dashboard\" />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">{t('common.loading_dashboard', 'Loading dashboard...')}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader currentPage=\"dashboard\" />\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto py-4 sm:py-8 px-4 sm:px-6\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">{t('navigation.welcome_back', 'Welcome back')}, {user?.firstName || 'Finder'}!</h1>\n          <p className=\"text-gray-600 text-sm sm:text-base\">{t('dashboard.overview_text', 'Find opportunities and grow your finder business.')}</p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"border-green-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Banknote className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">{t('common.total_earnings', 'Total Earnings')}</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-green-600\">‚Ç¶{((finder as any)?.totalEarnings || 0).toLocaleString()}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{t('common.all_time', 'All time')}</p>\n            </CardContent>\n          </Card>\n\n          <Link href=\"/finder/browse-finds\">\n            <Card className=\"border-blue-200 hover:border-blue-400 transition-colors cursor-pointer\">\n              <CardContent className=\"p-4 sm:p-6 text-center\">\n                <div className=\"bg-blue-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                  <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">{t('dashboard.available_finds', 'Available Finds')}</h3>\n                <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">{availableFinds.length}</p>\n                <p className=\"text-gray-600 text-xs sm:text-sm\">{t('dashboard.open_now', 'Open now')}</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Card className=\"border-purple-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-purple-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Trophy className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">{t('dashboard.completed_jobs', 'Completed Jobs')}</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-purple-600\">{(finder as any)?.completedJobs || 0}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{t('common.all_time', 'All time')}</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-orange-200\">\n            <CardContent className=\"p-4 sm:p-6 text-center\">\n              <div className=\"bg-orange-600 rounded-full w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                <Coins className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-1 sm:mb-2 text-sm sm:text-base\">{t('dashboard.findertoken_balance', 'Findertoken Balance')}</h3>\n              <p className=\"text-xl sm:text-2xl font-bold text-orange-600\">{(finder as any)?.findertokenBalance || 0}</p>\n              <p className=\"text-gray-600 text-xs sm:text-sm\">{t('common.available', 'Available')}</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Available Requests */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"text-xl text-gray-900\">{t('dashboard.new_finds', 'New Finds')}</CardTitle>\n              <Link href=\"/finder/browse-finds\">\n                <Button variant=\"outline\" size=\"sm\">{t('common.view_all', 'View All')}</Button>\n              </Link>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {availableFinds.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>{t('dashboard.no_finds_available', 'No new finds available.')}</p>\n                  <p className=\"text-sm\">{t('dashboard.check_back_soon', 'Check back soon for new opportunities!')}</p>\n                </div>\n              ) : (\n                availableFinds.slice(0, 3).map((find: Find) => (\n                  <div key={find.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">{find.title}</h4>\n                      <span className=\"bg-green-100 text-green-700 px-2 py-1 text-xs rounded-full font-medium\">\n                        {t('common.new', 'New')}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 text-sm mb-3\">{find.description.substring(0, 100)}...</p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600 text-sm\">{t('common.budget', 'Budget')}: ‚Ç¶{parseInt(find.budgetMin || '0').toLocaleString()} - ‚Ç¶{parseInt(find.budgetMax || '0').toLocaleString()}</span>\n                      <Link href={`/finder/finds/${find.id}`}>\n                        <Button size=\"sm\" className=\"bg-finder-red hover:bg-finder-red-dark\">{t('common.view', 'View')}</Button>\n                      </Link>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {/* My Proposals */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"text-xl text-gray-900\">{t('dashboard.my_proposals', 'My Proposals')}</CardTitle>\n              <Link href=\"/finder/proposals\">\n                <Button variant=\"outline\" size=\"sm\">{t('common.view_all', 'View All')}</Button>\n              </Link>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {myProposals.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>{t('dashboard.no_proposals', 'No proposals submitted yet.')}</p>\n                  <Link href=\"/finder/browse-finds\" className=\"text-finder-red hover:underline font-medium\">\n                    {t('dashboard.browse_for_finds', 'Browse finds to get started')}\n                  </Link>\n                </div>\n              ) : (\n                myProposals.slice(0, 3).map((proposal: any) => (\n                  <div key={proposal.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">{t('dashboard.proposal_id', 'Proposal #')}{proposal.id.substring(0, 8)}</h4>\n                      <span className={`px-2 py-1 text-xs rounded-full font-medium ${\n                        proposal.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :\n                        proposal.status === 'accepted' ? 'bg-green-100 text-green-700' :\n                        'bg-finder-red/20 text-finder-red-dark'\n                      }`}>\n                        {t(`common.status_${proposal.status}`, proposal.status)}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 text-sm mb-3\">{proposal.approach?.substring(0, 100)}...</p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-lg font-bold text-green-600\">‚Ç¶{parseInt(proposal.price).toLocaleString()}</span>\n                      <Link href={`/finder/proposals/${proposal.id}`}>\n                        <Button size=\"sm\" variant=\"outline\">{t('common.view', 'View')}</Button>\n                      </Link>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <SupportWidget context=\"dashboard\" />\n    </div>\n  );\n}","size_bytes":10292},"client/src/pages/finder/payment-success.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, Loader2, Coins } from \"lucide-react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function PaymentSuccess() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'failed'>('pending');\n  const [paymentDetails, setPaymentDetails] = useState<any>(null);\n  const queryClient = useQueryClient();\n\n  // Get reference from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const reference = urlParams.get('reference') || urlParams.get('tx_ref'); // Flutterwave uses tx_ref\n  const paymentParam = urlParams.get('payment');\n  const status = urlParams.get('status');\n  const transactionId = urlParams.get('transaction_id');\n\n  useEffect(() => {\n    const verifyPayment = async () => {\n      if (!reference) {\n        setVerificationStatus('failed');\n        return;\n      }\n\n      try {\n        // Determine payment service based on reference format\n        let verifyEndpoint = `/api/payments/verify/${reference}`;\n        if (reference.startsWith('OPAY_')) {\n          verifyEndpoint = `/api/payments/opay/verify/${reference}`;\n        } else if (reference.startsWith('FLW_')) {\n          verifyEndpoint = `/api/payments/flutterwave/verify/${reference}`;\n        }\n\n        // Verify payment with backend\n        const result = await apiRequest(verifyEndpoint);\n        \n        if (result.status === 'success') {\n          setVerificationStatus('success');\n          setPaymentDetails(result.data);\n          \n          // Invalidate relevant queries to refresh data\n          queryClient.invalidateQueries({ queryKey: ['/api/finder/profile'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/finder/transactions'] });\n        } else {\n          setVerificationStatus('failed');\n        }\n      } catch (error) {\n        console.error('Payment verification error:', error);\n        setVerificationStatus('failed');\n      }\n    };\n\n    // Only verify if we have a reference and the URL indicates success\n    // Handle both generic payment=success and Flutterwave status=completed\n    if (reference && (paymentParam === 'success' || status === 'completed')) {\n      verifyPayment();\n    } else {\n      setVerificationStatus('failed');\n    }\n  }, [reference, paymentParam, queryClient]);\n\n  const handleContinue = () => {\n    setLocation('/finder/dashboard');\n  };\n\n  const handleRetry = () => {\n    setLocation('/finder/token-purchase');\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"text-center\">\n            <CardHeader>\n              {verificationStatus === 'pending' && (\n                <>\n                  <div className=\"mx-auto w-16 h-16 flex items-center justify-center bg-blue-100 rounded-full mb-4\">\n                    <Loader2 className=\"w-8 h-8 text-blue-600 animate-spin\" />\n                  </div>\n                  <CardTitle>Verifying Payment</CardTitle>\n                  <CardDescription>\n                    Please wait while we confirm your payment...\n                  </CardDescription>\n                </>\n              )}\n\n              {verificationStatus === 'success' && (\n                <>\n                  <div className=\"mx-auto w-16 h-16 flex items-center justify-center bg-green-100 rounded-full mb-4\">\n                    <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                  <CardTitle className=\"text-green-600\">Payment Successful!</CardTitle>\n                  <CardDescription>\n                    Your FinderTokens‚Ñ¢ have been added to your account\n                  </CardDescription>\n                </>\n              )}\n\n              {verificationStatus === 'failed' && (\n                <>\n                  <div className=\"mx-auto w-16 h-16 flex items-center justify-center bg-red-100 rounded-full mb-4\">\n                    <XCircle className=\"w-8 h-8 text-red-600\" />\n                  </div>\n                  <CardTitle className=\"text-red-600\">Payment Failed</CardTitle>\n                  <CardDescription>\n                    We couldn't verify your payment. Please try again.\n                  </CardDescription>\n                </>\n              )}\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {verificationStatus === 'success' && paymentDetails && (\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-center space-x-2 text-green-700\">\n                    <Coins className=\"w-5 h-5\" />\n                    <span className=\"font-semibold\">\n                      {paymentDetails.metadata?.tokens || 'N/A'} FinderTokens‚Ñ¢ Added\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-green-600 mt-2 space-y-1\">\n                    <p>Transaction Reference: {reference}</p>\n                    {transactionId && (\n                      <p>Transaction ID: {transactionId}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {verificationStatus === 'success' && (\n                <Button onClick={handleContinue} className=\"w-full\">\n                  Continue to Dashboard\n                </Button>\n              )}\n\n              {verificationStatus === 'failed' && (\n                <div className=\"space-y-2\">\n                  <Button onClick={handleRetry} className=\"w-full\" variant=\"outline\">\n                    Try Again\n                  </Button>\n                  <Button onClick={handleContinue} variant=\"secondary\" className=\"w-full\">\n                    Go to Dashboard\n                  </Button>\n                </div>\n              )}\n\n              {verificationStatus === 'pending' && (\n                <p className=\"text-sm text-gray-500\">\n                  This may take a few seconds...\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6631},"client/src/pages/finder/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { FinderLevelBadge } from \"@/components/finder-level-badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Save, Award, Star, User } from \"lucide-react\";\nimport type { Finder, Category } from \"@shared/schema\";\n\nexport default function FinderProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    bio: \"\",\n    category: \"\", // Kept for backward compatibility, but new logic uses 'categories'\n    categories: [] as string[], // New field for multiple categories\n    skills: \"\",\n    availability: \"full-time\"\n  });\n\n  const { data: finder, isLoading } = useQuery<any>({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user\n  });\n\n  // Fetch categories for dropdown\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    enabled: !!user\n  });\n\n  // Update form data when finder data changes\n  useEffect(() => {\n    if (finder) {\n      setFormData({\n        bio: finder.bio || \"\",\n        category: finder.category || \"\", // For backward compatibility if needed\n        categories: Array.isArray(finder.categories) ? finder.categories : (finder.category ? [finder.category] : []), // Initialize with existing single category if available\n        skills: Array.isArray(finder.skills) ? finder.skills.join(\", \") : \"\",\n        availability: finder.availability || \"full-time\"\n      });\n    }\n  }, [finder]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        bio: data.bio || \"\",\n        category: data.category || \"\", // Keep for backward compatibility\n        categories: data.categories || [], // New multiple categories field\n        skills: typeof data.skills === 'string'\n          ? data.skills.split(\",\").map((s: string) => s.trim()).filter(Boolean)\n          : data.skills || [],\n        availability: data.availability || \"full-time\"\n      };\n\n      // For API, ensure we only send 'categories' if it's not empty, otherwise send the old 'category' if present\n      if (payload.categories.length > 0) {\n        delete payload.category; // Remove the old single category field if new ones are provided\n      } else if (payload.category) {\n        // If no new categories are selected, but an old one exists, keep it.\n        // If both are empty, the API should handle it.\n      } else {\n        // If neither categories nor category are present, remove category to avoid sending empty string if not intended.\n        delete payload.category;\n      }\n\n\n      const response = await apiRequest('PATCH', '/api/finder/profile', payload);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finder/profile'] });\n      toast({\n        title: \"Success\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Profile update error:', error);\n\n      // Check if it's an authentication error\n      if (error.message?.includes('No authentication token') || error.message?.includes('Access token required')) {\n        toast({\n          title: \"Authentication Error\",\n          description: \"Please log in again to continue.\",\n          variant: \"destructive\",\n        });\n        // Redirect to login\n        window.location.href = '/login';\n        return;\n      }\n\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateProfile = () => {\n    // Basic validation\n    if (formData.categories.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select at least one specialty category.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateProfileMutation.mutate(formData);\n  };\n\n  // Get star rating display\n  const getStarRating = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-6 h-6 ${i < rating ? 'text-finder-red fill-current' : 'text-gray-300'}`}\n      />\n    ));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader currentPage=\"profile\" />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading profile...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const fullName = finder?.user ? `${finder.user.firstName} ${finder.user.lastName}`.trim() : \"Not available\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader currentPage=\"profile\" />\n\n      <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6\">\n        {/* Beautiful Profile Card - Like the Design */}\n        {finder && (\n          <div className=\"max-w-md mx-auto mb-8\">\n            <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden\">\n              {/* Red Header */}\n              <div className=\"bg-finder-red px-8 py-6 text-center\">\n                <h1 className=\"text-white text-2xl font-bold\">FinderMeister</h1>\n              </div>\n\n              {/* Profile Content */}\n              <div className=\"px-8 py-8 text-center bg-white\">\n                {/* Profile Picture Placeholder */}\n                <div className=\"relative inline-block mb-6\">\n                  <div className=\"w-32 h-32 bg-gray-200 rounded-full flex items-center justify-center\">\n                    <User className=\"w-16 h-16 text-gray-400\" />\n                  </div>\n                  {/* Level Badge */}\n                  <div className=\"absolute -bottom-2 -right-2\">\n                    <FinderLevelBadge\n                      completedJobs={finder.jobsCompleted || 0}\n                      className=\"text-sm px-3 py-1\"\n                    />\n                  </div>\n                </div>\n\n                {/* Name */}\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">{fullName}</h2>\n\n                {/* Stars */}\n                <div className=\"flex justify-center mb-4\">\n                  {getStarRating(Math.round(parseFloat(finder.averageRating || \"5.0\")))}\n                </div>\n\n                {/* Completed Jobs */}\n                <p className=\"text-lg text-gray-600 mb-4 font-medium\">\n                  {finder.jobsCompleted || 0} Completed Finds\n                </p>\n\n                {/* Testimonials/Bio */}\n                <div className=\"space-y-2 mb-8\">\n                  {finder.bio && (\n                    <p className=\"text-gray-700 italic\">\"{finder.bio}\"</p>\n                  )}\n                  {!finder.bio && (\n                    <>\n                      <p className=\"text-gray-700 italic\">\"Extremely reliable and efficient\"</p>\n                      <p className=\"text-gray-700 italic\">\"Went above and beyond to help me out!\"</p>\n                    </>\n                  )}\n                </div>\n\n                {/* Hire Button */}\n                <Button className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-4 text-lg rounded-xl\">\n                  Edit Profile\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Profile Settings Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Award className=\"w-5 h-5\" />\n              Profile Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Profile Stats */}\n            {finder && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-finder-red\">{finder.jobsCompleted || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Jobs Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">‚Ç¶{finder.totalEarned || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Total Earnings</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{parseFloat(finder.averageRating || \"5.0\").toFixed(1)}/5</div>\n                  <div className=\"text-sm text-gray-600\">Average Rating</div>\n                </div>\n                <div className=\"text-center\">\n                  <Badge variant={finder.user?.isVerified ? \"default\" : \"secondary\"}>\n                    {finder.user?.isVerified ? \"Verified\" : \"Unverified\"}\n                  </Badge>\n                  <div className=\"text-sm text-gray-600 mt-1\">Status</div>\n                </div>\n              </div>\n            )}\n\n            {/* Form Fields */}\n            <div className=\"space-y-6\">\n              {/* Full Name - Read Only */}\n              <div>\n                <Label htmlFor=\"name\" className=\"text-sm font-medium\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  value={fullName}\n                  disabled\n                  className=\"mt-1 bg-gray-100\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Contact admin to change your name</p>\n              </div>\n\n              {/* Categories - Multiple Selection */}\n              <div>\n                <Label htmlFor=\"categories\">Categories</Label>\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm text-gray-600\">Select all categories that match your skills and expertise:</p>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 max-h-48 overflow-y-auto p-3 border rounded-md bg-white/80\">\n                    {categoriesLoading ? (\n                      <div className=\"col-span-full text-center py-4 text-gray-500\">Loading categories...</div>\n                    ) : categories.length > 0 ? (\n                      categories\n                        .filter(category => category.isActive)\n                        .map((category) => (\n                          <label key={category.id} className=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.categories.includes(category.name)}\n                              onChange={(e) => {\n                                const isChecked = e.target.checked;\n                                setFormData(prev => ({\n                                  ...prev,\n                                  categories: isChecked\n                                    ? [...prev.categories, category.name]\n                                    : prev.categories.filter(cat => cat !== category.name)\n                                }));\n                              }}\n                              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                            />\n                            <span className=\"text-sm font-medium text-gray-700\">{category.name}</span>\n                          </label>\n                        ))\n                    ) : (\n                      <div className=\"col-span-full text-center py-4 text-gray-500\">No categories available</div>\n                    )}\n                  </div>\n                  {formData.categories.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {formData.categories.map((categoryName) => (\n                        <Badge key={categoryName} variant=\"secondary\" className=\"text-xs\">\n                          {categoryName}\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              setFormData(prev => ({\n                                ...prev,\n                                categories: prev.categories.filter(cat => cat !== categoryName)\n                              }));\n                            }}\n                            className=\"ml-1 text-gray-500 hover:text-gray-700\"\n                          >\n                            √ó\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n\n              {/* Availability */}\n              <div>\n                <Label htmlFor=\"availability\" className=\"text-sm font-medium\">Availability</Label>\n                <Select value={formData.availability} onValueChange={(value) => setFormData(prev => ({ ...prev, availability: value }))}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"full-time\">Full-time</SelectItem>\n                    <SelectItem value=\"part-time\">Part-time</SelectItem>\n                    <SelectItem value=\"weekends\">Weekends Only</SelectItem>\n                    <SelectItem value=\"evenings\">Evenings Only</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Bio */}\n              <div>\n                <Label htmlFor=\"bio\" className=\"text-sm font-medium\">Bio</Label>\n                <Textarea\n                  id=\"bio\"\n                  value={formData.bio}\n                  onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}\n                  placeholder=\"Tell us about your experience and expertise\"\n                  className=\"mt-1\"\n                  rows={4}\n                />\n              </div>\n\n              {/* Skills */}\n              <div>\n                <Label htmlFor=\"skills\" className=\"text-sm font-medium\">Skills (comma-separated)</Label>\n                <Input\n                  id=\"skills\"\n                  value={formData.skills}\n                  onChange={(e) => setFormData(prev => ({ ...prev, skills: e.target.value }))}\n                  placeholder=\"e.g., Research, Web Development, Content Writing\"\n                  className=\"mt-1\"\n                />\n              </div>\n\n              {/* Update Button */}\n              <div className=\"pt-4 flex justify-center\">\n                <Button\n                  onClick={handleUpdateProfile}\n                  disabled={updateProfileMutation.isPending}\n                  className=\"bg-finder-red hover:bg-finder-red-dark text-white px-8 py-2\"\n                  size=\"default\"\n                >\n                  {updateProfileMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Updating...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Update Profile\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16175},"client/src/pages/finder/proposal-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ArrowLeft, Handshake, Clock, Banknote, CheckCircle, XCircle, Calendar, MessageSquare } from \"lucide-react\";\nimport type { Proposal, Request } from \"@shared/schema\";\n\nexport default function FinderProposalDetails() {\n  const [match, params] = useRoute(\"/finder/proposals/:id\");\n  const { user, logout } = useAuth();\n  const proposalId = params?.id;\n\n  const { data: proposal, isLoading: proposalLoading } = useQuery<Proposal>({\n    queryKey: ['/api/proposals', proposalId],\n    enabled: !!proposalId && !!user\n  });\n\n  const { data: request, isLoading: requestLoading } = useQuery<Request>({\n    queryKey: ['/api/requests', proposal?.requestId],\n    enabled: !!proposal?.requestId && !!user\n  });\n\n  const handleLogout = () => {\n    logout();\n    window.location.href = \"/\";\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'rejected':\n        return <XCircle className=\"w-5 h-5 text-finder-red\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <Badge className=\"bg-green-100 text-green-700 hover:bg-green-100\">Accepted</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Pending Review</Badge>;\n    }\n  };\n\n  if (proposalLoading || requestLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading proposal details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!proposal) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Proposal Not Found</h1>\n          <Link href=\"/finder/proposals\">\n            <Button>Back to My Proposals</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-finder-red text-white px-6 py-4\">\n        <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Handshake className=\"w-6 h-6\" />\n            <span className=\"text-xl font-bold\">FinderMeister</span>\n          </Link>\n          <nav className=\"flex items-center space-x-6\">\n            <Link href=\"/finder/dashboard\" className=\"hover:text-finder-red/70\">Dashboard</Link>\n            <Link href=\"/finder/browse-requests\" className=\"hover:text-finder-red/70\">Browse Requests</Link>\n            <Link href=\"/finder/proposals\" className=\"hover:text-finder-red/70\">My Proposals</Link>\n            <div className=\"relative group\">\n              <button className=\"flex items-center space-x-1 hover:text-finder-red/70\">\n                <span>{user?.firstName} {user?.lastName}</span>\n              </button>\n              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 invisible group-hover:visible\">\n                <button \n                  onClick={handleLogout}\n                  className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left\"\n                >\n                  Sign out\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      {/* Back Button */}\n      <div className=\"max-w-6xl mx-auto pt-6 px-6\">\n        <Link href=\"/finder/proposals\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to My Proposals\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto pb-8 px-6\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Proposal Details */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      {getStatusIcon(proposal.status || 'pending')}\n                      <CardTitle className=\"text-2xl text-gray-900\">Your Proposal</CardTitle>\n                      {getStatusBadge(proposal.status || 'pending')}\n                    </div>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-4 h-4 mr-1\" />\n                        Submitted: {proposal.createdAt ? new Date(proposal.createdAt).toLocaleDateString() : 'Unknown'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Your Approach</h3>\n                    <p className=\"text-gray-700 leading-relaxed\">{proposal.approach}</p>\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Proposed Price</h3>\n                      <div className=\"flex items-center text-lg font-semibold text-green-600\">\n                        <Banknote className=\"w-5 h-5 mr-1\" />\n‚Ç¶{proposal.price}\n                      </div>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Timeline</h3>\n                      <div className=\"flex items-center text-lg font-semibold text-blue-600\">\n                        <Clock className=\"w-5 h-5 mr-1\" />\n                        {proposal.timeline}\n                      </div>\n                    </div>\n                  </div>\n\n                  {proposal.notes && (\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Additional Notes</h3>\n                      <div className=\"p-4 bg-gray-50 rounded-lg\">\n                        <p className=\"text-gray-700\">{proposal.notes}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Request Details */}\n            {request && (\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl text-gray-900\">Request Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">{request.title}</h3>\n                      <p className=\"text-gray-700 leading-relaxed\">{request.description}</p>\n                    </div>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">Category</h4>\n                        <Badge variant=\"outline\">{request.category}</Badge>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">Client Budget</h4>\n                        <div className=\"flex items-center text-gray-700\">\n                          <Banknote className=\"w-4 h-4 mr-1\" />\n‚Ç¶{request.budgetMin} - ‚Ç¶{request.budgetMax}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t\">\n                      <Link href={`/finder/requests/${request.id}`}>\n                        <Button variant=\"outline\" className=\"w-full\">\n                          View Full Request Details\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Proposal Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(proposal.status || 'pending')}\n                    <span className=\"font-semibold capitalize\">{proposal.status || 'pending'}</span>\n                  </div>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Submitted:</span>\n                  <span className=\"font-semibold\">\n                    {proposal.createdAt ? new Date(proposal.createdAt).toLocaleDateString() : 'Unknown'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Proposal ID:</span>\n                  <span className=\"font-mono text-xs text-gray-500\">\n                    {proposal.id.slice(-8)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {proposal.status === 'accepted' && (\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-green-700\">üéâ Congratulations!</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-700 mb-4\">\n                    Your proposal has been accepted! The client is ready to work with you on this project.\n                  </p>\n                  <Button className=\"w-full bg-green-600 hover:bg-green-700 text-white\">\n                    <MessageSquare className=\"w-4 h-4 mr-2\" />\n                    Contact Client\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {proposal.status === 'rejected' && (\n              <Card className=\"mt-6 border-finder-red/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-finder-red-dark\">Proposal Not Selected</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-700 mb-4\">\n                    Unfortunately, your proposal was not selected for this project. Don't get discouraged - keep submitting great proposals!\n                  </p>\n                  <Link href=\"/finder/browse-requests\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      Browse More Requests\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            )}\n\n            {proposal.status === 'pending' && (\n              <Card className=\"mt-6 border-yellow-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-yellow-700\">Under Review</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-700\">\n                    Your proposal is currently being reviewed by the client. You'll be notified once they make a decision.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12228},"client/src/pages/finder/proposals.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ArrowLeft, Handshake, Clock, Banknote, CheckCircle, XCircle, Calendar } from \"lucide-react\";\nimport type { Proposal } from \"@shared/schema\";\n\nexport default function FinderProposals() {\n  const { user, logout } = useAuth();\n\n  const { data: proposals = [], isLoading } = useQuery<Proposal[]>({\n    queryKey: ['/api/finder/proposals'],\n    enabled: !!user\n  });\n\n  const handleLogout = () => {\n    logout();\n    window.location.href = \"/\";\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4 text-finder-red\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <Badge className=\"bg-green-100 text-green-700 hover:bg-green-100\">Accepted</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Pending</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading your proposals...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-finder-red text-white px-6 py-4\">\n        <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Handshake className=\"w-6 h-6\" />\n            <span className=\"text-xl font-bold\">FinderMeister</span>\n          </Link>\n          <nav className=\"flex items-center space-x-6\">\n            <Link href=\"/finder/dashboard\" className=\"hover:text-finder-red/70\">Dashboard</Link>\n            <Link href=\"/finder/browse-requests\" className=\"hover:text-finder-red/70\">Browse Requests</Link>\n            <span className=\"bg-white text-finder-red px-3 py-1 rounded font-medium\">My Proposals</span>\n            <div className=\"relative group\">\n              <button className=\"flex items-center space-x-1 hover:text-finder-red/70\">\n                <span>{user?.firstName} {user?.lastName}</span>\n              </button>\n              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 invisible group-hover:visible\">\n                <button \n                  onClick={handleLogout}\n                  className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left\"\n                >\n                  Sign out\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      {/* Back Button */}\n      <div className=\"max-w-6xl mx-auto pt-6 px-6\">\n        <Link href=\"/finder/dashboard\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto pb-8 px-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Proposals</h1>\n          <p className=\"text-gray-600\">Track the status of all your submitted proposals.</p>\n        </div>\n\n        {/* Stats Summary */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"border-blue-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"bg-blue-600 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Total Proposals</h3>\n              <p className=\"text-2xl font-bold text-blue-600\">{proposals.length}</p>\n              <p className=\"text-gray-600 text-sm\">All time</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-yellow-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"bg-yellow-600 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Pending</h3>\n              <p className=\"text-2xl font-bold text-yellow-600\">\n                {proposals.filter(p => p.status === 'pending').length}\n              </p>\n              <p className=\"text-gray-600 text-sm\">Awaiting response</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-green-200\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"bg-green-600 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Accepted</h3>\n              <p className=\"text-2xl font-bold text-green-600\">\n                {proposals.filter(p => p.status === 'accepted').length}\n              </p>\n              <p className=\"text-gray-600 text-sm\">Ready to start</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-finder-red/30\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"bg-finder-red rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4\">\n                <XCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Rejected</h3>\n              <p className=\"text-2xl font-bold text-finder-red\">\n                {proposals.filter(p => p.status === 'rejected').length}\n              </p>\n              <p className=\"text-gray-600 text-sm\">Not selected</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Proposals List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl text-gray-900\">All Proposals</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {proposals.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Clock className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No proposals yet</h3>\n                <p className=\"text-gray-600 mb-6\">Start by browsing available finds and submitting your first proposal.</p>\n                <Link href=\"/finder/browse-finds\">\n                  <Button className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                    Browse Finds\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {proposals.map((proposal) => (\n                  <div key={proposal.id} className=\"border rounded-lg p-6 hover:shadow-sm transition-shadow\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          {getStatusIcon(proposal.status || 'pending')}\n                          <h3 className=\"font-semibold text-gray-900\">Request #{proposal.requestId.slice(-8)}</h3>\n                          {getStatusBadge(proposal.status || 'pending')}\n                        </div>\n                        <p className=\"text-gray-600 mb-3 leading-relaxed\">{proposal.approach}</p>\n                        \n                        <div className=\"grid md:grid-cols-3 gap-4 text-sm\">\n                          <div className=\"flex items-center text-gray-600\">\n                            <Banknote className=\"w-4 h-4 mr-1\" />\n                            <span>Proposed: ‚Ç¶{proposal.price}</span>\n                          </div>\n                          <div className=\"flex items-center text-gray-600\">\n                            <Clock className=\"w-4 h-4 mr-1\" />\n                            <span>Timeline: {proposal.timeline}</span>\n                          </div>\n                          <div className=\"flex items-center text-gray-600\">\n                            <Calendar className=\"w-4 h-4 mr-1\" />\n                            <span>Submitted: {proposal.createdAt ? new Date(proposal.createdAt).toLocaleDateString() : 'Unknown'}</span>\n                          </div>\n                        </div>\n\n                        {proposal.notes && (\n                          <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                            <p className=\"text-sm text-gray-700\">\n                              <strong>Additional Notes:</strong> {proposal.notes}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"ml-6 flex gap-2\">\n                        <Link href={`/finder/proposals/${proposal.id}`}>\n                          <Button size=\"sm\" className=\"bg-finder-red hover:bg-finder-red-dark text-white\">\n                            View Details\n                          </Button>\n                        </Link>\n                        <Link href={`/finder/requests/${proposal.requestId}`}>\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Request\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10277},"client/src/pages/finder/request-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Clock, Banknote, MapPin, Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Find, Proposal } from \"@shared/schema\";\n\nexport default function FinderRequestDetails() {\n  // Support both old and new routes\n  const [matchFinds, paramsFinds] = useRoute(\"/finder/finds/:id\");\n  const [matchRequests, paramsRequests] = useRoute(\"/finder/requests/:id\");\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showProposalForm, setShowProposalForm] = useState(false);\n  const [proposalData, setProposalData] = useState({\n    approach: \"\",\n    price: \"\",\n    timeline: \"\",\n    notes: \"\"\n  });\n\n  // Format currency in Naira\n  const formatCurrency = (amount: string | number | null) => {\n    if (amount === null || amount === undefined) return '‚Ç¶0';\n    const numAmount = typeof amount === 'string' ? parseInt(amount) : amount;\n    return `‚Ç¶${numAmount.toLocaleString()}`;\n  };\n\n  const findId = paramsFinds?.id || paramsRequests?.id;\n\n  const { data: find, isLoading: findLoading, error: findError } = useQuery<Find>({\n    queryKey: ['/api/finds', findId],\n    enabled: !!findId && !!user\n  });\n\n\n\n  // For finders, only show their own proposals (like comments under a post)\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<Proposal[]>({\n    queryKey: ['/api/finder/finds', findId, 'proposals'],\n    enabled: !!findId && !!user && !!find\n  });\n\n  const submitProposal = useMutation({\n    mutationFn: async () => {\n      if (!findId) throw new Error(\"No find ID\");\n      return apiRequest(\"/api/proposals\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          findId: findId,\n          approach: proposalData.approach,\n          price: proposalData.price,\n          timeline: proposalData.timeline,\n          notes: proposalData.notes\n        })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finder/finds', findId, 'proposals'] });\n      setShowProposalForm(false);\n      setProposalData({ approach: \"\", price: \"\", timeline: \"\", notes: \"\" });\n      toast({\n        title: \"Success!\",\n        description: \"Your proposal has been submitted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to submit proposal\",\n      });\n    }\n  });\n\n  // Check if user already submitted a proposal for this request\n  // Since we're using the finder-specific API that only returns their own proposals,\n  // if proposals array has any item, it means the finder already submitted a proposal\n  const userProposal = proposals.length > 0 ? proposals[0] : null;\n\n  if (findLoading || proposalsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n          <p className=\"text-gray-600 mt-4\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!find) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Find Not Found</h1>\n          <p className=\"text-gray-600 mb-4\">Find ID: {findId}</p>\n          {!user && <p className=\"text-gray-600 mb-4\">Please log in to view this find</p>}\n          {findError && <p className=\"text-gray-600 mb-4\">Error: {findError?.message}</p>}\n          <Link href=\"/finder/dashboard\">\n            <Button>Return to Dashboard</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n\n      {/* Back Button */}\n      <div className=\"max-w-6xl mx-auto pt-4 sm:pt-6 px-4 sm:px-6\">\n        <Link href=\"/finder/browse-finds\">\n          <Button variant=\"ghost\" className=\"mb-4 sm:mb-6\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Browse Finds\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto pb-8 px-4 sm:px-6\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Request Details */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-2xl text-gray-900 mb-2\">{find.title}</CardTitle>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"w-4 h-4 mr-1\" />\n                        {find.timeframe || \"Flexible timeline\"}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <MapPin className=\"w-4 h-4 mr-1\" />\n                        Location flexible\n                      </div>\n                    </div>\n                  </div>\n                  <Badge variant={find.status === 'open' ? 'default' : 'secondary'}>\n                    {find.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n                    <p className=\"text-gray-700 leading-relaxed\">{find.description}</p>\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Category</h3>\n                      <Badge variant=\"outline\">{find.category}</Badge>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">Budget Range</h3>\n                      <div className=\"text-lg font-semibold text-green-600\">\n                        {formatCurrency(find.budgetMin)} - {formatCurrency(find.budgetMax)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Proposal Form or Status */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-gray-900\">\n                  {userProposal ? \"Your Proposal\" : \"Submit Proposal\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {userProposal ? (\n                  // Show existing proposal\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant={\n                        userProposal.status === 'accepted' ? 'default' : \n                        userProposal.status === 'rejected' ? 'destructive' : 'secondary'\n                      }>\n                        {userProposal.status}\n                      </Badge>\n                      <span className=\"text-sm text-gray-500\">\n                        Submitted {userProposal.createdAt ? new Date(userProposal.createdAt).toLocaleDateString() : 'Unknown date'}\n                      </span>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-1\">Approach</h4>\n                      <p className=\"text-gray-700\">{userProposal.approach}</p>\n                    </div>\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-1\">Price</h4>\n                        <p className=\"text-gray-700\">‚Ç¶{parseInt(userProposal.price || \"0\").toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-1\">Timeline</h4>\n                        <p className=\"text-gray-700\">{userProposal.timeline}</p>\n                      </div>\n                    </div>\n                    {userProposal.notes && (\n                      <div>\n                        <h4 className=\"font-semibold mb-1\">Additional Notes</h4>\n                        <p className=\"text-gray-700\">{userProposal.notes}</p>\n                      </div>\n                    )}\n                  </div>\n                ) : find.status === 'open' ? (\n                  // Show proposal form\n                  <div>\n                    {!showProposalForm ? (\n                      <div className=\"text-center py-6\">\n                        <p className=\"text-gray-600 mb-4\">\n                          This request is available for proposals. Submit your proposal to be considered.\n                        </p>\n                        <Button onClick={() => setShowProposalForm(true)}>\n                          <Send className=\"w-4 h-4 mr-2\" />\n                          Submit Proposal\n                        </Button>\n                      </div>\n                    ) : (\n                      <form onSubmit={(e) => {\n                        e.preventDefault();\n                        submitProposal.mutate();\n                      }} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"approach\">Approach *</Label>\n                          <Textarea\n                            id=\"approach\"\n                            placeholder=\"Describe your approach to this project...\"\n                            value={proposalData.approach}\n                            onChange={(e) => setProposalData(prev => ({...prev, approach: e.target.value}))}\n                            required\n                          />\n                        </div>\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"price\">Price *</Label>\n                            <Input\n                              id=\"price\"\n                              type=\"number\"\n                              placeholder=\"Enter your price\"\n                              value={proposalData.price}\n                              onChange={(e) => setProposalData(prev => ({...prev, price: e.target.value}))}\n                              required\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"timeline\">Timeline *</Label>\n                            <Input\n                              id=\"timeline\"\n                              placeholder=\"e.g. 2 weeks\"\n                              value={proposalData.timeline}\n                              onChange={(e) => setProposalData(prev => ({...prev, timeline: e.target.value}))}\n                              required\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"notes\">Additional Notes</Label>\n                          <Textarea\n                            id=\"notes\"\n                            placeholder=\"Any additional information...\"\n                            value={proposalData.notes}\n                            onChange={(e) => setProposalData(prev => ({...prev, notes: e.target.value}))}\n                          />\n                        </div>\n                        <div className=\"flex space-x-3\">\n                          <Button type=\"submit\" disabled={submitProposal.isPending}>\n                            {submitProposal.isPending ? \"Submitting...\" : \"Submit Proposal\"}\n                          </Button>\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\"\n                            onClick={() => setShowProposalForm(false)}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </form>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <p className=\"text-gray-600\">\n                      This request is no longer accepting proposals.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Request Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Proposals:</span>\n                  <span className=\"font-semibold\">{proposals.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Findertoken Cost:</span>\n                  <span className=\"font-semibold\">{find.findertokenCost} findertoken{find.findertokenCost !== 1 ? 's' : ''}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Posted:</span>\n                  <span className=\"font-semibold\">\n                    {find.createdAt ? new Date(find.createdAt).toLocaleDateString() : 'Unknown date'}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14347},"client/src/pages/finder/security.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Key, Mail, Smartphone, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function SecuritySettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    emailNotifications: true,\n    loginAlerts: true,\n    passwordRequirements: true\n  });\n\n  // Fetch security settings\n  const { data: fetchedSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: ['security-settings'],\n    queryFn: () => apiRequest('GET', '/api/finder/security-settings'),\n    onSuccess: (data) => {\n      setSecuritySettings(data);\n    },\n    onError: (error: any) => {\n      console.error('Error fetching security settings:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load security settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('findermeister_token')}`\n        },\n        body: JSON.stringify({\n          currentPassword: data.currentPassword,\n          newPassword: data.newPassword\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to change password');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setPasswordData({ currentPassword: \"\", newPassword: \"\", confirmPassword: \"\" });\n      toast({\n        title: \"Password changed\",\n        description: \"Your password has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to change password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSecuritySettingsMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('PUT', '/api/finder/security-settings', data),\n    onSuccess: () => {\n      toast({\n        title: \"Settings updated\",\n        description: \"Your security settings have been updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update security settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePasswordChange = () => {\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"New password and confirmation do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (passwordData.newPassword.length < 8) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    changePasswordMutation.mutate(passwordData);\n  };\n\n  const handleSecuritySettingChange = (setting: string, value: boolean) => {\n    const newSettings = { ...securitySettings, [setting]: value };\n    setSecuritySettings(newSettings);\n    updateSecuritySettingsMutation.mutate(newSettings);\n  };\n\n  if (settingsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading security settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n\n      <div className=\"max-w-4xl mx-auto py-6 sm:py-8 px-4 sm:px-6\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Security Settings</h1>\n          <p className=\"text-gray-600 text-sm sm:text-base\">Manage your account security preferences</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Password Change */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Key className=\"w-5 h-5\" />\n                Change Password\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"currentPassword\">Current Password</Label>\n                <Input\n                  id=\"currentPassword\"\n                  type=\"password\"\n                  value={passwordData.currentPassword}\n                  onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}\n                  className=\"mt-1\"\n                  placeholder=\"Current password\"\n                />\n              </div>\n              <div className=\"grid sm:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"newPassword\">New Password</Label>\n                  <Input\n                    id=\"newPassword\"\n                    type=\"password\"\n                    value={passwordData.newPassword}\n                    onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}\n                    className=\"mt-1\"\n                    placeholder=\"New password\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={passwordData.confirmPassword}\n                    onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    className=\"mt-1\"\n                    placeholder=\"Confirm password\"\n                  />\n                </div>\n              </div>\n              <Button \n                onClick={handlePasswordChange}\n                disabled={!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword || changePasswordMutation.isPending}\n                className=\"bg-finder-red hover:bg-finder-red-dark\"\n              >\n                Update Password\n              </Button>\n            </CardContent>\n          </Card>\n\n          </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7316},"client/src/pages/finder/token-purchase.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Coins, CreditCard, ArrowLeft, Star, Zap, Users, Crown } from \"lucide-react\";\nimport { FlutterwavePaymentModal } from \"@/components/FlutterwavePaymentModal\";\n\ninterface PricingInfo {\n  pricePerToken: number; // in kobo/cents\n  currency: string;\n}\n\ninterface TokenPackage {\n  id: string;\n  name: string;\n  price: number;\n  tokens: number;\n}\n\nexport default function TokenPurchase() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [tokenAmount, setTokenAmount] = useState<number>(10);\n  const [loading, setLoading] = useState(false);\n  const [selectedPackage, setSelectedPackage] = useState<TokenPackage | null>(null);\n\n  const [flutterwaveModal, setFlutterwaveModal] = useState<{\n    isOpen: boolean;\n    packageId: string;\n    packageName: string;\n    packagePrice: number;\n    tokenCount: number;\n  }>({\n    isOpen: false,\n    packageId: '',\n    packageName: '',\n    packagePrice: 0,\n    tokenCount: 0\n  });\n\n  // Check if user returned from payment and redirect to success page\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const payment = urlParams.get('payment');\n    const reference = urlParams.get('reference');\n\n    if (payment === 'success' && reference) {\n      // Redirect to payment success page immediately\n      setLocation(`/finder/payment-success?payment=success&reference=${reference}`);\n    }\n  }, [setLocation]);\n\n  // Fetch pricing information from admin settings\n  const { data: pricing, isLoading: pricingLoading } = useQuery<PricingInfo>({\n    queryKey: ['/api/tokens/pricing'],\n    enabled: !!user\n  });\n\n  // Fetch current finder profile with token balance\n  const { data: finder } = useQuery({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user\n  });\n\n  const totalPrice = pricing ? (tokenAmount * pricing.pricePerToken) : 0;\n  const totalPriceInNaira = totalPrice / 100; // Convert kobo to naira\n\n  const handlePurchase = async (pkg: TokenPackage) => {\n    setSelectedPackage(pkg);\n    setFlutterwaveModal({\n      isOpen: true,\n      packageId: pkg.id,\n      packageName: pkg.name,\n      packagePrice: pkg.price,\n      tokenCount: pkg.tokens\n    });\n  };\n\n  const handleCustomPurchase = async () => {\n    if (!pricing || tokenAmount <= 0) return;\n    const packageData: TokenPackage = {\n      id: 'custom',\n      name: `${tokenAmount} FinderTokens`,\n      price: totalPriceInNaira,\n      tokens: tokenAmount,\n    };\n    await handlePurchase(packageData);\n  };\n\n  const handlePaymentSuccess = () => {\n    toast({\n      title: \"Purchase Successful!\",\n      description: \"Tokens have been added to your account.\",\n    });\n    // Refresh data here if needed\n  };\n\n  const handleTokenAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(e.target.value) || 0;\n    setTokenAmount(Math.max(1, Math.min(1000, value))); // Min 1, Max 1000 tokens\n  };\n\n  const presetAmounts = [10, 25, 50, 100];\n\n  if (pricingLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-500 mx-auto\"></div>\n              <p className=\"mt-2 text-muted-foreground\">Loading pricing information...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <Button variant=\"outline\" onClick={() => window.history.back()}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2\">Purchase Findertokens</h1>\n            <p className=\"text-muted-foreground\">\n              Buy findertokens to submit proposals and grow your finder business\n            </p>\n          </div>\n\n          {/* Current Balance */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Current Balance</h3>\n                  <p className=\"text-muted-foreground\">Available findertokens for proposals</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Coins className=\"w-6 h-6 text-orange-500\" />\n                    <span className=\"text-3xl font-bold text-orange-600\">\n                      {(finder as any)?.findertokenBalance || 0}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">findertokens</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* FinderToken‚Ñ¢ Special Packages */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Zap className=\"w-6 h-6 text-yellow-500\" />\n                <CardTitle className=\"text-2xl\">FinderToken‚Ñ¢ Special Packages</CardTitle>\n                <Badge variant=\"secondary\">Limited Time</Badge>\n              </div>\n              <CardDescription>\n                Special pricing packages with better value for dedicated Finders\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                {/* Light Usage Package */}\n                <Card className=\"border-2 border-muted hover:border-blue-200 transition-colors\">\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">Light Usage</CardTitle>\n                      <Star className=\"w-5 h-5 text-blue-500\" />\n                    </div>\n                    <CardDescription>Trial engagement</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"text-3xl font-bold text-blue-600\">25</div>\n                      <div className=\"text-sm text-muted-foreground\">FinderTokens</div>\n                      <div className=\"text-2xl font-bold\">‚Ç¶500</div>\n                      <div className=\"text-sm text-muted-foreground\">‚Ç¶20 per token</div>\n                      <div>\n                        <Button\n                          onClick={() => handlePurchase({ id: 'light', name: 'Light Usage', price: 500, tokens: 25 })}\n                          className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                          size=\"lg\"\n                          data-testid=\"purchase-light\"\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase with Flutterwave\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Moderate Participation Package */}\n                <Card className=\"border-2 border-muted hover:border-green-200 transition-colors\">\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">Moderate Participation</CardTitle>\n                      <Coins className=\"w-5 h-5 text-green-500\" />\n                    </div>\n                    <CardDescription>Regular engagement</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"text-3xl font-bold text-green-600\">50</div>\n                      <div className=\"text-sm text-muted-foreground\">FinderTokens</div>\n                      <div className=\"text-2xl font-bold\">‚Ç¶1,000</div>\n                      <div className=\"text-sm text-muted-foreground\">‚Ç¶20 per token</div>\n                      <div>\n                        <Button\n                          onClick={() => handlePurchase({ id: 'moderate', name: 'Moderate Participation', price: 1000, tokens: 50 })}\n                          className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                          size=\"lg\"\n                          data-testid=\"purchase-moderate\"\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase with Flutterwave\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Power Users Package */}\n                <Card className=\"border-2 border-orange-200 bg-orange-50/50 relative\">\n                  <Badge className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 bg-orange-500\">Most Popular</Badge>\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">Power Users</CardTitle>\n                      <Zap className=\"w-5 h-5 text-orange-500\" />\n                    </div>\n                    <CardDescription>Active Finders</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"text-3xl font-bold text-orange-600\">100</div>\n                      <div className=\"text-sm text-muted-foreground\">FinderTokens</div>\n                      <div className=\"text-2xl font-bold\">‚Ç¶2,000</div>\n                      <div className=\"text-sm text-muted-foreground\">‚Ç¶20 per token</div>\n                      <div>\n                        <Button\n                          onClick={() => handlePurchase({ id: 'power', name: 'Power Users', price: 2000, tokens: 100 })}\n                          className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                          size=\"lg\"\n                          data-testid=\"purchase-power\"\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase with Flutterwave\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Prolific Finders Package */}\n                <Card className=\"border-2 border-purple-200 bg-purple-50/50\">\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">Prolific Finders</CardTitle>\n                      <Crown className=\"w-5 h-5 text-purple-500\" />\n                    </div>\n                    <CardDescription>Agency teams</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"text-3xl font-bold text-purple-600\">200</div>\n                      <div className=\"text-sm text-muted-foreground\">FinderTokens</div>\n                      <div className=\"text-2xl font-bold\">‚Ç¶4,000</div>\n                      <div className=\"text-sm text-muted-foreground\">‚Ç¶20 per token</div>\n                      <div>\n                        <Button\n                          onClick={() => handlePurchase({ id: 'prolific', name: 'Prolific Finders', price: 4000, tokens: 200 })}\n                          className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                          size=\"lg\"\n                          data-testid=\"purchase-prolific\"\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase with Flutterwave\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Enterprise Package */}\n                <Card className=\"border-2 border-primary bg-primary/10\">\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">Enterprise</CardTitle>\n                      <Users className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <CardDescription>Large teams & agencies</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"text-3xl font-bold text-primary\">250</div>\n                      <div className=\"text-sm text-muted-foreground\">FinderTokens</div>\n                      <div className=\"text-2xl font-bold\">‚Ç¶5,000</div>\n                      <div className=\"text-sm text-muted-foreground\">‚Ç¶20 per token</div>\n                      <div>\n                        <Button\n                          onClick={() => handlePurchase({ id: 'enterprise', name: 'Enterprise', price: 5000, tokens: 250 })}\n                          className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                          size=\"lg\"\n                          data-testid=\"purchase-enterprise\"\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase with Flutterwave\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Monthly Allocation Info */}\n              <Card className=\"bg-blue-50/50 border-blue-200\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">üíé Monthly Benefits</h4>\n                  <div className=\"space-y-2 text-sm text-blue-800\">\n                    <p>‚Ä¢ Each verified Finder receives <strong>20 free FinderTokens</strong> monthly</p>\n                    <p>‚Ä¢ <strong>Beta Launch Bonus:</strong> First 50 verified Finders receive 70 FinderTokens + fast-track promotion opportunities</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </CardContent>\n          </Card>\n\n          {/* Custom Amount Purchase Card */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Custom Amount Purchase</CardTitle>\n              <CardDescription>\n                Current price: ‚Ç¶{pricing ? (pricing.pricePerToken / 100).toFixed(2) : '0.00'} per token\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              {/* Token Amount Input */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tokenAmount\">Number of Tokens</Label>\n                <Input\n                  id=\"tokenAmount\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"1000\"\n                  value={tokenAmount}\n                  onChange={handleTokenAmountChange}\n                  className=\"text-lg\"\n                  placeholder=\"Enter token amount\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Minimum: 1 token ‚Ä¢ Maximum: 1,000 tokens\n                </p>\n              </div>\n\n              {/* Preset Amount Buttons */}\n              <div className=\"space-y-2\">\n                <Label>Quick Select</Label>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {presetAmounts.map((amount) => (\n                    <Button\n                      key={amount}\n                      variant={tokenAmount === amount ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setTokenAmount(amount)}\n                      className=\"w-full\"\n                    >\n                      {amount}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Price Summary */}\n              <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Tokens:</span>\n                  <span>{tokenAmount}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Price per token:</span>\n                  <span>‚Ç¶{pricing ? (pricing.pricePerToken / 100).toFixed(2) : '0.00'}</span>\n                </div>\n                <div className=\"border-t border-muted pt-2\">\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total Price:</span>\n                    <span className=\"text-red-600\">‚Ç¶{totalPriceInNaira.toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Purchase Button */}\n              <Button\n                className=\"w-full text-lg py-6\"\n                onClick={handleCustomPurchase}\n                disabled={loading || !pricing || tokenAmount <= 0}\n                size=\"lg\"\n              >\n                {loading ? (\n                  \"Processing Payment...\"\n                ) : (\n                  <>\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Purchase {tokenAmount} Tokens for ‚Ç¶{totalPriceInNaira.toFixed(2)}\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* FinderToken‚Ñ¢ Usage Overview */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>FinderToken‚Ñ¢ Usage Overview</CardTitle>\n              <CardDescription>How FinderTokens power engagement on FinderMeister</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">For Finders:</h4>\n                  <ul className=\"text-sm text-blue-800 space-y-1\">\n                    <li>‚Ä¢ Every Find application requires 10 FinderTokens</li>\n                    <li>‚Ä¢ Boost your proposal visibility with premium features</li>\n                    <li>‚Ä¢ Access exclusive high-value find opportunities</li>\n                  </ul>\n                </div>\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-900 mb-2\">For Clients:</h4>\n                  <ul className=\"text-sm text-green-800 space-y-1\">\n                    <li>‚Ä¢ Posting high-budget finds (‚Ç¶100,000+) requires tokens</li>\n                    <li>‚Ä¢ Optional: Boost find visibility (50 FinderTokens)</li>\n                    <li>‚Ä¢ Get more serious, quality proposals</li>\n                  </ul>\n                </div>\n              </div>\n\n              <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-yellow-900 mb-2\">Why FinderTokens?</h4>\n                <p className=\"text-sm text-yellow-800\">\n                  FinderTokens ensure fairness, limit spam, and promote quality participation in the FinderMeister ecosystem.\n                  Clients gain more visibility and serious proposals, while Finders increase their chances of winning finds with strategic token use.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* How It Works */}\n          <Card>\n            <CardHeader>\n              <CardTitle>How the Process Works</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center text-sm font-bold shrink-0\">1</div>\n                <div>\n                  <h4 className=\"font-semibold\">Purchase Tokens</h4>\n                  <p className=\"text-sm text-muted-foreground\">Buy FinderTokens using secure Paystack payment integration</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center text-sm font-bold shrink-0\">2</div>\n                <div>\n                  <h4 className=\"font-semibold\">Submit Proposals</h4>\n                  <p className=\"text-sm text-muted-foreground\">Use 10 tokens per proposal to apply for finds that match your expertise</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center text-sm font-bold shrink-0\">3</div>\n                <div>\n                  <h4 className=\"font-semibold\">Win Contracts & Earn</h4>\n                  <p className=\"text-sm text-muted-foreground\">Get selected by clients, complete the work, and earn the full contract amount</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Flutterwave Payment Modal */}\n      <FlutterwavePaymentModal\n        isOpen={flutterwaveModal.isOpen}\n        onClose={() => setFlutterwaveModal(prev => ({ ...prev, isOpen: false }))}\n        packageId={flutterwaveModal.packageId}\n        packageName={flutterwaveModal.packageName}\n        packagePrice={flutterwaveModal.packagePrice}\n        tokenCount={flutterwaveModal.tokenCount}\n        onPaymentSuccess={handlePaymentSuccess}\n      />\n    </div>\n  );\n}","size_bytes":22869},"client/src/pages/finder/tokens.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Wallet, \n  Plus, \n  Minus, \n  Clock, \n  TrendingUp, \n  DollarSign,\n  CreditCard,\n  Zap,\n  Award\n} from \"lucide-react\";\nimport type { Transaction, TokenPackage } from \"@shared/schema\";\nimport { FlutterwavePaymentModal } from \"@/components/FlutterwavePaymentModal\";\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-NG', {\n    style: 'currency',\n    currency: 'NGN',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(numAmount);\n};\n\nexport default function FindertokenBalance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [purchasingPackage, setPurchasingPackage] = useState<string | null>(null);\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/finder/transactions'],\n    enabled: !!user\n  });\n\n  const { data: finder } = useQuery({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user\n  });\n\n  const { data: tokenPackages = [], isLoading: packagesLoading } = useQuery<TokenPackage[]>({\n    queryKey: ['/api/token-packages'],\n    enabled: !!user\n  });\n\n  const currentBalance = (finder as any)?.findertokenBalance || 0;\n  \n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'findertoken_purchase': return <Plus className=\"w-4 h-4 text-green-600\" />;\n      case 'proposal': return <Minus className=\"w-4 h-4 text-finder-red\" />;\n      case 'refund': return <Plus className=\"w-4 h-4 text-blue-600\" />;\n      default: return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'findertoken_purchase': return 'text-green-600';\n      case 'proposal': return 'text-finder-red';\n      case 'refund': return 'text-blue-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getTransactionSign = (type: string) => {\n    return type === 'findertoken_purchase' || type === 'refund' ? '+' : '';\n  };\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<'paystack' | 'flutterwave' | 'opay'>('paystack');\n  const [paymentModal, setPaymentModal] = useState({\n    isOpen: false,\n    packageId: '',\n    packageName: '',\n    packagePrice: 0,\n    tokenCount: 0\n  });\n\n  const handlePurchase = (tokenPackage: TokenPackage, method: 'paystack' | 'flutterwave' | 'opay') => {\n    if (!user) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to purchase tokens\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setPaymentModal({\n      isOpen: true,\n      packageId: tokenPackage.id,\n      packageName: tokenPackage.name,\n      packagePrice: typeof tokenPackage.price === 'string' ? parseFloat(tokenPackage.price) : tokenPackage.price,\n      tokenCount: tokenPackage.tokenCount\n    });\n    setSelectedPaymentMethod(method);\n  };\n\n  if (transactionsLoading || packagesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading findertoken balance...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n      \n      <div className=\"max-w-4xl mx-auto py-6 sm:py-8 px-4 sm:px-6\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Findertoken Balance</h1>\n          <p className=\"text-gray-600 text-sm sm:text-base\">Manage your proposal findertokens and view transaction history</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Balance Overview */}\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Current Balance</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{currentBalance}</p>\n                    <p className=\"text-sm text-gray-500\">Proposal Findertokens</p>\n                  </div>\n                  <div className=\"p-3 bg-finder-red/20 rounded-full\">\n                    <Wallet className=\"w-6 h-6 text-finder-red\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Findertokens Used</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {transactions.filter(t => t.type === 'proposal').reduce((sum, t) => sum + Math.abs(t.amount), 0)}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">For Proposals</p>\n                  </div>\n                  <div className=\"p-3 bg-yellow-100 rounded-full\">\n                    <TrendingUp className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Purchased</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {transactions.filter(t => t.type === 'findertoken_purchase').reduce((sum, t) => sum + t.amount, 0)}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">Lifetime</p>\n                  </div>\n                  <div className=\"p-3 bg-green-100 rounded-full\">\n                    <Award className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Purchase Tokens */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                Purchase Findertokens\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {tokenPackages.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Zap className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No packages available</h3>\n                  <p className=\"text-gray-600\">Check back later for token packages</p>\n                </div>\n              ) : (\n                <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {tokenPackages.map((tokenPackage, index) => (\n                    <Card \n                      key={tokenPackage.id} \n                      className={`border-2 hover:border-finder-red/30 cursor-pointer transition-colors ${\n                        index === 1 ? 'border-finder-red/30 bg-finder-red/10 relative' : ''\n                      }`}\n                    >\n                      {index === 1 && (\n                        <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\">\n                          <Badge className=\"bg-finder-red\">Most Popular</Badge>\n                        </div>\n                      )}\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                          {tokenPackage.tokenCount} Findertokens\n                        </div>\n                        <div className=\"text-lg font-semibold text-finder-red mb-2\">\n                          {formatCurrency(tokenPackage.price)}\n                        </div>\n                        <div className=\"text-sm text-gray-600 mb-3\">\n                          {tokenPackage.description || `Submit ${tokenPackage.tokenCount} proposals`}\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Button \n                            className=\"w-full bg-finder-red hover:bg-finder-red-dark\"\n                            onClick={() => handlePurchase(tokenPackage, 'paystack')}\n                            disabled={purchasingPackage === tokenPackage.id}\n                          >\n                            {purchasingPackage === tokenPackage.id ? \"Processing...\" : \"Pay with Paystack\"}\n                          </Button>\n                          <div className=\"grid grid-cols-2 gap-2\">\n                            <Button \n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePurchase(tokenPackage, 'flutterwave')}\n                              className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n                            >\n                              Flutterwave\n                            </Button>\n                            <Button \n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePurchase(tokenPackage, 'opay')}\n                              className=\"text-green-600 border-green-300 hover:bg-green-50\"\n                            >\n                              Opay\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n              <div className=\"text-sm text-gray-600 bg-blue-50 p-4 rounded-lg\">\n                <strong>Note:</strong> Each proposal submission costs findertokens as set by platform administrators. \n                Findertokens are non-refundable once used for proposals, but unused findertokens never expire.\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Transaction History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Findertoken History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {transactions.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Wallet className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No transactions yet</h3>\n                  <p className=\"text-gray-600\">Your token purchases and usage will appear here</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {transactions.map((transaction) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        {getTransactionIcon(transaction.type)}\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{transaction.description}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {new Date(transaction.createdAt || \"\").toLocaleDateString()} at{\" \"}\n                            {new Date(transaction.createdAt || \"\").toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`text-lg font-semibold ${getTransactionColor(transaction.type)}`}>\n                          {getTransactionSign(transaction.type)}{Math.abs(transaction.amount)} findertokens\n                        </p>\n                        <Badge variant={\n                          transaction.type === 'findertoken_purchase' ? 'default' :\n                          transaction.type === 'proposal' ? 'destructive' : 'secondary'\n                        }>\n                          {transaction.type.replace('findertoken_', '')}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Payment Modals */}\n      {selectedPaymentMethod === 'flutterwave' && (\n        <FlutterwavePaymentModal\n          isOpen={paymentModal.isOpen}\n          onClose={() => setPaymentModal({ ...paymentModal, isOpen: false })}\n          packageId={paymentModal.packageId}\n          packageName={paymentModal.packageName}\n          packagePrice={paymentModal.packagePrice}\n          tokenCount={paymentModal.tokenCount}\n          onPaymentSuccess={() => {\n            toast({\n              title: \"Payment successful!\",\n              description: `${paymentModal.tokenCount} FinderTokens have been added to your account.`,\n            });\n            setPaymentModal({ ...paymentModal, isOpen: false });\n            // Refresh data\n            window.location.reload();\n          }}\n        />\n      )}\n\n      \n    </div>\n  );\n}","size_bytes":14031},"client/src/pages/finder/withdrawals.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CreditCard, Clock, DollarSign, AlertCircle } from \"lucide-react\";\nimport type { WithdrawalRequest } from \"@shared/schema\";\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nexport default function WithdrawalSettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    bankName: \"\",\n    accountNumber: \"\",\n    accountHolder: \"\",\n    routingNumber: \"\"\n  });\n\n  const { data: withdrawalSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: ['/api/finder/withdrawal-settings'],\n    enabled: !!user\n  });\n\n  const { data: withdrawalHistory = [], isLoading: historyLoading } = useQuery<WithdrawalRequest[]>({\n    queryKey: ['/api/finder/withdrawals'],\n    enabled: !!user\n  });\n\n  const { data: finder } = useQuery({\n    queryKey: ['/api/finder/profile'],\n    enabled: !!user\n  });\n\n  const { data: pendingEarnings } = useQuery({\n    queryKey: ['/api/finder/pending-earnings'],\n    enabled: !!user\n  });\n\n  // Update form data when withdrawal settings change\n  useEffect(() => {\n    if (withdrawalSettings && withdrawalSettings.bankDetails) {\n      setFormData({\n        bankName: withdrawalSettings.bankDetails.bankName || \"\",\n        accountNumber: withdrawalSettings.bankDetails.accountNumber || \"\",\n        accountHolder: withdrawalSettings.bankDetails.accountHolder || \"\",\n        routingNumber: withdrawalSettings.bankDetails.routingNumber || \"\"\n      });\n    }\n  }, [withdrawalSettings]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/finder/withdrawal-settings', {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finder/withdrawal-settings'] });\n      toast({\n        title: \"Settings updated\",\n        description: \"Your withdrawal settings have been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update withdrawal settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const requestWithdrawalMutation = useMutation({\n    mutationFn: (data: { amount: number; paymentDetails: any }) => apiRequest('/api/finder/withdraw', { \n      method: 'POST',\n      body: JSON.stringify({\n        amount: data.amount,\n        paymentMethod: 'Bank Transfer',\n        paymentDetails: data.paymentDetails\n      })\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finder/withdrawals'] });\n      toast({\n        title: \"Withdrawal requested\",\n        description: \"Your withdrawal request has been submitted for review.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to request withdrawal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateSettings = () => {\n    const settingsData = {\n      paymentMethod: \"bank_transfer\",\n      minimumThreshold: 50,\n      bankDetails: {\n        bankName: formData.bankName,\n        accountNumber: formData.accountNumber,\n        accountHolder: formData.accountHolder,\n        routingNumber: formData.routingNumber\n      }\n    };\n    updateSettingsMutation.mutate(settingsData);\n  };\n\n  const handleWithdrawalRequest = () => {\n    // Available balance is already in naira format\n    const availableBalance = Math.max(0, parseFloat(finder?.availableBalance || '0'));\n    const minimumThreshold = 50;\n\n    // Check if balance is sufficient for minimum threshold\n    if (availableBalance < minimumThreshold) {\n      toast({\n        title: \"Insufficient balance\",\n        description: `Minimum withdrawal amount is ‚Ç¶${minimumThreshold}. Available: ‚Ç¶${availableBalance.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate withdrawal fees (5% fee)\n    const feePercentage = 0.05;\n    const withdrawalFee = availableBalance * feePercentage;\n    const netAmount = availableBalance - withdrawalFee;\n\n    // Double check net amount is positive\n    if (netAmount <= 0) {\n      toast({\n        title: \"Insufficient balance\",\n        description: `Available balance after fees would be ‚Ç¶${netAmount.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentDetails = {\n      accountName: formData.accountHolder,\n      accountNumber: formData.accountNumber,\n      bankName: formData.bankName,\n      routingNumber: formData.routingNumber\n    };\n\n    requestWithdrawalMutation.mutate({ \n      amount: netAmount.toFixed(2),\n      paymentDetails\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved': return 'bg-green-100 text-green-700';\n      case 'processing': return 'bg-yellow-100 text-yellow-700';\n      case 'rejected': return 'bg-finder-red/20 text-finder-red-dark';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  if (settingsLoading || historyLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <FinderHeader />\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finder-red mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading withdrawal settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <FinderHeader />\n\n      <div className=\"max-w-4xl mx-auto py-6 sm:py-8 px-4 sm:px-6\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Withdrawal Settings</h1>\n          <p className=\"text-gray-600 text-sm sm:text-base\">Manage your bank account and withdrawal preferences</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n          {/* Available Balance */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col sm:items-center justify-between gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">Available Balance</h3>\n                  <p className=\"text-3xl font-bold text-green-600\">\n                    ‚Ç¶{(Math.max(0, parseFloat(finder?.availableBalance || '0')) / 100).toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pending Balance */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col sm:items-center justify-between gap-4\">\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5 text-gray-600\" />\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">Pending Balance</h3>\n                  </div>\n                  <p className=\"text-3xl font-bold text-yellow-600\">\n                    ‚Ç¶{(pendingEarnings?.netAmount || 0).toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    {pendingEarnings?.contractCount || 0} contract{(pendingEarnings?.contractCount || 0) !== 1 ? 's' : ''} awaiting release\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-6 grid gap-6\">\n          {/* Bank Account Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                Bank Account Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Bank Transfer Details */}\n              <div className=\"grid gap-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"bankName\">Bank Name</Label>\n                    <Input\n                      id=\"bankName\"\n                      value={formData.bankName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}\n                      placeholder=\"Enter bank name\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"accountHolder\">Account Holder Name</Label>\n                    <Input\n                      id=\"accountHolder\"\n                      value={formData.accountHolder}\n                      onChange={(e) => setFormData(prev => ({ ...prev, accountHolder: e.target.value }))}\n                      placeholder=\"Enter account holder name\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"accountNumber\">Account Number</Label>\n                    <Input\n                      id=\"accountNumber\"\n                      value={formData.accountNumber}\n                      onChange={(e) => setFormData(prev => ({ ...prev, accountNumber: e.target.value }))}\n                      placeholder=\"Enter account number\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"routingNumber\">Routing Number</Label>\n                    <Input\n                      id=\"routingNumber\"\n                      value={formData.routingNumber}\n                      onChange={(e) => setFormData(prev => ({ ...prev, routingNumber: e.target.value }))}\n                      placeholder=\"Enter routing number\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Update Button */}\n              <div className=\"pt-4 border-t\">\n                <Button \n                  onClick={handleUpdateSettings}\n                  disabled={updateSettingsMutation.isPending}\n                  className=\"bg-finder-red hover:bg-finder-red-dark w-full sm:w-auto\"\n                >\n                  {updateSettingsMutation.isPending ? \"Updating...\" : \"Update Settings\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Withdrawal Request Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                Request Withdrawal\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"text-sm font-medium text-blue-900 mb-1\">Withdrawal Information</h4>\n                    <ul className=\"text-sm text-blue-700 space-y-1\">\n                      <li>‚Ä¢ Minimum withdrawal amount: ‚Ç¶50.00</li>\n                      <li>‚Ä¢ 5% processing fee will be deducted</li>\n                      <li>‚Ä¢ Withdrawals are processed within 1-3 business days</li>\n                      <li>‚Ä¢ Ensure your bank details are correct before requesting</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              {/* Available Balance Display */}\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-green-700\">Available for Withdrawal</p>\n                    <p className=\"text-2xl font-bold text-green-800\">\n                      ‚Ç¶{(Math.max(0, parseFloat(finder?.availableBalance || '0')) / 100).toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                    </p>\n                  </div>\n                  <CreditCard className=\"w-8 h-8 text-green-600\" />\n                </div>\n              </div>\n\n              {/* Withdrawal Button */}\n              <div className=\"space-y-4\">\n                {(!formData.bankName || !formData.accountNumber || !formData.accountHolder) ? (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"w-5 h-5 text-yellow-600\" />\n                      <p className=\"text-sm text-yellow-800\">\n                        Please complete your bank account settings above before requesting a withdrawal.\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <Button \n                    onClick={handleWithdrawalRequest}\n                    disabled={requestWithdrawalMutation.isPending || (Math.max(0, parseFloat(finder?.availableBalance || '0')) < 50)}\n                    className=\"w-full bg-finder-red hover:bg-finder-red-dark text-white py-3\"\n                    size=\"lg\"\n                  >\n                    {requestWithdrawalMutation.isPending ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                        Processing...\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        <DollarSign className=\"w-4 h-4\" />\n                        Request Withdrawal of Full Balance\n                      </div>\n                    )}\n                  </Button>\n                )}\n\n                {(Math.max(0, parseFloat(finder?.availableBalance || '0')) < 5000) && (\n                  <p className=\"text-sm text-gray-600 text-center\">\n                    Minimum withdrawal amount is ‚Ç¶50.00\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Withdrawal History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5\" />\n                Withdrawal History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {withdrawalHistory.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <AlertCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No withdrawal history</h3>\n                  <p className=\"text-gray-600\">Your withdrawal requests will appear here once you make them.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Request ID</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Payment Method</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Requested At</TableHead>\n                        <TableHead>Processed At</TableHead>\n                        <TableHead>Notes</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {withdrawalHistory.map((withdrawal) => (\n                        <TableRow key={withdrawal.id}>\n                          <TableCell>\n                            <Badge variant=\"outline\" className=\"font-mono\">\n                              {withdrawal.requestId || 'N/A'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>‚Ç¶{parseFloat(withdrawal.amount).toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</TableCell>\n                          <TableCell>{withdrawal.paymentMethod}</TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(withdrawal.status)}>\n                              {withdrawal.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {withdrawal.requestedAt ? new Date(withdrawal.requestedAt).toLocaleDateString() : 'Unknown'}\n                          </TableCell>\n                          <TableCell>\n                            {withdrawal.processedAt ? new Date(withdrawal.processedAt).toLocaleDateString() : 'N/A'}\n                          </TableCell>\n                          <TableCell>\n                            {withdrawal.adminNotes || 'N/A'}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18190},"client/src/pages/support/contact.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { \n  Mail, \n  Phone, \n  MessageSquare, \n  Clock, \n  CheckCircle,\n  ArrowLeft,\n  Home,\n  Send,\n  MapPin,\n  Globe,\n  Headphones,\n  MessageCircle,\n  Facebook,\n  Twitter,\n  Instagram,\n  Linkedin\n} from \"lucide-react\";\n\nconst supportCategories = [\n  { value: \"account\", label: \"Account Issues\" },\n  { value: \"billing\", label: \"Billing & Payments\" },\n  { value: \"technical\", label: \"Technical Problems\" },\n  { value: \"proposals\", label: \"Proposals & Contracts\" },\n  { value: \"messaging\", label: \"Messaging Issues\" },\n  { value: \"feature\", label: \"Feature Request\" },\n  { value: \"other\", label: \"Other\" }\n];\n\nconst priorityLevels = [\n  { value: \"low\", label: \"Low - General question\", color: \"text-green-600\", bg: \"bg-green-50\", border: \"border-green-200\" },\n  { value: \"medium\", label: \"Medium - Account issue\", color: \"text-yellow-600\", bg: \"bg-yellow-50\", border: \"border-yellow-200\" },\n  { value: \"high\", label: \"High - Can't access service\", color: \"text-orange-600\", bg: \"bg-orange-50\", border: \"border-orange-200\" },\n  { value: \"urgent\", label: \"Urgent - Payment/security issue\", color: \"text-red-600\", bg: \"bg-red-50\", border: \"border-red-200\" }\n];\n\nexport default function ContactSupport() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: user?.firstName + \" \" + user?.lastName || \"\",\n    email: user?.email || \"\",\n    category: \"\",\n    priority: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n\n  // Fetch contact settings\n  const { data: contactSettings } = useQuery({\n    queryKey: ['/api/contact-settings'],\n  });\n\n  const submitTicket = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await fetch(\"/api/support/tickets\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error(\"Failed to submit ticket\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Support ticket submitted\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({\n        name: user?.firstName + \" \" + user?.lastName || \"\",\n        email: user?.email || \"\",\n        category: \"\",\n        priority: \"\",\n        subject: \"\",\n        message: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit support ticket. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitTicket.mutate(formData);\n  };\n\n  const updateFormData = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const selectedPriority = priorityLevels.find(p => p.value === formData.priority);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n      {/* Header */}\n      <div className=\"bg-white/95 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6\">\n          <div className=\"flex items-center justify-between h-14 sm:h-16\">\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <Link href=\"/support\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-gray-900 p-2\">\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline ml-2\">Back</span>\n                </Button>\n              </Link>\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <div className=\"w-7 h-7 sm:w-8 sm:h-8 bg-finder-red rounded-lg flex items-center justify-center\">\n                  <MessageSquare className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <h1 className=\"text-lg sm:text-xl font-semibold text-gray-900\">Contact Support</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"border-gray-300 text-xs sm:text-sm\">\n                  <Home className=\"w-4 h-4 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Home</span>\n                </Button>\n              </Link>\n              {user && (\n                <Link href={user.role === 'admin' ? '/admin/dashboard' : user.role === 'finder' ? '/finder/dashboard' : '/client/dashboard'}>\n                  <Button size=\"sm\" className=\"bg-finder-red hover:bg-finder-red/90 text-xs sm:text-sm\">\n                    Dashboard\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-finder-red to-red-600 text-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-8 sm:py-12\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 bg-white/20 rounded-full mb-4 sm:mb-6\">\n              <Headphones className=\"w-8 h-8 sm:w-10 sm:h-10\" />\n            </div>\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 sm:mb-4\">Get Help & Support</h2>\n            <p className=\"text-base sm:text-lg text-red-100 max-w-2xl mx-auto\">\n              Submit a support ticket and we'll get back to you as soon as possible\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 lg:gap-8\">\n          {/* Contact Form */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n              <CardHeader className=\"pb-4 sm:pb-6\">\n                <CardTitle className=\"flex items-center text-lg sm:text-xl\">\n                  <Send className=\"w-5 h-5 mr-2 text-finder-red\" />\n                  Submit a Support Ticket\n                </CardTitle>\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Fill out the form below and our support team will assist you\n                </p>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <form onSubmit={handleSubmit} className=\"space-y-5 sm:space-y-6\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-5\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">Full Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => updateFormData(\"name\", e.target.value)}\n                        className=\"mt-1.5 h-10 sm:h-11\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => updateFormData(\"email\", e.target.value)}\n                        className=\"mt-1.5 h-10 sm:h-11\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-5\">\n                    <div>\n                      <Label htmlFor=\"category\" className=\"text-sm font-medium text-gray-700\">Category</Label>\n                      <Select value={formData.category} onValueChange={(value) => updateFormData(\"category\", value)}>\n                        <SelectTrigger className=\"mt-1.5 h-10 sm:h-11\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {supportCategories.map((category) => (\n                            <SelectItem key={category.value} value={category.value}>\n                              {category.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"priority\" className=\"text-sm font-medium text-gray-700\">Priority Level</Label>\n                      <Select value={formData.priority} onValueChange={(value) => updateFormData(\"priority\", value)}>\n                        <SelectTrigger className={`mt-1.5 h-10 sm:h-11 ${selectedPriority ? `${selectedPriority.bg} ${selectedPriority.border}` : ''}`}>\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {priorityLevels.map((priority) => (\n                            <SelectItem key={priority.value} value={priority.value}>\n                              <span className={priority.color}>{priority.label}</span>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"subject\" className=\"text-sm font-medium text-gray-700\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      value={formData.subject}\n                      onChange={(e) => updateFormData(\"subject\", e.target.value)}\n                      placeholder=\"Brief description of your issue\"\n                      className=\"mt-1.5 h-10 sm:h-11\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"message\" className=\"text-sm font-medium text-gray-700\">Message</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={formData.message}\n                      onChange={(e) => updateFormData(\"message\", e.target.value)}\n                      placeholder=\"Provide detailed information about your issue...\"\n                      rows={5}\n                      className=\"mt-1.5 resize-none\"\n                      required\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-finder-red hover:bg-finder-red/90 h-11 sm:h-12 text-sm sm:text-base font-medium\"\n                    disabled={submitTicket.isPending}\n                  >\n                    {submitTicket.isPending ? (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin mr-2\" />\n                        Submitting...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        Submit Support Ticket\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar Info */}\n          <div className=\"lg:col-span-2 space-y-5 sm:space-y-6\">\n            {/* Contact Methods */}\n            <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg flex items-center\">\n                  <MessageCircle className=\"w-5 h-5 mr-2 text-finder-red\" />\n                  Contact Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-4\">\n                <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-blue-50/50 border border-blue-100\">\n                  <Mail className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                  <div className=\"min-w-0\">\n                    <p className=\"font-medium text-gray-900 text-sm\">Email Support</p>\n                    <p className=\"text-sm text-gray-600 break-all\">{contactSettings?.supportEmail || \"findermeisterinnovations@gmail.com\"}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">Response within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-green-50/50 border border-green-100\">\n                  <Phone className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                  <div className=\"min-w-0\">\n                    <p className=\"font-medium text-gray-900 text-sm\">Phone Support</p>\n                    <p className=\"text-sm text-gray-600\">{contactSettings?.supportPhone || \"+234-7039391065\"}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">{contactSettings?.businessHours || \"Mon-Fri, 9 AM - 6 PM WAT\"}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-purple-50/50 border border-purple-100\">\n                  <MapPin className=\"w-5 h-5 text-purple-600 mt-0.5 flex-shrink-0\" />\n                  <div className=\"min-w-0\">\n                    <p className=\"font-medium text-gray-900 text-sm\">Office Address</p>\n                    <p className=\"text-sm text-gray-600\">{contactSettings?.officeAddress || \"18 Back of Road safety office, Moniya, Ibadan\"}</p>\n                  </div>\n                </div>\n\n                {contactSettings?.whatsappNumber && (\n                  <div className=\"flex items-start space-x-3 p-3 rounded-lg bg-green-50/50 border border-green-100\">\n                    <MessageSquare className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"min-w-0\">\n                      <p className=\"font-medium text-gray-900 text-sm\">WhatsApp</p>\n                      <p className=\"text-sm text-gray-600\">{contactSettings.whatsappNumber}</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Response Times */}\n            <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center text-lg\">\n                  <Clock className=\"w-5 h-5 mr-2 text-finder-red\" />\n                  Response Times\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                <div className=\"flex items-center justify-between p-2 rounded-lg bg-green-50/50\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium text-gray-900\">Low Priority</span>\n                  </div>\n                  <span className=\"text-sm text-gray-600\">{contactSettings?.responseTimeLow || \"2-3 business days\"}</span>\n                </div>\n                <div className=\"flex items-center justify-between p-2 rounded-lg bg-yellow-50/50\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium text-gray-900\">Medium Priority</span>\n                  </div>\n                  <span className=\"text-sm text-gray-600\">{contactSettings?.responseTimeMedium || \"1-2 business days\"}</span>\n                </div>\n                <div className=\"flex items-center justify-between p-2 rounded-lg bg-orange-50/50\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-orange-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium text-gray-900\">High Priority</span>\n                  </div>\n                  <span className=\"text-sm text-gray-600\">{contactSettings?.responseTimeHigh || \"4-8 hours\"}</span>\n                </div>\n                <div className=\"flex items-center justify-between p-2 rounded-lg bg-red-50/50\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <span className=\"text-sm font-medium text-gray-900\">Urgent Priority</span>\n                  </div>\n                  <span className=\"text-sm text-gray-600\">{contactSettings?.responseTimeUrgent || \"1-2 hours\"}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Social Media Links */}\n            {contactSettings && (contactSettings.facebookUrl || contactSettings.twitterUrl || contactSettings.instagramUrl || contactSettings.linkedinUrl) && (\n              <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <Globe className=\"w-5 h-5 mr-2 text-finder-red\" />\n                    Follow Us\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex flex-wrap gap-3\">\n                    {contactSettings.facebookUrl && (\n                      <a \n                        href={contactSettings.facebookUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center space-x-2 px-3 py-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors\"\n                      >\n                        <Facebook className=\"w-4 h-4 text-blue-600\" />\n                        <span className=\"text-sm text-blue-600\">Facebook</span>\n                      </a>\n                    )}\n                    {contactSettings.twitterUrl && (\n                      <a \n                        href={contactSettings.twitterUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center space-x-2 px-3 py-2 bg-sky-50 hover:bg-sky-100 rounded-lg transition-colors\"\n                      >\n                        <Twitter className=\"w-4 h-4 text-sky-600\" />\n                        <span className=\"text-sm text-sky-600\">Twitter</span>\n                      </a>\n                    )}\n                    {contactSettings.instagramUrl && (\n                      <a \n                        href={contactSettings.instagramUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center space-x-2 px-3 py-2 bg-pink-50 hover:bg-pink-100 rounded-lg transition-colors\"\n                      >\n                        <Instagram className=\"w-4 h-4 text-pink-600\" />\n                        <span className=\"text-sm text-pink-600\">Instagram</span>\n                      </a>\n                    )}\n                    {contactSettings.linkedinUrl && (\n                      <a \n                        href={contactSettings.linkedinUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center space-x-2 px-3 py-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors\"\n                      >\n                        <Linkedin className=\"w-4 h-4 text-blue-700\" />\n                        <span className=\"text-sm text-blue-700\">LinkedIn</span>\n                      </a>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* System Status */}\n            <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center text-lg\">\n                  <CheckCircle className=\"w-5 h-5 mr-2 text-finder-red\" />\n                  System Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-2 rounded-lg bg-green-50/50\">\n                    <span className=\"text-sm font-medium text-gray-900\">Platform Status</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-xs text-green-600 font-medium\">Operational</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 rounded-lg bg-green-50/50\">\n                    <span className=\"text-sm font-medium text-gray-900\">Payment System</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-xs text-green-600 font-medium\">Operational</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 rounded-lg bg-green-50/50\">\n                    <span className=\"text-sm font-medium text-gray-900\">Messaging System</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-xs text-green-600 font-medium\">Operational</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22672},"client/src/pages/support/help-center.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  User, \n  FileText, \n  CreditCard, \n  Shield, \n  MessageSquare,\n  ChevronRight,\n  HelpCircle,\n  Phone,\n  Mail,\n  Clock\n} from \"lucide-react\";\nimport type { FAQ } from \"@shared/schema\";\n\n\n\nconst categories = [\n  { name: \"Getting Started\", icon: User, color: \"bg-blue-100 text-blue-800\" },\n  { name: \"Tokens & Payments\", icon: CreditCard, color: \"bg-green-100 text-green-800\" },\n  { name: \"Communication\", icon: MessageSquare, color: \"bg-purple-100 text-purple-800\" },\n  { name: \"Work Completion\", icon: FileText, color: \"bg-orange-100 text-orange-800\" },\n  { name: \"Account Management\", icon: Shield, color: \"bg-gray-100 text-gray-800\" },\n  { name: \"Gamification\", icon: HelpCircle, color: \"bg-indigo-100 text-indigo-800\" }\n];\n\nexport default function HelpCenter() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);\n\n  const { data: faqs = [], isLoading } = useQuery<FAQ[]>({\n    queryKey: ['/api/public/faqs'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const filteredFAQs = faqs.filter(faq => {\n    // Only show active FAQs to public\n    if (!faq.isActive) return false;\n    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = !selectedCategory || faq.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-6xl mx-auto px-6 py-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Help Center</h1>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Find answers to common questions and get support for using FinderMeister\n            </p>\n            \n            {/* Search */}\n            <div className=\"max-w-2xl mx-auto relative\">\n              <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-gray-400\" />\n              <Input\n                placeholder=\"Search for help articles, FAQs, or guides...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-12 py-6 text-lg\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>Categories</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button\n                  variant={selectedCategory === null ? \"default\" : \"ghost\"}\n                  className=\"w-full justify-start\"\n                  onClick={() => setSelectedCategory(null)}\n                >\n                  All Categories\n                </Button>\n                {categories.map((category) => {\n                  const Icon = category.icon;\n                  return (\n                    <Button\n                      key={category.name}\n                      variant={selectedCategory === category.name ? \"default\" : \"ghost\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => setSelectedCategory(category.name)}\n                    >\n                      <Icon className=\"w-4 h-4 mr-2\" />\n                      {category.name}\n                    </Button>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Quick Contact */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Phone className=\"w-5 h-5 mr-2\" />\n                  Need More Help?\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 text-sm\">\n                  <Mail className=\"w-4 h-4 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Email Support</p>\n                    <p className=\"text-gray-600\">support@findermeister.com</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 text-sm\">\n                  <Clock className=\"w-4 h-4 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Response Time</p>\n                    <p className=\"text-gray-600\">Within 24 hours</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {/* Category Overview */}\n            {!selectedCategory && !searchTerm && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Browse by Category</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {categories.map((category) => {\n                    const Icon = category.icon;\n                    const categoryFAQs = faqs.filter(faq => faq.category === category.name);\n                    return (\n                      <Card \n                        key={category.name}\n                        className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                        onClick={() => setSelectedCategory(category.name)}\n                      >\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`p-2 rounded-lg ${category.color}`}>\n                                <Icon className=\"w-5 h-5\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-gray-900\">{category.name}</h3>\n                                <p className=\"text-sm text-gray-600\">{categoryFAQs.length} articles</p>\n                              </div>\n                            </div>\n                            <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* FAQ Results */}\n            <div>\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  {selectedCategory ? `${selectedCategory} FAQs` : 'Frequently Asked Questions'}\n                </h2>\n                {selectedCategory && (\n                  <Button variant=\"outline\" onClick={() => setSelectedCategory(null)}>\n                    Show All Categories\n                  </Button>\n                )}\n              </div>\n\n              {filteredFAQs.length === 0 ? (\n                <Card>\n                  <CardContent className=\"py-12 text-center\">\n                    <HelpCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No results found</h3>\n                    <p className=\"text-gray-600 mb-6\">\n                      Try adjusting your search terms or browse by category.\n                    </p>\n                    <Button onClick={() => { setSearchTerm(\"\"); setSelectedCategory(null); }}>\n                      Reset Search\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredFAQs.map((faq) => {\n                    const category = categories.find(c => c.name === faq.category);\n                    return (\n                      <Card key={faq.id}>\n                        <CardHeader \n                          className=\"cursor-pointer\"\n                          onClick={() => setExpandedFAQ(expandedFAQ === faq.id ? null : faq.id)}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <CardTitle className=\"text-lg text-gray-900 mb-2\">\n                                {faq.question}\n                              </CardTitle>\n                              <div className=\"flex items-center space-x-2\">\n                                {category && (\n                                  <Badge className={category.color}>\n                                    {faq.category}\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                            <ChevronRight \n                              className={`w-5 h-5 text-gray-400 transition-transform ${\n                                expandedFAQ === faq.id ? 'rotate-90' : ''\n                              }`}\n                            />\n                          </div>\n                        </CardHeader>\n                        {expandedFAQ === faq.id && (\n                          <CardContent>\n                            <p className=\"text-gray-700 leading-relaxed\">\n                              {faq.answer}\n                            </p>\n                          </CardContent>\n                        )}\n                      </Card>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10437},"client/src/pages/support/index.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  HelpCircle, \n  MessageSquare, \n  FileText, \n  Shield, \n  Users,\n  ArrowRight,\n  Search,\n  BookOpen,\n  Headphones,\n  Clock\n} from \"lucide-react\";\n\nexport default function SupportIndex() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-finder-red rounded-lg flex items-center justify-center\">\n                <HelpCircle className=\"w-5 h-5 text-white\" />\n              </div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Support Center</h1>\n            </div>\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"border-gray-300\">\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold text-gray-900 mb-4\">\n            How can we help you?\n          </h1>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            Get instant answers, contact our support team, or explore our comprehensive help resources\n          </p>\n        </div>\n\n        {/* Quick Support Options */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-12\">\n          {/* Help Center */}\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 group\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-start space-x-4 mb-6\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <BookOpen className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors\">\n                    Help Center\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Find answers to common questions about using FinderMeister, managing proposals, payments, and more.\n                  </p>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-6\">\n                    <div className=\"flex items-center\">\n                      <Search className=\"w-4 h-4 mr-1\" />\n                      <span>Searchable</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <FileText className=\"w-4 h-4 mr-1\" />\n                      <span>50+ Articles</span>\n                    </div>\n                  </div>\n                  <Link href=\"/support/help-center\">\n                    <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                      Browse Help Center\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact Support */}\n          <Card className=\"bg-white border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 group\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-start space-x-4 mb-6\">\n                <div className=\"w-12 h-12 bg-finder-red/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Headphones className=\"w-6 h-6 text-finder-red\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2 group-hover:text-finder-red transition-colors\">\n                    Contact Support\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Submit a support ticket for account issues, technical problems, or billing questions with priority support.\n                  </p>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-6\">\n                    <div className=\"flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      <span>24h Response</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Shield className=\"w-4 h-4 mr-1\" />\n                      <span>Secure</span>\n                    </div>\n                  </div>\n                  <Link href=\"/support/contact\">\n                    <Button className=\"bg-finder-red hover:bg-finder-red/90 text-white\">\n                      Contact Support\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Popular Topics */}\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-sm p-8 mb-8\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-6 text-center\">Popular Topics</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Link href=\"/support/help-center\">\n              <Card className=\"border border-gray-200 hover:border-gray-300 hover:shadow-sm transition-all duration-200 cursor-pointer group\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-10 h-10 bg-finder-red/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <Users className=\"w-5 h-5 text-finder-red\" />\n                  </div>\n                  <h3 className=\"font-medium text-sm text-gray-900 group-hover:text-finder-red transition-colors\">Getting Started</h3>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/support/help-center\">\n              <Card className=\"border border-gray-200 hover:border-gray-300 hover:shadow-sm transition-all duration-200 cursor-pointer group\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <FileText className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <h3 className=\"font-medium text-sm text-gray-900 group-hover:text-blue-600 transition-colors\">Proposals & Contracts</h3>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/support/help-center\">\n              <Card className=\"border border-gray-200 hover:border-gray-300 hover:shadow-sm transition-all duration-200 cursor-pointer group\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <MessageSquare className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <h3 className=\"font-medium text-sm text-gray-900 group-hover:text-green-600 transition-colors\">Messaging</h3>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/support/help-center\">\n              <Card className=\"border border-gray-200 hover:border-gray-300 hover:shadow-sm transition-all duration-200 cursor-pointer group\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <Shield className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <h3 className=\"font-medium text-sm text-gray-900 group-hover:text-purple-600 transition-colors\">Payments & Security</h3>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </div>\n\n        {/* System Status */}\n        <div className=\"text-center\">\n          <Card className=\"bg-green-50 border border-green-200 inline-block\">\n            <CardContent className=\"p-4 flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-700 font-medium\">All systems operational</span>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8809},"README.md":{"content":"# Alaja\nFoe\n","size_bytes":12},"client/src/pages/admin/contact-settings.tsx":{"content":"\nimport React, { useState, useTransition } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminHeader from \"@/components/admin-header\";\nimport type { ContactSettings } from \"@shared/schema\";\nimport { \n  Save,\n  Mail,\n  Phone,\n  MapPin,\n  Clock,\n  Facebook,\n  Twitter,\n  Instagram,\n  MessageCircle,\n  Linkedin,\n  Settings\n} from \"lucide-react\";\n\nexport default function AdminContactSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isPending, startTransition] = useTransition();\n\n  const { data: settings, isLoading } = useQuery<ContactSettings>({\n    queryKey: ['/api/admin/contact-settings'],\n  });\n\n  const [formData, setFormData] = useState({\n    supportEmail: \"\",\n    supportPhone: \"\",\n    officeAddress: \"\",\n    businessHours: \"\",\n    facebookUrl: \"\",\n    twitterUrl: \"\",\n    instagramUrl: \"\",\n    tiktokUrl: \"\",\n    linkedinUrl: \"\",\n    whatsappNumber: \"\",\n    responseTimeLow: \"\",\n    responseTimeMedium: \"\",\n    responseTimeHigh: \"\",\n    responseTimeUrgent: \"\"\n  });\n\n  // Update form data when settings are loaded\n  React.useEffect(() => {\n    if (settings) {\n      setFormData({\n        supportEmail: settings.supportEmail || \"\",\n        supportPhone: settings.supportPhone || \"\",\n        officeAddress: settings.officeAddress || \"\",\n        businessHours: settings.businessHours || \"\",\n        facebookUrl: settings.facebookUrl || \"\",\n        twitterUrl: settings.twitterUrl || \"\",\n        instagramUrl: settings.instagramUrl || \"\",\n        tiktokUrl: settings.tiktokUrl || \"\",\n        linkedinUrl: settings.linkedinUrl || \"\",\n        whatsappNumber: settings.whatsappNumber || \"\",\n        responseTimeLow: settings.responseTimeLow || \"\",\n        responseTimeMedium: settings.responseTimeMedium || \"\",\n        responseTimeHigh: settings.responseTimeHigh || \"\",\n        responseTimeUrgent: settings.responseTimeUrgent || \"\"\n      });\n    }\n  }, [settings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest('/api/admin/contact-settings', {\n        method: 'PUT',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/contact-settings'] });\n      toast({ title: \"Contact settings updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error updating contact settings\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    startTransition(() => {\n      updateMutation.mutate(formData);\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    startTransition(() => {\n      setFormData(prev => ({ ...prev, [field]: value }));\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"contact-settings\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading contact settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n      <AdminHeader currentPage=\"contact-settings\" />\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n            <Settings className=\"mr-3 h-8 w-8 text-blue-600\" />\n            Contact Settings\n          </h1>\n          <p className=\"text-gray-600\">Manage contact information displayed throughout the platform</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Contact Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Contact Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"supportEmail\">Support Email</Label>\n                <Input\n                  id=\"supportEmail\"\n                  type=\"email\"\n                  value={formData.supportEmail}\n                  onChange={(e) => handleInputChange('supportEmail', e.target.value)}\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"supportPhone\">Support Phone</Label>\n                <Input\n                  id=\"supportPhone\"\n                  value={formData.supportPhone}\n                  onChange={(e) => handleInputChange('supportPhone', e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"whatsappNumber\">WhatsApp Number</Label>\n                <Input\n                  id=\"whatsappNumber\"\n                  value={formData.whatsappNumber}\n                  onChange={(e) => handleInputChange('whatsappNumber', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"businessHours\">Business Hours</Label>\n                <Input\n                  id=\"businessHours\"\n                  value={formData.businessHours}\n                  onChange={(e) => handleInputChange('businessHours', e.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"officeAddress\">Office Address</Label>\n                <Textarea\n                  id=\"officeAddress\"\n                  value={formData.officeAddress}\n                  onChange={(e) => handleInputChange('officeAddress', e.target.value)}\n                  rows={2}\n                  required\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Social Media Links */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Facebook className=\"w-5 h-5 mr-2\" />\n                Social Media Links\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"facebookUrl\" className=\"flex items-center\">\n                  <Facebook className=\"w-4 h-4 mr-2\" />\n                  Facebook URL\n                </Label>\n                <Input\n                  id=\"facebookUrl\"\n                  type=\"url\"\n                  value={formData.facebookUrl}\n                  onChange={(e) => handleInputChange('facebookUrl', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"twitterUrl\" className=\"flex items-center\">\n                  <Twitter className=\"w-4 h-4 mr-2\" />\n                  Twitter/X URL\n                </Label>\n                <Input\n                  id=\"twitterUrl\"\n                  type=\"url\"\n                  value={formData.twitterUrl}\n                  onChange={(e) => handleInputChange('twitterUrl', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"instagramUrl\" className=\"flex items-center\">\n                  <Instagram className=\"w-4 h-4 mr-2\" />\n                  Instagram URL\n                </Label>\n                <Input\n                  id=\"instagramUrl\"\n                  type=\"url\"\n                  value={formData.instagramUrl}\n                  onChange={(e) => handleInputChange('instagramUrl', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"tiktokUrl\" className=\"flex items-center\">\n                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                  TikTok URL\n                </Label>\n                <Input\n                  id=\"tiktokUrl\"\n                  type=\"url\"\n                  value={formData.tiktokUrl}\n                  onChange={(e) => handleInputChange('tiktokUrl', e.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"linkedinUrl\" className=\"flex items-center\">\n                  <Linkedin className=\"w-4 h-4 mr-2\" />\n                  LinkedIn URL\n                </Label>\n                <Input\n                  id=\"linkedinUrl\"\n                  type=\"url\"\n                  value={formData.linkedinUrl}\n                  onChange={(e) => handleInputChange('linkedinUrl', e.target.value)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Response Times */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Support Response Times\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"responseTimeLow\">Low Priority</Label>\n                <Input\n                  id=\"responseTimeLow\"\n                  value={formData.responseTimeLow}\n                  onChange={(e) => handleInputChange('responseTimeLow', e.target.value)}\n                  placeholder=\"e.g., 2-3 business days\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"responseTimeMedium\">Medium Priority</Label>\n                <Input\n                  id=\"responseTimeMedium\"\n                  value={formData.responseTimeMedium}\n                  onChange={(e) => handleInputChange('responseTimeMedium', e.target.value)}\n                  placeholder=\"e.g., 1-2 business days\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"responseTimeHigh\">High Priority</Label>\n                <Input\n                  id=\"responseTimeHigh\"\n                  value={formData.responseTimeHigh}\n                  onChange={(e) => handleInputChange('responseTimeHigh', e.target.value)}\n                  placeholder=\"e.g., 4-8 hours\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"responseTimeUrgent\">Urgent Priority</Label>\n                <Input\n                  id=\"responseTimeUrgent\"\n                  value={formData.responseTimeUrgent}\n                  onChange={(e) => handleInputChange('responseTimeUrgent', e.target.value)}\n                  placeholder=\"e.g., 1-2 hours\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              type=\"submit\" \n              className=\"bg-blue-600 hover:bg-blue-700 px-8\"\n              disabled={updateMutation.isPending || isPending}\n            >\n              {updateMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Changes\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12046},"client/src/pages/admin/faq-categories.tsx":{"content":"\nimport { useState, startTransition } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminHeader from \"@/components/admin-header\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Plus,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  Tag,\n  Save,\n  Palette\n} from \"lucide-react\";\n\ntype FAQCategory = {\n  id: string;\n  name: string;\n  description?: string;\n  icon: string;\n  color: string;\n  sortOrder: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\n\nconst iconOptions = [\n  { value: \"HelpCircle\", label: \"Help Circle\" },\n  { value: \"User\", label: \"User\" },\n  { value: \"CreditCard\", label: \"Credit Card\" },\n  { value: \"MessageSquare\", label: \"Message\" },\n  { value: \"FileText\", label: \"File\" },\n  { value: \"Shield\", label: \"Shield\" },\n  { value: \"Settings\", label: \"Settings\" },\n  { value: \"Star\", label: \"Star\" },\n  { value: \"Zap\", label: \"Zap\" },\n  { value: \"Heart\", label: \"Heart\" }\n];\n\nconst colorOptions = [\n  { value: \"bg-blue-100 text-blue-800\", label: \"Blue\", preview: \"bg-blue-100\" },\n  { value: \"bg-green-100 text-green-800\", label: \"Green\", preview: \"bg-green-100\" },\n  { value: \"bg-purple-100 text-purple-800\", label: \"Purple\", preview: \"bg-purple-100\" },\n  { value: \"bg-orange-100 text-orange-800\", label: \"Orange\", preview: \"bg-orange-100\" },\n  { value: \"bg-gray-100 text-gray-800\", label: \"Gray\", preview: \"bg-gray-100\" },\n  { value: \"bg-indigo-100 text-indigo-800\", label: \"Indigo\", preview: \"bg-indigo-100\" },\n  { value: \"bg-red-100 text-red-800\", label: \"Red\", preview: \"bg-red-100\" },\n  { value: \"bg-yellow-100 text-yellow-800\", label: \"Yellow\", preview: \"bg-yellow-100\" }\n];\n\nexport default function AdminFAQCategories() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<FAQCategory | null>(null);\n\n  const { data: categories = [], isLoading } = useQuery<FAQCategory[]>({\n    queryKey: ['/api/admin/faq-categories'],\n    enabled: !!user && user.role === 'admin'\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (categoryData: any) => {\n      return apiRequest('/api/admin/faq-categories', {\n        method: 'POST',\n        body: JSON.stringify(categoryData)\n      });\n    },\n    onSuccess: () => {\n      startTransition(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/faq-categories'] });\n        toast({ title: \"FAQ category created successfully\" });\n        setIsCreateModalOpen(false);\n      });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error creating FAQ category\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, ...categoryData }: any) => {\n      return apiRequest(`/api/admin/faq-categories/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(categoryData)\n      });\n    },\n    onSuccess: () => {\n      startTransition(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/faq-categories'] });\n        toast({ title: \"FAQ category updated successfully\" });\n        setIsEditModalOpen(false);\n        setEditingCategory(null);\n      });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error updating FAQ category\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/admin/faq-categories/${id}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      startTransition(() => {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/faq-categories'] });\n        toast({ title: \"FAQ category deleted successfully\" });\n      });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error deleting FAQ category\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const CategoryForm = ({ category, onSubmit, isEditing = false }: { category?: FAQCategory, onSubmit: (data: any) => void, isEditing?: boolean }) => {\n    const [formData, setFormData] = useState({\n      name: category?.name || \"\",\n      description: category?.description || \"\",\n      icon: category?.icon || \"HelpCircle\",\n      color: category?.color || \"bg-blue-100 text-blue-800\",\n      sortOrder: category?.sortOrder || 0,\n      isActive: category?.isActive ?? true\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      startTransition(() => {\n        onSubmit({\n          ...formData,\n          ...(isEditing && { id: category?.id })\n        });\n      });\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"name\">Category Name</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"Enter category name\"\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            placeholder=\"Enter category description\"\n            rows={3}\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"icon\">Icon</Label>\n          <Select value={formData.icon} onValueChange={(value) => setFormData(prev => ({ ...prev, icon: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select icon\" />\n            </SelectTrigger>\n            <SelectContent>\n              {iconOptions.map(icon => (\n                <SelectItem key={icon.value} value={icon.value}>{icon.label}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"color\">Color Theme</Label>\n          <Select value={formData.color} onValueChange={(value) => setFormData(prev => ({ ...prev, color: value }))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select color\" />\n            </SelectTrigger>\n            <SelectContent>\n              {colorOptions.map(color => (\n                <SelectItem key={color.value} value={color.value}>\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-4 h-4 rounded ${color.preview}`}></div>\n                    {color.label}\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"sortOrder\">Sort Order</Label>\n          <Input\n            id=\"sortOrder\"\n            type=\"number\"\n            value={formData.sortOrder}\n            onChange={(e) => setFormData(prev => ({ ...prev, sortOrder: parseInt(e.target.value) || 0 }))}\n            placeholder=\"0\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"isActive\"\n            checked={formData.isActive}\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n          />\n          <Label htmlFor=\"isActive\">Active</Label>\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          {isEditing ? \"Update Category\" : \"Create Category\"}\n        </Button>\n      </form>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        <AdminHeader currentPage=\"faq-categories\" />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading FAQ categories...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n      <AdminHeader currentPage=\"faq-categories\" />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center\">\n                <Tag className=\"mr-3 h-8 w-8 text-blue-600\" />\n                FAQ Categories\n              </h1>\n              <p className=\"text-gray-600\">Manage categories for organizing FAQs</p>\n            </div>\n            <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Category\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New FAQ Category</DialogTitle>\n                </DialogHeader>\n                <CategoryForm onSubmit={(data) => createMutation.mutate(data)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Categories List */}\n        <div className=\"space-y-4\">\n          {categories.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <Tag className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No categories found</h3>\n                <p className=\"text-gray-600 mb-6\">Get started by creating your first FAQ category.</p>\n                <Button onClick={() => setIsCreateModalOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create First Category\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            categories.map((category) => (\n              <Card key={category.id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                        <Badge className={category.color}>\n                          {category.name}\n                        </Badge>\n                        {!category.isActive && (\n                          <Badge variant=\"secondary\">Inactive</Badge>\n                        )}\n                      </div>\n                      {category.description && (\n                        <p className=\"text-gray-600 text-sm mb-2\">{category.description}</p>\n                      )}\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                        <span>Icon: {category.icon}</span>\n                        <span>Sort Order: {category.sortOrder}</span>\n                        <span>Created: {new Date(category.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setEditingCategory(category);\n                          setIsEditModalOpen(true);\n                        }}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (confirm('Are you sure you want to delete this category?')) {\n                            deleteMutation.mutate(category.id);\n                          }\n                        }}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Edit Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit FAQ Category</DialogTitle>\n            </DialogHeader>\n            {editingCategory && (\n              <CategoryForm \n                category={editingCategory} \n                onSubmit={(data) => updateMutation.mutate(data)} \n                isEditing={true}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14088},"server/withdrawalService.ts":{"content":"\nimport { FlutterwaveService } from './flutterwaveService';\nimport { storage } from './storage';\nimport type { WithdrawalRequest } from '@shared/schema';\n\nexport interface WithdrawalProcessResult {\n  success: boolean;\n  withdrawalId: string;\n  transferId?: string;\n  reference?: string;\n  message: string;\n  error?: string;\n}\n\nexport class WithdrawalService {\n  private flutterwaveService: FlutterwaveService;\n\n  constructor() {\n    this.flutterwaveService = new FlutterwaveService();\n  }\n\n  async processWithdrawal(withdrawalId: string): Promise<WithdrawalProcessResult> {\n    try {\n      // Get withdrawal request\n      const withdrawal = await this.getWithdrawalById(withdrawalId);\n      if (!withdrawal) {\n        return {\n          success: false,\n          withdrawalId,\n          message: 'Withdrawal request not found',\n          error: 'WITHDRAWAL_NOT_FOUND'\n        };\n      }\n\n      if (withdrawal.status !== 'pending') {\n        return {\n          success: false,\n          withdrawalId,\n          message: `Withdrawal is already ${withdrawal.status}`,\n          error: 'INVALID_STATUS'\n        };\n      }\n\n      // Parse payment details\n      const paymentDetails = typeof withdrawal.paymentDetails === 'string' \n        ? JSON.parse(withdrawal.paymentDetails) \n        : withdrawal.paymentDetails;\n\n      if (!paymentDetails || !paymentDetails.accountNumber || !paymentDetails.bankName || !paymentDetails.accountHolder) {\n        return {\n          success: false,\n          withdrawalId,\n          message: 'Invalid payment details',\n          error: 'INVALID_PAYMENT_DETAILS'\n        };\n      }\n\n      // Get bank code\n      const bankCode = await this.flutterwaveService.getBankCode(paymentDetails.bankName);\n      if (!bankCode) {\n        return {\n          success: false,\n          withdrawalId,\n          message: `Bank code not found for ${paymentDetails.bankName}`,\n          error: 'BANK_CODE_NOT_FOUND'\n        };\n      }\n\n      // Generate transfer reference\n      const transferReference = this.flutterwaveService.generateTransferReference(withdrawal.finderId);\n\n      // Convert amount to number and ensure it's in kobo (if amount is in naira, multiply by 100)\n      const amountInKobo = Math.round(parseFloat(withdrawal.amount) * 100);\n\n      // Initiate bank transfer\n      const transferResult = await this.flutterwaveService.initiateBankTransfer(\n        paymentDetails.accountNumber,\n        bankCode,\n        amountInKobo,\n        'NGN',\n        `FinderMeister withdrawal - ${withdrawal.requestId || withdrawalId}`,\n        transferReference,\n        paymentDetails.accountHolder\n      );\n\n      // Update withdrawal status to processing\n      await storage.updateWithdrawalRequest(withdrawalId, {\n        status: 'processing',\n        processedAt: new Date(),\n        adminNotes: `Transfer initiated via Flutterwave. Transfer ID: ${transferResult.id}, Reference: ${transferReference}`\n      });\n\n      console.log(`Withdrawal ${withdrawalId} processed successfully. Transfer ID: ${transferResult.id}`);\n\n      return {\n        success: true,\n        withdrawalId,\n        transferId: transferResult.id,\n        reference: transferReference,\n        message: 'Withdrawal processed successfully'\n      };\n\n    } catch (error: any) {\n      console.error(`Error processing withdrawal ${withdrawalId}:`, error);\n      \n      // Update withdrawal status to failed\n      try {\n        await storage.updateWithdrawalRequest(withdrawalId, {\n          status: 'rejected',\n          processedAt: new Date(),\n          adminNotes: `Failed to process withdrawal: ${error.message}`\n        });\n      } catch (updateError) {\n        console.error('Failed to update withdrawal status:', updateError);\n      }\n\n      return {\n        success: false,\n        withdrawalId,\n        message: 'Failed to process withdrawal',\n        error: error.message\n      };\n    }\n  }\n\n  async handleTransferWebhook(transferData: any): Promise<void> {\n    try {\n      const { reference, status, id: transferId } = transferData;\n      \n      if (!reference) {\n        console.warn('Transfer webhook received without reference');\n        return;\n      }\n\n      // Find withdrawal by reference in admin notes\n      const withdrawals = await storage.getWithdrawalRequests();\n      const withdrawal = withdrawals.find(w => \n        w.adminNotes && w.adminNotes.includes(reference)\n      );\n\n      if (!withdrawal) {\n        console.warn(`Withdrawal not found for transfer reference: ${reference}`);\n        return;\n      }\n\n      let newStatus = 'processing';\n      let adminNotes = withdrawal.adminNotes || '';\n\n      if (status === 'SUCCESSFUL') {\n        newStatus = 'approved';\n        adminNotes += ` | Transfer completed successfully at ${new Date().toISOString()}`;\n      } else if (status === 'FAILED') {\n        newStatus = 'rejected';\n        adminNotes += ` | Transfer failed at ${new Date().toISOString()}. Reason: ${transferData.failure_reason || 'Unknown'}`;\n      }\n\n      await storage.updateWithdrawalRequest(withdrawal.id, {\n        status: newStatus,\n        adminNotes: adminNotes\n      });\n\n      console.log(`Withdrawal ${withdrawal.id} status updated to ${newStatus} based on transfer webhook`);\n\n    } catch (error) {\n      console.error('Error handling transfer webhook:', error);\n    }\n  }\n\n  async retryFailedWithdrawal(withdrawalId: string, adminUserId: string): Promise<WithdrawalProcessResult> {\n    try {\n      // Reset withdrawal to pending status\n      await storage.updateWithdrawalRequest(withdrawalId, {\n        status: 'pending',\n        processedBy: adminUserId,\n        adminNotes: `Retry initiated by admin at ${new Date().toISOString()}`\n      });\n\n      // Process the withdrawal again\n      return await this.processWithdrawal(withdrawalId);\n    } catch (error: any) {\n      console.error(`Error retrying withdrawal ${withdrawalId}:`, error);\n      return {\n        success: false,\n        withdrawalId,\n        message: 'Failed to retry withdrawal',\n        error: error.message\n      };\n    }\n  }\n\n  private async getWithdrawalById(withdrawalId: string): Promise<WithdrawalRequest | undefined> {\n    const withdrawals = await storage.getWithdrawalRequests();\n    return withdrawals.find(w => w.id === withdrawalId);\n  }\n}\n","size_bytes":6264},"client/src/pages/agent/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  TicketIcon, \n  Clock, \n  AlertTriangle, \n  CheckCircle, \n  Users, \n  MessageSquare,\n  ArrowUpRight,\n  Calendar,\n  Filter,\n  RefreshCw\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AgentDashboardData {\n  agent: {\n    id: string;\n    agentId: string;\n    department: string;\n    permissions: string[];\n    maxTicketsPerDay: number;\n    responseTimeTarget: number;\n  };\n  statistics: {\n    assigned: {\n      total: number;\n      open: number;\n      inProgress: number;\n      resolved: number;\n    };\n    department: {\n      total: number;\n      unassigned: number;\n      urgent: number;\n      high: number;\n    };\n  };\n  recentTickets: Array<{\n    id: string;\n    ticketNumber: string;\n    subject: string;\n    status: string;\n    priority: string;\n    createdAt: string;\n    submitterName: string;\n  }>;\n}\n\nconst priorityColors = {\n  urgent: \"bg-red-500\",\n  high: \"bg-orange-500\", \n  medium: \"bg-yellow-500\",\n  low: \"bg-green-500\"\n};\n\nconst statusColors = {\n  open: \"bg-blue-500\",\n  in_progress: \"bg-purple-500\",\n  resolved: \"bg-green-500\",\n  closed: \"bg-gray-500\"\n};\n\nexport default function AgentDashboard() {\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n\n  const { data: dashboardData, isLoading, error, refetch } = useQuery<AgentDashboardData>({\n    queryKey: ['/api/agent/dashboard'],\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  const { data: ticketsData, isLoading: ticketsLoading } = useQuery({\n    queryKey: ['/api/agent/tickets'],\n    staleTime: 60 * 1000, // 1 minute\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: () => apiRequest('/api/agent/dashboard'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/dashboard'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/tickets'] });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-gray-400\" />\n          <p className=\"text-gray-600\">Loading agent dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !dashboardData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-8 h-8 mx-auto mb-4 text-red-500\" />\n          <p className=\"text-red-600 mb-4\">Failed to load dashboard data</p>\n          <Button onClick={() => refetch()}>Retry</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { agent, statistics, recentTickets } = dashboardData;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <TicketIcon className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Agent Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">\n                  {agent.agentId} ‚Ä¢ {agent.department.charAt(0).toUpperCase() + agent.department.slice(1)} Department\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => refreshMutation.mutate()}\n                disabled={refreshMutation.isPending}\n                data-testid=\"button-refresh\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <Link href=\"/agent/tickets\">\n                <Button size=\"sm\" data-testid=\"button-all-tickets\">\n                  <TicketIcon className=\"w-4 h-4 mr-2\" />\n                  All Tickets\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-2 w-[400px]\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"recent\" data-testid=\"tab-recent\">Recent Activity</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {/* Assigned Tickets */}\n              <Card className=\"border-l-4 border-l-blue-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">My Assigned Tickets</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900 mb-3\" data-testid=\"stat-assigned-total\">\n                    {statistics.assigned.total}\n                  </div>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Open:</span>\n                      <span className=\"font-medium text-blue-600\" data-testid=\"stat-assigned-open\">\n                        {statistics.assigned.open}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">In Progress:</span>\n                      <span className=\"font-medium text-purple-600\" data-testid=\"stat-assigned-progress\">\n                        {statistics.assigned.inProgress}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Resolved:</span>\n                      <span className=\"font-medium text-green-600\" data-testid=\"stat-assigned-resolved\">\n                        {statistics.assigned.resolved}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Department Stats */}\n              <Card className=\"border-l-4 border-l-purple-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Department Queue</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900 mb-3\" data-testid=\"stat-department-total\">\n                    {statistics.department.total}\n                  </div>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Unassigned:</span>\n                      <span className=\"font-medium text-orange-600\" data-testid=\"stat-department-unassigned\">\n                        {statistics.department.unassigned}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Urgent:</span>\n                      <span className=\"font-medium text-red-600\" data-testid=\"stat-department-urgent\">\n                        {statistics.department.urgent}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">High Priority:</span>\n                      <span className=\"font-medium text-orange-600\" data-testid=\"stat-department-high\">\n                        {statistics.department.high}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Response Target */}\n              <Card className=\"border-l-4 border-l-green-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Response Target</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-gray-900 mb-1\" data-testid=\"stat-response-target\">\n                    {agent.responseTimeTarget}h\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Target response time</p>\n                  <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    Daily limit: {agent.maxTicketsPerDay} tickets\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card className=\"border-l-4 border-l-yellow-500\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <Link href=\"/agent/tickets?status=open\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-view-open\">\n                      <TicketIcon className=\"w-4 h-4 mr-2\" />\n                      View Open Tickets\n                    </Button>\n                  </Link>\n                  <Link href=\"/agent/tickets?priority=urgent\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-view-urgent\">\n                      <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                      Urgent Tickets\n                    </Button>\n                  </Link>\n                  <Link href=\"/agent/tickets?assigned=unassigned\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-view-unassigned\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Unassigned\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Agent Permissions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold\">Agent Permissions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {agent.permissions.map((permission) => (\n                    <Badge \n                      key={permission} \n                      variant=\"secondary\" \n                      className=\"text-xs\"\n                      data-testid={`permission-${permission}`}\n                    >\n                      {permission.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"recent\" className=\"space-y-6\">\n            {/* Recent Tickets */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">Recent Assigned Tickets</CardTitle>\n                <Link href=\"/agent/tickets\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all\">\n                    View All\n                    <ArrowUpRight className=\"w-4 h-4 ml-1\" />\n                  </Button>\n                </Link>\n              </CardHeader>\n              <CardContent>\n                {recentTickets.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <TicketIcon className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p>No tickets assigned yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {recentTickets.map((ticket) => (\n                      <div \n                        key={ticket.id} \n                        className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                        data-testid={`ticket-${ticket.id}`}\n                      >\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"text-sm font-medium text-gray-900\" data-testid={`ticket-number-${ticket.id}`}>\n                              {ticket.ticketNumber}\n                            </span>\n                            <Badge \n                              variant=\"outline\" \n                              className={`text-xs text-white ${statusColors[ticket.status as keyof typeof statusColors]}`}\n                              data-testid={`ticket-status-${ticket.id}`}\n                            >\n                              {ticket.status.replace('_', ' ')}\n                            </Badge>\n                            <Badge \n                              variant=\"outline\" \n                              className={`text-xs text-white ${priorityColors[ticket.priority as keyof typeof priorityColors]}`}\n                              data-testid={`ticket-priority-${ticket.id}`}\n                            >\n                              {ticket.priority}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-900 truncate\" data-testid={`ticket-subject-${ticket.id}`}>\n                            {ticket.subject}\n                          </p>\n                          <div className=\"flex items-center space-x-4 mt-1 text-xs text-gray-500\">\n                            <span data-testid={`ticket-submitter-${ticket.id}`}>\n                              From: {ticket.submitterName}\n                            </span>\n                            <span data-testid={`ticket-date-${ticket.id}`}>\n                              {format(new Date(ticket.createdAt), 'MMM d, yyyy')}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Link href={`/agent/tickets/${ticket.id}`}>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-ticket-${ticket.id}`}>\n                              <MessageSquare className=\"w-4 h-4 mr-1\" />\n                              View\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":15773},"client/src/pages/agent/ticket-details.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Send, \n  User, \n  Calendar, \n  MessageSquare, \n  AlertCircle, \n  CheckCircle, \n  Clock,\n  Settings,\n  Eye,\n  EyeOff,\n  RefreshCw\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TicketMessage {\n  id: string;\n  ticketId: string;\n  senderId: string | null;\n  senderType: string;\n  senderName: string;\n  senderEmail: string | null;\n  content: string;\n  attachments: string[] | null;\n  isInternal: boolean;\n  createdAt: string;\n  sender?: {\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface TicketDetails {\n  ticket: {\n    id: string;\n    ticketNumber: string;\n    submitterName: string;\n    submitterEmail: string;\n    submitterId: string | null;\n    category: string;\n    priority: string;\n    department: string;\n    subject: string;\n    description: string;\n    status: string;\n    assignedTo: string | null;\n    resolvedAt: string | null;\n    resolution: string | null;\n    satisfactionRating: number | null;\n    satisfactionFeedback: string | null;\n    createdAt: string;\n    updatedAt: string;\n    submitter?: {\n      firstName: string;\n      lastName: string;\n      email: string;\n    };\n    assignedAgent?: {\n      agentId: string;\n      user: {\n        firstName: string;\n        lastName: string;\n      };\n    };\n  };\n  messages: TicketMessage[];\n}\n\nconst priorityColors = {\n  urgent: \"bg-red-500 text-white\",\n  high: \"bg-orange-500 text-white\", \n  medium: \"bg-yellow-500 text-white\",\n  low: \"bg-green-500 text-white\"\n};\n\nconst statusColors = {\n  open: \"bg-blue-500 text-white\",\n  in_progress: \"bg-purple-500 text-white\",\n  resolved: \"bg-green-500 text-white\",\n  closed: \"bg-gray-500 text-white\"\n};\n\nexport default function TicketDetails() {\n  const [match, params] = useRoute(\"/agent/tickets/:id\");\n  const ticketId = params?.id;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [responseContent, setResponseContent] = useState(\"\");\n  const [isInternal, setIsInternal] = useState(false);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [newPriority, setNewPriority] = useState(\"\");\n  const [showInternalNotes, setShowInternalNotes] = useState(true);\n\n  const { data: ticketData, isLoading, error, refetch } = useQuery<TicketDetails>({\n    queryKey: ['/api/agent/tickets', ticketId],\n    enabled: !!ticketId,\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const respondMutation = useMutation({\n    mutationFn: async (data: { content: string; isInternal: boolean }) => {\n      return apiRequest(`/api/agent/tickets/${ticketId}/messages`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Response sent\",\n        description: isInternal ? \"Internal note added successfully\" : \"Response sent to customer\",\n      });\n      setResponseContent(\"\");\n      setIsInternal(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/tickets', ticketId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send response\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTicketMutation = useMutation({\n    mutationFn: async (updates: { status?: string; priority?: string; resolution?: string }) => {\n      return apiRequest(`/api/agent/tickets/${ticketId}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ticket updated\",\n        description: \"Ticket has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/tickets', ticketId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/dashboard'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update ticket\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (ticketData?.ticket) {\n      setNewStatus(ticketData.ticket.status);\n      setNewPriority(ticketData.ticket.priority);\n    }\n  }, [ticketData]);\n\n  if (!match || !ticketId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-8 h-8 mx-auto mb-4 text-red-500\" />\n          <p className=\"text-red-600\">Invalid ticket ID</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-gray-400\" />\n          <p className=\"text-gray-600\">Loading ticket details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !ticketData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-8 h-8 mx-auto mb-4 text-red-500\" />\n          <p className=\"text-red-600 mb-4\">Failed to load ticket details</p>\n          <Button onClick={() => refetch()}>Retry</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { ticket, messages } = ticketData;\n  \n  const filteredMessages = messages.filter(msg => \n    showInternalNotes || !msg.isInternal\n  );\n\n  const handleSendResponse = () => {\n    if (!responseContent.trim()) {\n      toast({\n        title: \"Message required\",\n        description: \"Please enter a message before sending\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    respondMutation.mutate({ \n      content: responseContent.trim(), \n      isInternal \n    });\n  };\n\n  const handleUpdateTicket = () => {\n    const updates: any = {};\n    \n    if (newStatus !== ticket.status) {\n      updates.status = newStatus;\n    }\n    \n    if (newPriority !== ticket.priority) {\n      updates.priority = newPriority;\n    }\n\n    if (Object.keys(updates).length > 0) {\n      updateTicketMutation.mutate(updates);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/agent/tickets\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Tickets\n                </Button>\n              </Link>\n              <div className=\"h-6 w-px bg-gray-300\" />\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\" data-testid=\"ticket-number\">\n                  {ticket.ticketNumber}\n                </h1>\n                <p className=\"text-sm text-gray-600\">\n                  {ticket.department.charAt(0).toUpperCase() + ticket.department.slice(1)} ‚Ä¢ \n                  Created {format(new Date(ticket.createdAt), 'MMM d, yyyy')}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowInternalNotes(!showInternalNotes)}\n                data-testid=\"button-toggle-internal\"\n              >\n                {showInternalNotes ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n                {showInternalNotes ? 'Hide Internal' : 'Show Internal'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => refetch()}\n                data-testid=\"button-refresh\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Ticket Details */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-xl mb-2\" data-testid=\"ticket-subject\">\n                      {ticket.subject}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Badge \n                        className={statusColors[ticket.status as keyof typeof statusColors]}\n                        data-testid=\"ticket-status\"\n                      >\n                        {ticket.status.replace('_', ' ')}\n                      </Badge>\n                      <Badge \n                        className={priorityColors[ticket.priority as keyof typeof priorityColors]}\n                        data-testid=\"ticket-priority\"\n                      >\n                        {ticket.priority}\n                      </Badge>\n                      <Badge variant=\"outline\" data-testid=\"ticket-category\">\n                        {ticket.category}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Description</h4>\n                    <p className=\"text-gray-700 whitespace-pre-wrap\" data-testid=\"ticket-description\">\n                      {ticket.description}\n                    </p>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Submitted by:</span>\n                      <p className=\"font-medium\" data-testid=\"ticket-submitter\">\n                        {ticket.submitter ? \n                          `${ticket.submitter.firstName} ${ticket.submitter.lastName}` : \n                          ticket.submitterName\n                        }\n                      </p>\n                      <p className=\"text-gray-600\" data-testid=\"ticket-email\">\n                        {ticket.submitter?.email || ticket.submitterEmail}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <span className=\"text-gray-500\">Assigned to:</span>\n                      <p className=\"font-medium\" data-testid=\"ticket-assignee\">\n                        {ticket.assignedAgent ? \n                          `${ticket.assignedAgent.user.firstName} ${ticket.assignedAgent.user.lastName}` : \n                          'Unassigned'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Messages */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageSquare className=\"w-5 h-5 mr-2\" />\n                  Conversation ({filteredMessages.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                  {filteredMessages.map((message) => (\n                    <div \n                      key={message.id} \n                      className={`p-4 rounded-lg ${\n                        message.senderType === 'agent' \n                          ? message.isInternal \n                            ? 'bg-yellow-50 border border-yellow-200' \n                            : 'bg-blue-50 border border-blue-200'\n                          : 'bg-gray-50 border border-gray-200'\n                      }`}\n                      data-testid={`message-${message.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium text-sm\" data-testid={`message-sender-${message.id}`}>\n                            {message.sender ? \n                              `${message.sender.firstName} ${message.sender.lastName}` : \n                              message.senderName\n                            }\n                          </span>\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${\n                              message.senderType === 'agent' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                            }`}\n                            data-testid={`message-type-${message.id}`}\n                          >\n                            {message.senderType}\n                          </Badge>\n                          {message.isInternal && (\n                            <Badge variant=\"outline\" className=\"text-xs bg-yellow-100 text-yellow-800\">\n                              Internal\n                            </Badge>\n                          )}\n                        </div>\n                        <span className=\"text-xs text-gray-500\" data-testid={`message-time-${message.id}`}>\n                          {format(new Date(message.createdAt), 'MMM d, yyyy HH:mm')}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-900 whitespace-pre-wrap\" data-testid={`message-content-${message.id}`}>\n                        {message.content}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Response Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Send Response</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Textarea\n                  placeholder=\"Type your response here...\"\n                  value={responseContent}\n                  onChange={(e) => setResponseContent(e.target.value)}\n                  rows={4}\n                  data-testid=\"textarea-response\"\n                />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"internal-note\"\n                      checked={isInternal}\n                      onCheckedChange={(checked) => setIsInternal(checked as boolean)}\n                      data-testid=\"checkbox-internal\"\n                    />\n                    <label htmlFor=\"internal-note\" className=\"text-sm text-gray-600\">\n                      Internal note (not visible to customer)\n                    </label>\n                  </div>\n                  \n                  <Button \n                    onClick={handleSendResponse}\n                    disabled={respondMutation.isPending || !responseContent.trim()}\n                    data-testid=\"button-send-response\"\n                  >\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    {respondMutation.isPending ? 'Sending...' : 'Send Response'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Ticket Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2\" />\n                  Ticket Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Status\n                  </label>\n                  <Select\n                    value={newStatus}\n                    onValueChange={setNewStatus}\n                  >\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Priority\n                  </label>\n                  <Select\n                    value={newPriority}\n                    onValueChange={setNewPriority}\n                  >\n                    <SelectTrigger data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button \n                  onClick={handleUpdateTicket}\n                  disabled={updateTicketMutation.isPending || (newStatus === ticket.status && newPriority === ticket.priority)}\n                  className=\"w-full\"\n                  data-testid=\"button-update-ticket\"\n                >\n                  {updateTicketMutation.isPending ? 'Updating...' : 'Update Ticket'}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Ticket Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Ticket Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Created:</span>\n                  <span data-testid=\"ticket-created\">\n                    {format(new Date(ticket.createdAt), 'MMM d, yyyy HH:mm')}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Last updated:</span>\n                  <span data-testid=\"ticket-updated\">\n                    {format(new Date(ticket.updatedAt), 'MMM d, yyyy HH:mm')}\n                  </span>\n                </div>\n                \n                {ticket.resolvedAt && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Resolved:</span>\n                    <span data-testid=\"ticket-resolved\">\n                      {format(new Date(ticket.resolvedAt), 'MMM d, yyyy HH:mm')}\n                    </span>\n                  </div>\n                )}\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Department:</span>\n                  <span className=\"capitalize\" data-testid=\"ticket-department\">\n                    {ticket.department}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Messages:</span>\n                  <span data-testid=\"ticket-message-count\">\n                    {messages.length}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20865},"client/src/pages/agent/tickets.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  TicketIcon, \n  Search, \n  Filter, \n  RefreshCw, \n  MessageSquare,\n  Calendar,\n  User,\n  ArrowLeft,\n  ChevronRight,\n  AlertCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Ticket {\n  id: string;\n  ticketNumber: string;\n  submitterName: string;\n  submitterEmail: string;\n  submitterId: string | null;\n  category: string;\n  priority: string;\n  department: string;\n  subject: string;\n  description: string;\n  status: string;\n  assignedTo: string | null;\n  resolvedAt: string | null;\n  resolution: string | null;\n  satisfactionRating: number | null;\n  satisfactionFeedback: string | null;\n  createdAt: string;\n  updatedAt: string;\n  submitter?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  assignedAgent?: {\n    agentId: string;\n    user: {\n      firstName: string;\n      lastName: string;\n    };\n  };\n}\n\ninterface TicketsResponse {\n  tickets: Ticket[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n  agent: {\n    id: string;\n    agentId: string;\n    department: string;\n    permissions: string[];\n  };\n}\n\nconst priorityColors = {\n  urgent: \"bg-red-500 text-white\",\n  high: \"bg-orange-500 text-white\", \n  medium: \"bg-yellow-500 text-white\",\n  low: \"bg-green-500 text-white\"\n};\n\nconst statusColors = {\n  open: \"bg-blue-500 text-white\",\n  in_progress: \"bg-purple-500 text-white\",\n  resolved: \"bg-green-500 text-white\",\n  closed: \"bg-gray-500 text-white\"\n};\n\nexport default function AgentTickets() {\n  const [location, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  // URL params for filtering\n  const searchParams = new URLSearchParams(location.split('?')[1] || '');\n  const initialStatus = searchParams.get('status') || '';\n  const initialPriority = searchParams.get('priority') || '';\n  const initialAssigned = searchParams.get('assigned') || '';\n  \n  const [filters, setFilters] = useState({\n    status: initialStatus,\n    priority: initialPriority,\n    search: '',\n    page: 1\n  });\n\n  const { data: ticketsData, isLoading, error, refetch } = useQuery<TicketsResponse>({\n    queryKey: ['/api/agent/tickets', filters.status, filters.priority],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: () => apiRequest('/api/agent/tickets'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/agent/tickets'] });\n    },\n  });\n\n  // Update URL when filters change\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (filters.status) params.set('status', filters.status);\n    if (filters.priority) params.set('priority', filters.priority);\n    \n    const queryString = params.toString();\n    const newLocation = queryString ? `/agent/tickets?${queryString}` : '/agent/tickets';\n    \n    if (location !== newLocation) {\n      setLocation(newLocation);\n    }\n  }, [filters.status, filters.priority]);\n\n  const filteredTickets = ticketsData?.tickets.filter(ticket => {\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      return (\n        ticket.ticketNumber.toLowerCase().includes(searchLower) ||\n        ticket.subject.toLowerCase().includes(searchLower) ||\n        ticket.submitterName.toLowerCase().includes(searchLower) ||\n        ticket.submitterEmail.toLowerCase().includes(searchLower)\n      );\n    }\n    return true;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-gray-400\" />\n          <p className=\"text-gray-600\">Loading tickets...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !ticketsData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-8 h-8 mx-auto mb-4 text-red-500\" />\n          <p className=\"text-red-600 mb-4\">Failed to load tickets</p>\n          <Button onClick={() => refetch()}>Retry</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { agent } = ticketsData;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/agent/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </Link>\n              <div className=\"h-6 w-px bg-gray-300\" />\n              <div className=\"flex items-center space-x-3\">\n                <TicketIcon className=\"w-6 h-6 text-blue-600\" />\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">Support Tickets</h1>\n                  <p className=\"text-sm text-gray-600\">\n                    {agent.department.charAt(0).toUpperCase() + agent.department.slice(1)} Department\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => refreshMutation.mutate()}\n                disabled={refreshMutation.isPending}\n                data-testid=\"button-refresh\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold flex items-center\">\n              <Filter className=\"w-5 h-5 mr-2\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search tickets...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n\n              {/* Status Filter */}\n              <Select\n                value={filters.status}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}\n              >\n                <SelectTrigger data-testid=\"select-status\">\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Statuses</SelectItem>\n                  <SelectItem value=\"open\">Open</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Priority Filter */}\n              <Select\n                value={filters.priority}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, priority: value }))}\n              >\n                <SelectTrigger data-testid=\"select-priority\">\n                  <SelectValue placeholder=\"All Priorities\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Priorities</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Clear Filters */}\n              <Button \n                variant=\"outline\" \n                onClick={() => setFilters({ status: '', priority: '', search: '', page: 1 })}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tickets List */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">\n              Tickets ({filteredTickets.length})\n            </CardTitle>\n            {initialAssigned === 'unassigned' && (\n              <Badge variant=\"outline\" className=\"bg-orange-50 text-orange-600 border-orange-200\">\n                Showing Unassigned Only\n              </Badge>\n            )}\n          </CardHeader>\n          <CardContent>\n            {filteredTickets.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <TicketIcon className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium mb-2\">No tickets found</h3>\n                <p>Try adjusting your filters or check back later.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredTickets.map((ticket) => (\n                  <div \n                    key={ticket.id} \n                    className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n                    data-testid={`ticket-card-${ticket.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <span \n                            className=\"text-sm font-mono font-medium text-blue-600\"\n                            data-testid={`ticket-number-${ticket.id}`}\n                          >\n                            {ticket.ticketNumber}\n                          </span>\n                          <Badge \n                            className={statusColors[ticket.status as keyof typeof statusColors]}\n                            data-testid={`ticket-status-${ticket.id}`}\n                          >\n                            {ticket.status.replace('_', ' ')}\n                          </Badge>\n                          <Badge \n                            className={priorityColors[ticket.priority as keyof typeof priorityColors]}\n                            data-testid={`ticket-priority-${ticket.id}`}\n                          >\n                            {ticket.priority}\n                          </Badge>\n                          {!ticket.assignedTo && (\n                            <Badge variant=\"outline\" className=\"text-orange-600 border-orange-200\">\n                              Unassigned\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <h3 \n                          className=\"text-lg font-medium text-gray-900 mb-2\"\n                          data-testid={`ticket-subject-${ticket.id}`}\n                        >\n                          {ticket.subject}\n                        </h3>\n                        \n                        <p \n                          className=\"text-sm text-gray-600 mb-3 line-clamp-2\"\n                          data-testid={`ticket-description-${ticket.id}`}\n                        >\n                          {ticket.description}\n                        </p>\n                        \n                        <div className=\"flex items-center space-x-6 text-xs text-gray-500\">\n                          <div className=\"flex items-center\">\n                            <User className=\"w-3 h-3 mr-1\" />\n                            <span data-testid={`ticket-submitter-${ticket.id}`}>\n                              {ticket.submitter ? \n                                `${ticket.submitter.firstName} ${ticket.submitter.lastName}` : \n                                ticket.submitterName\n                              }\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            <span data-testid={`ticket-created-${ticket.id}`}>\n                              {format(new Date(ticket.createdAt), 'MMM d, yyyy HH:mm')}\n                            </span>\n                          </div>\n                          \n                          {ticket.assignedAgent && (\n                            <div className=\"flex items-center\">\n                              <span className=\"text-gray-400\">Assigned to:</span>\n                              <span className=\"ml-1 font-medium\" data-testid={`ticket-assignee-${ticket.id}`}>\n                                {ticket.assignedAgent.user.firstName} {ticket.assignedAgent.user.lastName}\n                              </span>\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center\">\n                            <span className=\"text-gray-400\">Category:</span>\n                            <span className=\"ml-1 capitalize\" data-testid={`ticket-category-${ticket.id}`}>\n                              {ticket.category}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"ml-4 flex flex-col space-y-2\">\n                        <Link href={`/agent/tickets/${ticket.id}`}>\n                          <Button size=\"sm\" data-testid={`button-view-ticket-${ticket.id}`}>\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            View Details\n                            <ChevronRight className=\"w-4 h-4 ml-1\" />\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Pagination would go here if needed */}\n        {filteredTickets.length > 20 && (\n          <Card className=\"mt-6\">\n            <CardContent className=\"py-4\">\n              <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                <span>Showing {Math.min(20, filteredTickets.length)} of {filteredTickets.length} tickets</span>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Previous\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled>\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16033},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: string | string[];\n  requireAuth?: boolean;\n}\n\nexport function ProtectedRoute({ \n  children, \n  requiredRole, \n  requireAuth = true \n}: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Don't redirect while still loading\n    if (isLoading) return;\n\n    // If authentication is required but user is not authenticated\n    if (requireAuth && !isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    // If user is authenticated but doesn't have required role\n    if (isAuthenticated && user && requiredRole) {\n      const userRole = user.role;\n      const allowedRoles = Array.isArray(requiredRole) ? requiredRole : [requiredRole];\n      \n      if (!allowedRoles.includes(userRole)) {\n        // Redirect based on user's actual role\n        switch (userRole) {\n          case 'admin':\n            setLocation(\"/admin/dashboard\");\n            break;\n          case 'finder':\n            setLocation(\"/finder/dashboard\");\n            break;\n          case 'client':\n            setLocation(\"/client/dashboard\");\n            break;\n          default:\n            setLocation(\"/\");\n        }\n        return;\n      }\n    }\n  }, [isLoading, isAuthenticated, user, requiredRole, requireAuth, setLocation]);\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If authentication is required but user is not authenticated, don't render\n  if (requireAuth && !isAuthenticated) {\n    return null;\n  }\n\n  // If user is authenticated but doesn't have required role, don't render\n  if (isAuthenticated && user && requiredRole) {\n    const userRole = user.role;\n    const allowedRoles = Array.isArray(requiredRole) ? requiredRole : [requiredRole];\n    \n    if (!allowedRoles.includes(userRole)) {\n      return null;\n    }\n  }\n\n  // Render the protected component\n  return <>{children}</>;\n}\n\nexport function AdminRoute({ children }: { children: React.ReactNode }) {\n  return (\n    <ProtectedRoute requiredRole=\"admin\">\n      {children}\n    </ProtectedRoute>\n  );\n}\n\nexport function FinderRoute({ children }: { children: React.ReactNode }) {\n  return (\n    <ProtectedRoute requiredRole=\"finder\">\n      {children}\n    </ProtectedRoute>\n  );\n}\n\nexport function ClientRoute({ children }: { children: React.ReactNode }) {\n  return (\n    <ProtectedRoute requiredRole=\"client\">\n      {children}\n    </ProtectedRoute>\n  );\n}\n\nexport function AuthenticatedRoute({ children }: { children: React.ReactNode }) {\n  return (\n    <ProtectedRoute>\n      {children}\n    </ProtectedRoute>\n  );\n}\n\n// Special route for support agents\nexport function AgentRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (isLoading) return;\n    \n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    // For agent routes, we need to check if the user has support agent permissions\n    // This will be validated at the API level, but we redirect non-admins away\n    if (user && user.role !== 'admin') {\n      switch (user.role) {\n        case 'finder':\n          setLocation(\"/finder/dashboard\");\n          break;\n        case 'client':\n          setLocation(\"/client/dashboard\");\n          break;\n        default:\n          setLocation(\"/\");\n      }\n    }\n  }, [isLoading, isAuthenticated, user, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}","size_bytes":4415},"client/src/pages/verification.tsx":{"content":"\nimport { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ClientHeader from \"@/components/client-header\";\nimport { FinderHeader } from \"@/components/finder-header\";\nimport {\n  CheckCircle,\n  Clock,\n  XCircle,\n  Upload,\n  Camera,\n  FileImage,\n  AlertTriangle,\n  Shield,\n  Users,\n  Eye\n} from \"lucide-react\";\n\ninterface VerificationStatus {\n  isRequired: boolean;\n  verification: {\n    id: string;\n    status: string;\n    documentType: string;\n    submittedAt: string;\n    reviewedAt?: string;\n    rejectionReason?: string;\n  } | null;\n}\n\nconst documentTypes = [\n  { value: \"national_id\", label: \"National ID Card\" },\n  { value: \"passport\", label: \"International Passport\" },\n  { value: \"voters_card\", label: \"Voter's Card\" }\n];\n\nexport default function Verification() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedDocumentType, setSelectedDocumentType] = useState(\"\");\n  const [documentFront, setDocumentFront] = useState<File | null>(null);\n  const [documentBack, setDocumentBack] = useState<File | null>(null);\n  const [selfie, setSelfie] = useState<File | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const documentFrontRef = useRef<HTMLInputElement>(null);\n  const documentBackRef = useRef<HTMLInputElement>(null);\n  const selfieRef = useRef<HTMLInputElement>(null);\n\n  const { data: verificationStatus, isLoading } = useQuery<VerificationStatus>({\n    queryKey: ['/api/verification/status'],\n    enabled: !!user\n  });\n\n  const submitVerification = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/verification/submit', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to submit verification');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/verification/status'] });\n      toast({ \n        title: \"Verification submitted successfully\", \n        description: \"Your documents are now under review.\" \n      });\n      // Reset form\n      setSelectedDocumentType(\"\");\n      setDocumentFront(null);\n      setDocumentBack(null);\n      setSelfie(null);\n      setIsSubmitting(false);\n    },\n    onError: (error: any) => {\n      console.error('Verification submission error:', error);\n      toast({ \n        title: \"Error submitting verification\", \n        description: error.message || \"Please try again\", \n        variant: \"destructive\" \n      });\n      setIsSubmitting(false);\n    }\n  });\n\n  const handleFileSelect = (type: 'documentFront' | 'documentBack' | 'selfie', file: File) => {\n    if (type === 'documentFront') setDocumentFront(file);\n    else if (type === 'documentBack') setDocumentBack(file);\n    else if (type === 'selfie') setSelfie(file);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedDocumentType || !documentFront || !selfie) {\n      toast({ \n        title: \"Missing required fields\", \n        description: \"Please select document type, upload document front, and take a selfie.\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    const formData = new FormData();\n    formData.append('documentType', selectedDocumentType);\n    formData.append('documentFront', documentFront);\n    if (documentBack) formData.append('documentBack', documentBack);\n    formData.append('selfie', selfie);\n\n    try {\n      await submitVerification.mutateAsync(formData);\n    } catch (error) {\n      // Error handling is done in the mutation onError callback\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'verified':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Verified</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Under Review</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Not Started</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        {user?.role === 'client' && <ClientHeader currentPage=\"verification\" />}\n        {user?.role === 'finder' && <FinderHeader currentPage=\"verification\" />}\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4 font-medium\">Loading verification status...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!verificationStatus?.isRequired) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n        {user?.role === 'client' && <ClientHeader currentPage=\"verification\" />}\n        {user?.role === 'finder' && <FinderHeader currentPage=\"verification\" />}\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 py-8\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Shield className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Verification Not Required</h3>\n              <p className=\"text-gray-600\">\n                Identity verification is currently not required for this platform.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const verification = verificationStatus.verification;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/20\">\n      {user?.role === 'client' && <ClientHeader currentPage=\"verification\" />}\n      {user?.role === 'finder' && <FinderHeader currentPage=\"verification\" />}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4 flex items-center justify-center\">\n            <Shield className=\"mr-3 h-8 w-8 text-blue-600\" />\n            Identity Verification\n          </h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Verify your identity to access all FinderMeister features. This helps maintain trust and security in our community.\n          </p>\n        </div>\n\n        {/* Current Status */}\n        {verification && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Current Verification Status\n                {getStatusBadge(verification.status)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div>\n                  <span className=\"font-medium\">Document Type:</span> {documentTypes.find(d => d.value === verification.documentType)?.label}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Submitted:</span> {new Date(verification.submittedAt).toLocaleDateString()}\n                </div>\n                {verification.reviewedAt && (\n                  <div>\n                    <span className=\"font-medium\">Reviewed:</span> {new Date(verification.reviewedAt).toLocaleDateString()}\n                  </div>\n                )}\n                {verification.rejectionReason && (\n                  <Alert className=\"mt-4\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Rejection Reason:</strong> {verification.rejectionReason}\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Verification Benefits */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"mr-2 h-5 w-5 text-blue-600\" />\n              Why Verify Your Identity?\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <Shield className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                <h3 className=\"font-medium mb-2\">Trust & Safety</h3>\n                <p className=\"text-sm text-gray-600\">Build trust with other verified users</p>\n              </div>\n              <div className=\"text-center\">\n                <CheckCircle className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                <h3 className=\"font-medium mb-2\">Full Access</h3>\n                <p className=\"text-sm text-gray-600\">Access all platform features</p>\n              </div>\n              <div className=\"text-center\">\n                <Eye className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                <h3 className=\"font-medium mb-2\">Priority Support</h3>\n                <p className=\"text-sm text-gray-600\">Get faster customer support</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Verification Form */}\n        {(!verification || verification.status === 'rejected') && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Submit Verification Documents</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <form onSubmit={handleSubmit}>\n                {/* Document Type Selection */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"documentType\">Select Document Type</Label>\n                  <Select value={selectedDocumentType} onValueChange={setSelectedDocumentType}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose your ID document type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {documentTypes.map(doc => (\n                        <SelectItem key={doc.value} value={doc.value}>{doc.label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Document Front Upload */}\n                <div className=\"space-y-2\">\n                  <Label>Document Front Image</Label>\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <input\n                      ref={documentFrontRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={(e) => e.target.files?.[0] && handleFileSelect('documentFront', e.target.files[0])}\n                    />\n                    {documentFront ? (\n                      <div className=\"space-y-2\">\n                        <FileImage className=\"w-8 h-8 text-green-600 mx-auto\" />\n                        <p className=\"text-sm text-green-600 font-medium\">{documentFront.name}</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => documentFrontRef.current?.click()}\n                        >\n                          Change File\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <Upload className=\"w-8 h-8 text-gray-400 mx-auto\" />\n                        <p className=\"text-sm text-gray-600\">Upload front side of your ID document</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => documentFrontRef.current?.click()}\n                        >\n                          Select File\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Document Back Upload */}\n                <div className=\"space-y-2\">\n                  <Label>Document Back Image (Optional)</Label>\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <input\n                      ref={documentBackRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={(e) => e.target.files?.[0] && handleFileSelect('documentBack', e.target.files[0])}\n                    />\n                    {documentBack ? (\n                      <div className=\"space-y-2\">\n                        <FileImage className=\"w-8 h-8 text-green-600 mx-auto\" />\n                        <p className=\"text-sm text-green-600 font-medium\">{documentBack.name}</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => documentBackRef.current?.click()}\n                        >\n                          Change File\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <Upload className=\"w-8 h-8 text-gray-400 mx-auto\" />\n                        <p className=\"text-sm text-gray-600\">Upload back side of your ID document (if applicable)</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => documentBackRef.current?.click()}\n                        >\n                          Select File\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Selfie Upload */}\n                <div className=\"space-y-2\">\n                  <Label>Selfie Photo</Label>\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <input\n                      ref={selfieRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      capture=\"user\"\n                      className=\"hidden\"\n                      onChange={(e) => e.target.files?.[0] && handleFileSelect('selfie', e.target.files[0])}\n                    />\n                    {selfie ? (\n                      <div className=\"space-y-2\">\n                        <Camera className=\"w-8 h-8 text-green-600 mx-auto\" />\n                        <p className=\"text-sm text-green-600 font-medium\">{selfie.name}</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => selfieRef.current?.click()}\n                        >\n                          Retake Photo\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        <Camera className=\"w-8 h-8 text-gray-400 mx-auto\" />\n                        <p className=\"text-sm text-gray-600\">Take a clear selfie photo</p>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => selfieRef.current?.click()}\n                        >\n                          Take Selfie\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <Button \n                  type=\"submit\"\n                  className=\"w-full\" \n                  disabled={isSubmitting || !selectedDocumentType || !documentFront || !selfie}\n                >\n                  {isSubmitting ? \"Submitting...\" : \"Submit for Verification\"}\n                </Button>\n              </form>\n\n              {/* Guidelines */}\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Important Guidelines:</strong>\n                  <ul className=\"mt-2 space-y-1 text-sm\">\n                    <li>‚Ä¢ Ensure all images are clear and well-lit</li>\n                    <li>‚Ä¢ All text on documents must be readable</li>\n                    <li>‚Ä¢ Your face in the selfie should match the ID photo</li>\n                    <li>‚Ä¢ Documents must be valid and not expired</li>\n                  </ul>\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17928}},"version":1}